//
// 常州金姆健康科技有限公司. (c) 2019
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: jinmuhealth/platform/report/v1/report.proto

package reportv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Gender 性别.
type Gender int32

const (
	// 无效的性别
	Gender_GENDER_INVALID Gender = 0
	// 未设置性别
	Gender_GENDER_UNSET Gender = 1
	// 男
	Gender_GENDER_MALE Gender = 2
	// 女
	Gender_GENDER_FEMALE Gender = 3
)

// Enum value maps for Gender.
var (
	Gender_name = map[int32]string{
		0: "GENDER_INVALID",
		1: "GENDER_UNSET",
		2: "GENDER_MALE",
		3: "GENDER_FEMALE",
	}
	Gender_value = map[string]int32{
		"GENDER_INVALID": 0,
		"GENDER_UNSET":   1,
		"GENDER_MALE":    2,
		"GENDER_FEMALE":  3,
	}
)

func (x Gender) Enum() *Gender {
	p := new(Gender)
	*p = x
	return p
}

func (x Gender) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Gender) Descriptor() protoreflect.EnumDescriptor {
	return file_jinmuhealth_platform_report_v1_report_proto_enumTypes[0].Descriptor()
}

func (Gender) Type() protoreflect.EnumType {
	return &file_jinmuhealth_platform_report_v1_report_proto_enumTypes[0]
}

func (x Gender) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Gender.Descriptor instead.
func (Gender) EnumDescriptor() ([]byte, []int) {
	return file_jinmuhealth_platform_report_v1_report_proto_rawDescGZIP(), []int{0}
}

// 脉诊测量的身体部位
type BodyPart int32

const (
	// Invalid body part
	// 无效的身体部位
	BodyPart_BODY_PART_INVALID BodyPart = 0
	// Unset body part
	// 未设置身体部位
	BodyPart_BODY_PART_UNSET BodyPart = 1
	// 左手小拇指
	BodyPart_BODY_PART_FINGER_LEFT_1 BodyPart = 2
	// 左手无名指
	BodyPart_BODY_PART_FINGER_LEFT_2 BodyPart = 3
	// 左手中指
	BodyPart_BODY_PART_FINGER_LEFT_3 BodyPart = 4
	// 左手食指
	BodyPart_BODY_PART_FINGER_LEFT_4 BodyPart = 5
	// 左手大拇指
	BodyPart_BODY_PART_FINGER_LEFT_5 BodyPart = 6
	// 右手小拇指
	BodyPart_BODY_PART_FINGER_RIGHT_1 BodyPart = 7
	// 右手无名指
	BodyPart_BODY_PART_FINGER_RIGHT_2 BodyPart = 8
	// 右手中指
	BodyPart_BODY_PART_FINGER_RIGHT_3 BodyPart = 9
	// 右手食指
	BodyPart_BODY_PART_FINGER_RIGHT_4 BodyPart = 10
	// 右手大拇指
	BodyPart_BODY_PART_FINGER_RIGHT_5 BodyPart = 11
	// 左手手腕
	BodyPart_BODY_PART_LEFT_WRIST BodyPart = 12
	// 右手手腕
	BodyPart_BODY_PART_RIGHT_WRIST BodyPart = 13
)

// Enum value maps for BodyPart.
var (
	BodyPart_name = map[int32]string{
		0:  "BODY_PART_INVALID",
		1:  "BODY_PART_UNSET",
		2:  "BODY_PART_FINGER_LEFT_1",
		3:  "BODY_PART_FINGER_LEFT_2",
		4:  "BODY_PART_FINGER_LEFT_3",
		5:  "BODY_PART_FINGER_LEFT_4",
		6:  "BODY_PART_FINGER_LEFT_5",
		7:  "BODY_PART_FINGER_RIGHT_1",
		8:  "BODY_PART_FINGER_RIGHT_2",
		9:  "BODY_PART_FINGER_RIGHT_3",
		10: "BODY_PART_FINGER_RIGHT_4",
		11: "BODY_PART_FINGER_RIGHT_5",
		12: "BODY_PART_LEFT_WRIST",
		13: "BODY_PART_RIGHT_WRIST",
	}
	BodyPart_value = map[string]int32{
		"BODY_PART_INVALID":        0,
		"BODY_PART_UNSET":          1,
		"BODY_PART_FINGER_LEFT_1":  2,
		"BODY_PART_FINGER_LEFT_2":  3,
		"BODY_PART_FINGER_LEFT_3":  4,
		"BODY_PART_FINGER_LEFT_4":  5,
		"BODY_PART_FINGER_LEFT_5":  6,
		"BODY_PART_FINGER_RIGHT_1": 7,
		"BODY_PART_FINGER_RIGHT_2": 8,
		"BODY_PART_FINGER_RIGHT_3": 9,
		"BODY_PART_FINGER_RIGHT_4": 10,
		"BODY_PART_FINGER_RIGHT_5": 11,
		"BODY_PART_LEFT_WRIST":     12,
		"BODY_PART_RIGHT_WRIST":    13,
	}
)

func (x BodyPart) Enum() *BodyPart {
	p := new(BodyPart)
	*p = x
	return p
}

func (x BodyPart) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BodyPart) Descriptor() protoreflect.EnumDescriptor {
	return file_jinmuhealth_platform_report_v1_report_proto_enumTypes[1].Descriptor()
}

func (BodyPart) Type() protoreflect.EnumType {
	return &file_jinmuhealth_platform_report_v1_report_proto_enumTypes[1]
}

func (x BodyPart) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BodyPart.Descriptor instead.
func (BodyPart) EnumDescriptor() ([]byte, []int) {
	return file_jinmuhealth_platform_report_v1_report_proto_rawDescGZIP(), []int{1}
}

// 测量姿态
type PulseTestPosture int32

const (
	// 无效的测量姿态
	PulseTestPosture_PULSE_TEST_POSTURE_INVALID PulseTestPosture = 0
	// 未设置测量姿态
	PulseTestPosture_PULSE_TEST_POSTURE_UNSET PulseTestPosture = 1
	// 坐姿
	PulseTestPosture_PULSE_TEST_POSTURE_SITTING PulseTestPosture = 2
	// 站姿
	PulseTestPosture_PULSE_TEST_POSTURE_STANDING PulseTestPosture = 3
	// 躺姿
	PulseTestPosture_PULSE_TEST_POSTURE_LYING PulseTestPosture = 4
)

// Enum value maps for PulseTestPosture.
var (
	PulseTestPosture_name = map[int32]string{
		0: "PULSE_TEST_POSTURE_INVALID",
		1: "PULSE_TEST_POSTURE_UNSET",
		2: "PULSE_TEST_POSTURE_SITTING",
		3: "PULSE_TEST_POSTURE_STANDING",
		4: "PULSE_TEST_POSTURE_LYING",
	}
	PulseTestPosture_value = map[string]int32{
		"PULSE_TEST_POSTURE_INVALID":  0,
		"PULSE_TEST_POSTURE_UNSET":    1,
		"PULSE_TEST_POSTURE_SITTING":  2,
		"PULSE_TEST_POSTURE_STANDING": 3,
		"PULSE_TEST_POSTURE_LYING":    4,
	}
)

func (x PulseTestPosture) Enum() *PulseTestPosture {
	p := new(PulseTestPosture)
	*p = x
	return p
}

func (x PulseTestPosture) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PulseTestPosture) Descriptor() protoreflect.EnumDescriptor {
	return file_jinmuhealth_platform_report_v1_report_proto_enumTypes[2].Descriptor()
}

func (PulseTestPosture) Type() protoreflect.EnumType {
	return &file_jinmuhealth_platform_report_v1_report_proto_enumTypes[2]
}

func (x PulseTestPosture) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PulseTestPosture.Descriptor instead.
func (PulseTestPosture) EnumDescriptor() ([]byte, []int) {
	return file_jinmuhealth_platform_report_v1_report_proto_rawDescGZIP(), []int{2}
}

// 采样设备类型
type DeviceType int32

const (
	// 无效的
	DeviceType_DEVICE_TYPE_INVALID DeviceType = 0
	// 未设置
	DeviceType_DEVICE_TYPE_UNSET DeviceType = 1
	// 摄像头形式采样设备
	DeviceType_DEVICE_TYPE_CAMERA DeviceType = 2
	// 外围设备形式采样设备
	DeviceType_DEVICE_TYPE_PERIPHERAL DeviceType = 3
)

// Enum value maps for DeviceType.
var (
	DeviceType_name = map[int32]string{
		0: "DEVICE_TYPE_INVALID",
		1: "DEVICE_TYPE_UNSET",
		2: "DEVICE_TYPE_CAMERA",
		3: "DEVICE_TYPE_PERIPHERAL",
	}
	DeviceType_value = map[string]int32{
		"DEVICE_TYPE_INVALID":    0,
		"DEVICE_TYPE_UNSET":      1,
		"DEVICE_TYPE_CAMERA":     2,
		"DEVICE_TYPE_PERIPHERAL": 3,
	}
)

func (x DeviceType) Enum() *DeviceType {
	p := new(DeviceType)
	*p = x
	return p
}

func (x DeviceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceType) Descriptor() protoreflect.EnumDescriptor {
	return file_jinmuhealth_platform_report_v1_report_proto_enumTypes[3].Descriptor()
}

func (DeviceType) Type() protoreflect.EnumType {
	return &file_jinmuhealth_platform_report_v1_report_proto_enumTypes[3]
}

func (x DeviceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeviceType.Descriptor instead.
func (DeviceType) EnumDescriptor() ([]byte, []int) {
	return file_jinmuhealth_platform_report_v1_report_proto_rawDescGZIP(), []int{3}
}

// 测量功能开关
type PulseTestOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 是否是临时来宾用户测量
	// 如果是临时（来宾）用户，则忽略 subject_id 的值.
	// 临时（来宾）用户产生的数据不纳入统计功能分析.
	IsGuestSubject bool `protobuf:"varint,1,opt,name=is_guest_subject,json=isGuestSubject,proto3" json:"is_guest_subject,omitempty"`
	// 是否启用历史记录，启用后的可以在历史记录中查询到
	// 临时（来宾）用户时，忽略本字段设定，视为 false 处理
	EnableHistory bool `protobuf:"varint,2,opt,name=enable_history,json=enableHistory,proto3" json:"enable_history,omitempty"`
	// 是否启用统计，启用统计会参与周报月报统计
	// 临时（来宾）用户时，忽略本字段设定，按照 false 处理
	EnableTrendingStatistics bool `protobuf:"varint,3,opt,name=enable_trending_statistics,json=enableTrendingStatistics,proto3" json:"enable_trending_statistics,omitempty"`
	// 额外的扩展选项，Key-Value Pair
	// 不超过 200 个 Key-Value Pair.
	// Key 的字符长度不超过 64 个字符
	// Value 的字符长度不超过 65536 个字符
	Extras map[string]string `protobuf:"bytes,200,rep,name=extras,proto3" json:"extras,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PulseTestOptions) Reset() {
	*x = PulseTestOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jinmuhealth_platform_report_v1_report_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PulseTestOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PulseTestOptions) ProtoMessage() {}

func (x *PulseTestOptions) ProtoReflect() protoreflect.Message {
	mi := &file_jinmuhealth_platform_report_v1_report_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PulseTestOptions.ProtoReflect.Descriptor instead.
func (*PulseTestOptions) Descriptor() ([]byte, []int) {
	return file_jinmuhealth_platform_report_v1_report_proto_rawDescGZIP(), []int{0}
}

func (x *PulseTestOptions) GetIsGuestSubject() bool {
	if x != nil {
		return x.IsGuestSubject
	}
	return false
}

func (x *PulseTestOptions) GetEnableHistory() bool {
	if x != nil {
		return x.EnableHistory
	}
	return false
}

func (x *PulseTestOptions) GetEnableTrendingStatistics() bool {
	if x != nil {
		return x.EnableTrendingStatistics
	}
	return false
}

func (x *PulseTestOptions) GetExtras() map[string]string {
	if x != nil {
		return x.Extras
	}
	return nil
}

// Subject's profile.
// 受试者档案.
type SubjectProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 受试者 ID，用于标记受试者
	// PulseTestOptions.is_guest = false 时必填，不可为空.
	// PulseTestOptions.is_guest = true 时忽略本字段内容.
	// subject_id 由 Developer 自行维护，标识唯一性，通常使用用户ID
	// subject_id 应当在 Developer 下辖的所有 App 中唯一.
	SubjectId string `protobuf:"bytes,1,opt,name=subject_id,json=subjectId,proto3" json:"subject_id,omitempty"`
	// 性别
	Gender Gender `protobuf:"varint,2,opt,name=gender,proto3,enum=jinmuhealth.platform.report.v1.Gender" json:"gender,omitempty"`
	// 测量时身高，单位 cm
	Height uint32 `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
	// 测量时体重，单位 kg
	Weight uint32 `protobuf:"varint,4,opt,name=weight,proto3" json:"weight,omitempty"`
	// 测量时年龄
	Age uint32 `protobuf:"varint,5,opt,name=age,proto3" json:"age,omitempty"`
	// 额外的扩展数据，Key-Value Pair
	// 不超过 500 个 Key-Value Pair.
	// Key 的字符长度不超过 64 个字符
	// Value 的字符长度不超过 65536 个字符
	AdditionalData map[string]string `protobuf:"bytes,100,rep,name=additional_data,json=additionalData,proto3" json:"additional_data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SubjectProfile) Reset() {
	*x = SubjectProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jinmuhealth_platform_report_v1_report_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubjectProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubjectProfile) ProtoMessage() {}

func (x *SubjectProfile) ProtoReflect() protoreflect.Message {
	mi := &file_jinmuhealth_platform_report_v1_report_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubjectProfile.ProtoReflect.Descriptor instead.
func (*SubjectProfile) Descriptor() ([]byte, []int) {
	return file_jinmuhealth_platform_report_v1_report_proto_rawDescGZIP(), []int{1}
}

func (x *SubjectProfile) GetSubjectId() string {
	if x != nil {
		return x.SubjectId
	}
	return ""
}

func (x *SubjectProfile) GetGender() Gender {
	if x != nil {
		return x.Gender
	}
	return Gender_GENDER_INVALID
}

func (x *SubjectProfile) GetHeight() uint32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *SubjectProfile) GetWeight() uint32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *SubjectProfile) GetAge() uint32 {
	if x != nil {
		return x.Age
	}
	return 0
}

func (x *SubjectProfile) GetAdditionalData() map[string]string {
	if x != nil {
		return x.AdditionalData
	}
	return nil
}

// 采样负载
type SamplePayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 测量的身体部位
	Part BodyPart `protobuf:"varint,1,opt,name=part,proto3,enum=jinmuhealth.platform.report.v1.BodyPart" json:"part,omitempty"`
	// 测量姿势
	Posture PulseTestPosture `protobuf:"varint,2,opt,name=posture,proto3,enum=jinmuhealth.platform.report.v1.PulseTestPosture" json:"posture,omitempty"`
	// 位置信息（可选）
	GeoLocation *GeoLocation `protobuf:"bytes,3,opt,name=geo_location,json=geoLocation,proto3" json:"geo_location,omitempty"`
	// 采样设备
	SampleDevice *SampleDevice `protobuf:"bytes,10,opt,name=sample_device,json=sampleDevice,proto3" json:"sample_device,omitempty"`
	// 采样数据
	SampleData *SampleData `protobuf:"bytes,11,opt,name=sample_data,json=sampleData,proto3" json:"sample_data,omitempty"`
	// 采样备注
	// 不超过 2000 个字符
	Remark string `protobuf:"bytes,20,opt,name=remark,proto3" json:"remark,omitempty"`
	// 额外的扩展数据，Key-Value Pair
	// 不超过 100 个 Key-Value Pair.
	// Key 的字符长度不超过 64 个字符
	// Value 的字符长度不超过 65536 个字符
	AdditionalData map[string]string `protobuf:"bytes,100,rep,name=additional_data,json=additionalData,proto3" json:"additional_data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SamplePayload) Reset() {
	*x = SamplePayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jinmuhealth_platform_report_v1_report_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SamplePayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SamplePayload) ProtoMessage() {}

func (x *SamplePayload) ProtoReflect() protoreflect.Message {
	mi := &file_jinmuhealth_platform_report_v1_report_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SamplePayload.ProtoReflect.Descriptor instead.
func (*SamplePayload) Descriptor() ([]byte, []int) {
	return file_jinmuhealth_platform_report_v1_report_proto_rawDescGZIP(), []int{2}
}

func (x *SamplePayload) GetPart() BodyPart {
	if x != nil {
		return x.Part
	}
	return BodyPart_BODY_PART_INVALID
}

func (x *SamplePayload) GetPosture() PulseTestPosture {
	if x != nil {
		return x.Posture
	}
	return PulseTestPosture_PULSE_TEST_POSTURE_INVALID
}

func (x *SamplePayload) GetGeoLocation() *GeoLocation {
	if x != nil {
		return x.GeoLocation
	}
	return nil
}

func (x *SamplePayload) GetSampleDevice() *SampleDevice {
	if x != nil {
		return x.SampleDevice
	}
	return nil
}

func (x *SamplePayload) GetSampleData() *SampleData {
	if x != nil {
		return x.SampleData
	}
	return nil
}

func (x *SamplePayload) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *SamplePayload) GetAdditionalData() map[string]string {
	if x != nil {
		return x.AdditionalData
	}
	return nil
}

// 采样设备
type SampleDevice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 设备类型
	DeviceType DeviceType `protobuf:"varint,1,opt,name=device_type,json=deviceType,proto3,enum=jinmuhealth.platform.report.v1.DeviceType" json:"device_type,omitempty"`
	// 设备的型号
	// DEVICE_TYPE_PERIPHERAL 时不可为空
	DeviceModel string `protobuf:"bytes,3,opt,name=device_model,json=deviceModel,proto3" json:"device_model,omitempty"`
	// 设备的 MAC 地址
	// DEVICE_TYPE_PERIPHERAL 时不可为空
	DeviceMac string `protobuf:"bytes,4,opt,name=device_mac,json=deviceMac,proto3" json:"device_mac,omitempty"`
	// 设备的 sn 号，可为空
	DeviceSn string `protobuf:"bytes,5,opt,name=device_sn,json=deviceSn,proto3" json:"device_sn,omitempty"`
	// 设备参数 KV（可选）
	// 可以包括 SDK返回的测量上下文信息，
	// 例如 OS 信息、手机型号、摄像头型号、摄像头参数…等等.
	// 不同的 DeviceType 此处内容不一样.
	DeviceParams map[string]string `protobuf:"bytes,6,rep,name=device_params,json=deviceParams,proto3" json:"device_params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SampleDevice) Reset() {
	*x = SampleDevice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jinmuhealth_platform_report_v1_report_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SampleDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SampleDevice) ProtoMessage() {}

func (x *SampleDevice) ProtoReflect() protoreflect.Message {
	mi := &file_jinmuhealth_platform_report_v1_report_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SampleDevice.ProtoReflect.Descriptor instead.
func (*SampleDevice) Descriptor() ([]byte, []int) {
	return file_jinmuhealth_platform_report_v1_report_proto_rawDescGZIP(), []int{3}
}

func (x *SampleDevice) GetDeviceType() DeviceType {
	if x != nil {
		return x.DeviceType
	}
	return DeviceType_DEVICE_TYPE_INVALID
}

func (x *SampleDevice) GetDeviceModel() string {
	if x != nil {
		return x.DeviceModel
	}
	return ""
}

func (x *SampleDevice) GetDeviceMac() string {
	if x != nil {
		return x.DeviceMac
	}
	return ""
}

func (x *SampleDevice) GetDeviceSn() string {
	if x != nil {
		return x.DeviceSn
	}
	return ""
}

func (x *SampleDevice) GetDeviceParams() map[string]string {
	if x != nil {
		return x.DeviceParams
	}
	return nil
}

// 采样数据
type SampleData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 测量采样数据点的编解码器
	// 用户数据预处理或加解密算法识别.
	Codec string `protobuf:"bytes,1,opt,name=codec,proto3" json:"codec,omitempty"`
	// 测量采样数据点的编解码器的参数 KV（可选）
	CodecParams map[string]string `protobuf:"bytes,2,rep,name=codec_params,json=codecParams,proto3" json:"codec_params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 测量采样数据点的数据，经过 codec 编码后的字节流。
	// 需要将每个数据点转换为字节形式顺序排列。
	// data 的字节长度不能超过 128KB.
	Data []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	// 对 data 的 HMAC-MD5 签名，用于数据校验
	Signature string `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
	// 本次采样工作时的实际采样频率
	SampleRate uint32 `protobuf:"varint,5,opt,name=sample_rate,json=sampleRate,proto3" json:"sample_rate,omitempty"`
	// 测量时所在地的时区，使用符合 ISO 8601 标准的 UTC 偏移量表示法，±[hh]:[mm]
	// 例如：+08:00 表示东8区，-05:00 表示西5区
	// 参见: https://en.wikipedia.org/wiki/ISO_8601
	Timezone string `protobuf:"bytes,6,opt,name=timezone,proto3" json:"timezone,omitempty"`
	// 本次采样开始时间 UTC
	StartTime *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// 本次采样结束时间 UTC
	StopTime *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=stop_time,json=stopTime,proto3" json:"stop_time,omitempty"`
}

func (x *SampleData) Reset() {
	*x = SampleData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jinmuhealth_platform_report_v1_report_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SampleData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SampleData) ProtoMessage() {}

func (x *SampleData) ProtoReflect() protoreflect.Message {
	mi := &file_jinmuhealth_platform_report_v1_report_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SampleData.ProtoReflect.Descriptor instead.
func (*SampleData) Descriptor() ([]byte, []int) {
	return file_jinmuhealth_platform_report_v1_report_proto_rawDescGZIP(), []int{4}
}

func (x *SampleData) GetCodec() string {
	if x != nil {
		return x.Codec
	}
	return ""
}

func (x *SampleData) GetCodecParams() map[string]string {
	if x != nil {
		return x.CodecParams
	}
	return nil
}

func (x *SampleData) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *SampleData) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

func (x *SampleData) GetSampleRate() uint32 {
	if x != nil {
		return x.SampleRate
	}
	return 0
}

func (x *SampleData) GetTimezone() string {
	if x != nil {
		return x.Timezone
	}
	return ""
}

func (x *SampleData) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *SampleData) GetStopTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StopTime
	}
	return nil
}

// 分析报告内容
type ReportContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 分析报告 ID
	ReportId string `protobuf:"bytes,1,opt,name=report_id,json=reportId,proto3" json:"report_id,omitempty"`
	// 分析报告模块计算结果清单
	ModuleResults []*ReportModuleResult `protobuf:"bytes,2,rep,name=module_results,json=moduleResults,proto3" json:"module_results,omitempty"`
	// 创建日期
	CreatedTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=created_time,json=createdTime,proto3" json:"created_time,omitempty"`
	// 额外信息
	Extras map[string]string `protobuf:"bytes,100,rep,name=extras,proto3" json:"extras,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ReportContent) Reset() {
	*x = ReportContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jinmuhealth_platform_report_v1_report_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportContent) ProtoMessage() {}

func (x *ReportContent) ProtoReflect() protoreflect.Message {
	mi := &file_jinmuhealth_platform_report_v1_report_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportContent.ProtoReflect.Descriptor instead.
func (*ReportContent) Descriptor() ([]byte, []int) {
	return file_jinmuhealth_platform_report_v1_report_proto_rawDescGZIP(), []int{5}
}

func (x *ReportContent) GetReportId() string {
	if x != nil {
		return x.ReportId
	}
	return ""
}

func (x *ReportContent) GetModuleResults() []*ReportModuleResult {
	if x != nil {
		return x.ModuleResults
	}
	return nil
}

func (x *ReportContent) GetCreatedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedTime
	}
	return nil
}

func (x *ReportContent) GetExtras() map[string]string {
	if x != nil {
		return x.Extras
	}
	return nil
}

// 一个模块提问的问题清单
type QuestionList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 提问的问题列表
	Questions []*Question `protobuf:"bytes,1,rep,name=questions,proto3" json:"questions,omitempty"`
}

func (x *QuestionList) Reset() {
	*x = QuestionList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jinmuhealth_platform_report_v1_report_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionList) ProtoMessage() {}

func (x *QuestionList) ProtoReflect() protoreflect.Message {
	mi := &file_jinmuhealth_platform_report_v1_report_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionList.ProtoReflect.Descriptor instead.
func (*QuestionList) Descriptor() ([]byte, []int) {
	return file_jinmuhealth_platform_report_v1_report_proto_rawDescGZIP(), []int{6}
}

func (x *QuestionList) GetQuestions() []*Question {
	if x != nil {
		return x.Questions
	}
	return nil
}

// 问的问题
type Question struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 问题的 key
	QuestionKey string `protobuf:"bytes,1,opt,name=question_key,json=questionKey,proto3" json:"question_key,omitempty"`
	// 问题题干内容
	Content string `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	// 类型
	// - "single_choice" 单选题
	// - "multiple_choice" 多选题
	Type string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	// 选择题选项
	Choices []*QuestionChoice `protobuf:"bytes,4,rep,name=choices,proto3" json:"choices,omitempty"`
}

func (x *Question) Reset() {
	*x = Question{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jinmuhealth_platform_report_v1_report_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Question) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Question) ProtoMessage() {}

func (x *Question) ProtoReflect() protoreflect.Message {
	mi := &file_jinmuhealth_platform_report_v1_report_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Question.ProtoReflect.Descriptor instead.
func (*Question) Descriptor() ([]byte, []int) {
	return file_jinmuhealth_platform_report_v1_report_proto_rawDescGZIP(), []int{7}
}

func (x *Question) GetQuestionKey() string {
	if x != nil {
		return x.QuestionKey
	}
	return ""
}

func (x *Question) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Question) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Question) GetChoices() []*QuestionChoice {
	if x != nil {
		return x.Choices
	}
	return nil
}

// 一个模块的回答清单
type AnswerList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 回答的问题列表
	Answers []*Answer `protobuf:"bytes,1,rep,name=answers,proto3" json:"answers,omitempty"`
}

func (x *AnswerList) Reset() {
	*x = AnswerList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jinmuhealth_platform_report_v1_report_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnswerList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnswerList) ProtoMessage() {}

func (x *AnswerList) ProtoReflect() protoreflect.Message {
	mi := &file_jinmuhealth_platform_report_v1_report_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnswerList.ProtoReflect.Descriptor instead.
func (*AnswerList) Descriptor() ([]byte, []int) {
	return file_jinmuhealth_platform_report_v1_report_proto_rawDescGZIP(), []int{8}
}

func (x *AnswerList) GetAnswers() []*Answer {
	if x != nil {
		return x.Answers
	}
	return nil
}

// 单个问题的回答
type Answer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 问题
	QuestionKey string `protobuf:"bytes,1,opt,name=question_key,json=questionKey,proto3" json:"question_key,omitempty"`
	// 答案
	AnswerKeys []string `protobuf:"bytes,2,rep,name=answer_keys,json=answerKeys,proto3" json:"answer_keys,omitempty"`
}

func (x *Answer) Reset() {
	*x = Answer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jinmuhealth_platform_report_v1_report_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Answer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Answer) ProtoMessage() {}

func (x *Answer) ProtoReflect() protoreflect.Message {
	mi := &file_jinmuhealth_platform_report_v1_report_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Answer.ProtoReflect.Descriptor instead.
func (*Answer) Descriptor() ([]byte, []int) {
	return file_jinmuhealth_platform_report_v1_report_proto_rawDescGZIP(), []int{9}
}

func (x *Answer) GetQuestionKey() string {
	if x != nil {
		return x.QuestionKey
	}
	return ""
}

func (x *Answer) GetAnswerKeys() []string {
	if x != nil {
		return x.AnswerKeys
	}
	return nil
}

// 选项
type QuestionChoice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 选项的 key
	ChoiceKey string `protobuf:"bytes,1,opt,name=choice_key,json=choiceKey,proto3" json:"choice_key,omitempty"`
	// 内容
	Content string `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	// 冲突选项
	ConflictKeys []string `protobuf:"bytes,3,rep,name=conflict_keys,json=conflictKeys,proto3" json:"conflict_keys,omitempty"`
	// 是否默认选中
	Selected bool `protobuf:"varint,4,opt,name=selected,proto3" json:"selected,omitempty"`
}

func (x *QuestionChoice) Reset() {
	*x = QuestionChoice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jinmuhealth_platform_report_v1_report_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionChoice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionChoice) ProtoMessage() {}

func (x *QuestionChoice) ProtoReflect() protoreflect.Message {
	mi := &file_jinmuhealth_platform_report_v1_report_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionChoice.ProtoReflect.Descriptor instead.
func (*QuestionChoice) Descriptor() ([]byte, []int) {
	return file_jinmuhealth_platform_report_v1_report_proto_rawDescGZIP(), []int{10}
}

func (x *QuestionChoice) GetChoiceKey() string {
	if x != nil {
		return x.ChoiceKey
	}
	return ""
}

func (x *QuestionChoice) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *QuestionChoice) GetConflictKeys() []string {
	if x != nil {
		return x.ConflictKeys
	}
	return nil
}

func (x *QuestionChoice) GetSelected() bool {
	if x != nil {
		return x.Selected
	}
	return false
}

// 分析报告内容模版参数数
type ReportTemplateParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 语言代码
	// The BCP-47 language code, such as "en-US" or "sr-Latn".
	// For more information, see
	// http://www.unicode.org/reports/tr35/#Unicode_locale_identifier.
	LanguageCode string `protobuf:"bytes,1,opt,name=language_code,json=languageCode,proto3" json:"language_code,omitempty"`
	// 额外参数
	ExtraParams map[string]string `protobuf:"bytes,2,rep,name=extra_params,json=extraParams,proto3" json:"extra_params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ReportTemplateParams) Reset() {
	*x = ReportTemplateParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jinmuhealth_platform_report_v1_report_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportTemplateParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportTemplateParams) ProtoMessage() {}

func (x *ReportTemplateParams) ProtoReflect() protoreflect.Message {
	mi := &file_jinmuhealth_platform_report_v1_report_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportTemplateParams.ProtoReflect.Descriptor instead.
func (*ReportTemplateParams) Descriptor() ([]byte, []int) {
	return file_jinmuhealth_platform_report_v1_report_proto_rawDescGZIP(), []int{11}
}

func (x *ReportTemplateParams) GetLanguageCode() string {
	if x != nil {
		return x.LanguageCode
	}
	return ""
}

func (x *ReportTemplateParams) GetExtraParams() map[string]string {
	if x != nil {
		return x.ExtraParams
	}
	return nil
}

// 分析报告搜索结果项目，历史记录清单时使用
type SearchReportItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 分析报告 ID
	ReportId string `protobuf:"bytes,1,opt,name=report_id,json=reportId,proto3" json:"report_id,omitempty"`
	// 用户 ID
	UserId string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// 创建日期
	CreatedTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=created_time,json=createdTime,proto3" json:"created_time,omitempty"`
}

func (x *SearchReportItem) Reset() {
	*x = SearchReportItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jinmuhealth_platform_report_v1_report_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchReportItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchReportItem) ProtoMessage() {}

func (x *SearchReportItem) ProtoReflect() protoreflect.Message {
	mi := &file_jinmuhealth_platform_report_v1_report_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchReportItem.ProtoReflect.Descriptor instead.
func (*SearchReportItem) Descriptor() ([]byte, []int) {
	return file_jinmuhealth_platform_report_v1_report_proto_rawDescGZIP(), []int{12}
}

func (x *SearchReportItem) GetReportId() string {
	if x != nil {
		return x.ReportId
	}
	return ""
}

func (x *SearchReportItem) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *SearchReportItem) GetCreatedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedTime
	}
	return nil
}

// 地理位置信息
type GeoLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// https://developer.mozilla.org/en-US/docs/Web/API/GeolocationCoordinates
	// 纬度: position's latitude in decimal degrees
	Latitude float64 `protobuf:"fixed64,1,opt,name=latitude,proto3" json:"latitude,omitempty"`
	// 经度: position's longitude in decimal degrees
	Longitude float64 `protobuf:"fixed64,2,opt,name=longitude,proto3" json:"longitude,omitempty"`
	// 海拔: position's altitude in meters, relative to sea level
	Altitude *wrapperspb.DoubleValue `protobuf:"bytes,3,opt,name=altitude,proto3" json:"altitude,omitempty"`
	// 经纬度的精度: accuracy of the latitude and longitude properties, expressed
	// in meters.
	Accuracy float64 `protobuf:"fixed64,4,opt,name=accuracy,proto3" json:"accuracy,omitempty"`
	// 海拔精度: accuracy of the altitude expressed in meters
	AltitudeAccuracy *wrapperspb.DoubleValue `protobuf:"bytes,5,opt,name=altitude_accuracy,json=altitudeAccuracy,proto3" json:"altitude_accuracy,omitempty"`
	// 方向:  direction in which the device is traveling
	Heading *wrapperspb.DoubleValue `protobuf:"bytes,6,opt,name=heading,proto3" json:"heading,omitempty"`
	// 设备运动的速度: velocity of the device in meters per second
	Speed *wrapperspb.DoubleValue `protobuf:"bytes,7,opt,name=speed,proto3" json:"speed,omitempty"`
}

func (x *GeoLocation) Reset() {
	*x = GeoLocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jinmuhealth_platform_report_v1_report_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeoLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeoLocation) ProtoMessage() {}

func (x *GeoLocation) ProtoReflect() protoreflect.Message {
	mi := &file_jinmuhealth_platform_report_v1_report_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeoLocation.ProtoReflect.Descriptor instead.
func (*GeoLocation) Descriptor() ([]byte, []int) {
	return file_jinmuhealth_platform_report_v1_report_proto_rawDescGZIP(), []int{13}
}

func (x *GeoLocation) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *GeoLocation) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *GeoLocation) GetAltitude() *wrapperspb.DoubleValue {
	if x != nil {
		return x.Altitude
	}
	return nil
}

func (x *GeoLocation) GetAccuracy() float64 {
	if x != nil {
		return x.Accuracy
	}
	return 0
}

func (x *GeoLocation) GetAltitudeAccuracy() *wrapperspb.DoubleValue {
	if x != nil {
		return x.AltitudeAccuracy
	}
	return nil
}

func (x *GeoLocation) GetHeading() *wrapperspb.DoubleValue {
	if x != nil {
		return x.Heading
	}
	return nil
}

func (x *GeoLocation) GetSpeed() *wrapperspb.DoubleValue {
	if x != nil {
		return x.Speed
	}
	return nil
}

// CData 算法数据
type CData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// c0
	C0 int32 `protobuf:"varint,1,opt,name=c0,proto3" json:"c0,omitempty"`
	// c1
	C1 int32 `protobuf:"varint,2,opt,name=c1,proto3" json:"c1,omitempty"`
	// c2
	C2 int32 `protobuf:"varint,3,opt,name=c2,proto3" json:"c2,omitempty"`
	// c3
	C3 int32 `protobuf:"varint,4,opt,name=c3,proto3" json:"c3,omitempty"`
	// c4
	C4 int32 `protobuf:"varint,5,opt,name=c4,proto3" json:"c4,omitempty"`
	// c5
	C5 int32 `protobuf:"varint,6,opt,name=c5,proto3" json:"c5,omitempty"`
	// c6
	C6 int32 `protobuf:"varint,7,opt,name=c6,proto3" json:"c6,omitempty"`
	// c7
	C7 int32 `protobuf:"varint,8,opt,name=c7,proto3" json:"c7,omitempty"`
}

func (x *CData) Reset() {
	*x = CData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jinmuhealth_platform_report_v1_report_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CData) ProtoMessage() {}

func (x *CData) ProtoReflect() protoreflect.Message {
	mi := &file_jinmuhealth_platform_report_v1_report_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CData.ProtoReflect.Descriptor instead.
func (*CData) Descriptor() ([]byte, []int) {
	return file_jinmuhealth_platform_report_v1_report_proto_rawDescGZIP(), []int{14}
}

func (x *CData) GetC0() int32 {
	if x != nil {
		return x.C0
	}
	return 0
}

func (x *CData) GetC1() int32 {
	if x != nil {
		return x.C1
	}
	return 0
}

func (x *CData) GetC2() int32 {
	if x != nil {
		return x.C2
	}
	return 0
}

func (x *CData) GetC3() int32 {
	if x != nil {
		return x.C3
	}
	return 0
}

func (x *CData) GetC4() int32 {
	if x != nil {
		return x.C4
	}
	return 0
}

func (x *CData) GetC5() int32 {
	if x != nil {
		return x.C5
	}
	return 0
}

func (x *CData) GetC6() int32 {
	if x != nil {
		return x.C6
	}
	return 0
}

func (x *CData) GetC7() int32 {
	if x != nil {
		return x.C7
	}
	return 0
}

var File_jinmuhealth_platform_report_v1_report_proto protoreflect.FileDescriptor

var file_jinmuhealth_platform_report_v1_report_proto_rawDesc = []byte{
	0x0a, 0x2b, 0x6a, 0x69, 0x6e, 0x6d, 0x75, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2f, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x76, 0x31,
	0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1e, 0x6a,
	0x69, 0x6e, 0x6d, 0x75, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x33,
	0x6a, 0x69, 0x6e, 0x6d, 0x75, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2f, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xb3, 0x02, 0x0a, 0x10, 0x50, 0x75, 0x6c, 0x73, 0x65, 0x54, 0x65, 0x73,
	0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x67,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x47, 0x75, 0x65, 0x73, 0x74, 0x53, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x68, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x3c, 0x0a, 0x1a, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x55, 0x0a, 0x06, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x73, 0x18, 0xc8, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x6a, 0x69, 0x6e, 0x6d, 0x75,
	0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x6c, 0x73, 0x65, 0x54,
	0x65, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x65, 0x78, 0x74, 0x72, 0x61, 0x73, 0x1a, 0x39,
	0x0a, 0x0b, 0x45, 0x78, 0x74, 0x72, 0x61, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe1, 0x02, 0x0a, 0x0e, 0x53, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x06, 0x67,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x6a, 0x69,
	0x6e, 0x6d, 0x75, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x61,
	0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x61, 0x67, 0x65, 0x12, 0x6b, 0x0a,
	0x0f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x64, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x6a, 0x69, 0x6e, 0x6d, 0x75, 0x68, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x61, 0x64, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x41, 0x0a, 0x13, 0x41, 0x64,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd0, 0x04,
	0x0a, 0x0d, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12,
	0x3c, 0x0a, 0x04, 0x70, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e,
	0x6a, 0x69, 0x6e, 0x6d, 0x75, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x42,
	0x6f, 0x64, 0x79, 0x50, 0x61, 0x72, 0x74, 0x52, 0x04, 0x70, 0x61, 0x72, 0x74, 0x12, 0x4a, 0x0a,
	0x07, 0x70, 0x6f, 0x73, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30,
	0x2e, 0x6a, 0x69, 0x6e, 0x6d, 0x75, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x75, 0x6c, 0x73, 0x65, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x75, 0x72, 0x65,
	0x52, 0x07, 0x70, 0x6f, 0x73, 0x74, 0x75, 0x72, 0x65, 0x12, 0x4e, 0x0a, 0x0c, 0x67, 0x65, 0x6f,
	0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x6a, 0x69, 0x6e, 0x6d, 0x75, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x67, 0x65,
	0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x0d, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x6a, 0x69, 0x6e, 0x6d, 0x75, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x0c,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4b, 0x0a, 0x0b,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x6a, 0x69, 0x6e, 0x6d, 0x75, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x12, 0x6a, 0x0a, 0x0f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x64, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x6a, 0x69, 0x6e,
	0x6d, 0x75, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x61,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x41, 0x0a,
	0x13, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xe0, 0x02, 0x0a, 0x0c, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x4b, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x6a, 0x69, 0x6e, 0x6d, 0x75, 0x68, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6d, 0x61, 0x63, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x63,
	0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x6e, 0x12, 0x63, 0x0a,
	0x0d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x6a, 0x69, 0x6e, 0x6d, 0x75, 0x68, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x1a, 0x3f, 0x0a, 0x11, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xa5, 0x03, 0x0a, 0x0a, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x12, 0x5e, 0x0a, 0x0c, 0x63, 0x6f, 0x64, 0x65,
	0x63, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b,
	0x2e, 0x6a, 0x69, 0x6e, 0x6d, 0x75, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x63,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x63, 0x6f, 0x64,
	0x65, 0x63, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74,
	0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74,
	0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x08, 0x73, 0x74, 0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x3e, 0x0a, 0x10, 0x43,
	0x6f, 0x64, 0x65, 0x63, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd4, 0x02, 0x0a, 0x0d,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x59, 0x0a, 0x0e, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6a, 0x69, 0x6e, 0x6d, 0x75, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x3d, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x51, 0x0a, 0x06, 0x65, 0x78, 0x74, 0x72, 0x61, 0x73, 0x18, 0x64,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6a, 0x69, 0x6e, 0x6d, 0x75, 0x68, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x06, 0x65, 0x78, 0x74, 0x72, 0x61, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x56, 0x0a, 0x0c, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x46, 0x0a, 0x09, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6a, 0x69, 0x6e, 0x6d, 0x75, 0x68, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xa5, 0x01, 0x0a, 0x08, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x48, 0x0a, 0x07, 0x63, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6a, 0x69, 0x6e, 0x6d,
	0x75, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x07, 0x63, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x73, 0x22, 0x4e, 0x0a, 0x0a, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x40, 0x0a, 0x07, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x6a, 0x69, 0x6e, 0x6d, 0x75, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x07, 0x61, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x73, 0x22, 0x4c, 0x0a, 0x06, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12,
	0x1f, 0x0a, 0x0b, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x73,
	0x22, 0x8a, 0x01, 0x0a, 0x0e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x4b,
	0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d,
	0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x4b, 0x65, 0x79,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x22, 0xe5, 0x01,
	0x0a, 0x14, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x68, 0x0a, 0x0c, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x45, 0x2e, 0x6a, 0x69, 0x6e, 0x6d, 0x75, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x65, 0x78, 0x74, 0x72, 0x61, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x3e, 0x0a, 0x10, 0x45, 0x78, 0x74, 0x72, 0x61, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x87, 0x01, 0x0a, 0x10, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x3d, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0xd4, 0x02, 0x0a, 0x0b, 0x47, 0x65, 0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c,
	0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09,
	0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x38, 0x0a, 0x08, 0x61, 0x6c, 0x74,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x61, 0x6c, 0x74, 0x69, 0x74,
	0x75, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x61, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x12,
	0x49, 0x0a, 0x11, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x75,
	0x72, 0x61, 0x63, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x41, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x12, 0x36, 0x0a, 0x07, 0x68, 0x65,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x12, 0x32, 0x0a, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x22, 0x87, 0x01, 0x0a, 0x05, 0x43, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x0e, 0x0a, 0x02, 0x63, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x63, 0x30,
	0x12, 0x0e, 0x0a, 0x02, 0x63, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x63, 0x31,
	0x12, 0x0e, 0x0a, 0x02, 0x63, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x63, 0x32,
	0x12, 0x0e, 0x0a, 0x02, 0x63, 0x33, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x63, 0x33,
	0x12, 0x0e, 0x0a, 0x02, 0x63, 0x34, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x63, 0x34,
	0x12, 0x0e, 0x0a, 0x02, 0x63, 0x35, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x63, 0x35,
	0x12, 0x0e, 0x0a, 0x02, 0x63, 0x36, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x63, 0x36,
	0x12, 0x0e, 0x0a, 0x02, 0x63, 0x37, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x63, 0x37,
	0x2a, 0x52, 0x0a, 0x06, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x0e, 0x47, 0x45,
	0x4e, 0x44, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x10,
	0x0a, 0x0c, 0x47, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x01,
	0x12, 0x0f, 0x0a, 0x0b, 0x47, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x4d, 0x41, 0x4c, 0x45, 0x10,
	0x02, 0x12, 0x11, 0x0a, 0x0d, 0x47, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x46, 0x45, 0x4d, 0x41,
	0x4c, 0x45, 0x10, 0x03, 0x2a, 0x92, 0x03, 0x0a, 0x08, 0x42, 0x6f, 0x64, 0x79, 0x50, 0x61, 0x72,
	0x74, 0x12, 0x15, 0x0a, 0x11, 0x42, 0x4f, 0x44, 0x59, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x5f, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x42, 0x4f, 0x44, 0x59,
	0x5f, 0x50, 0x41, 0x52, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x01, 0x12, 0x1b, 0x0a,
	0x17, 0x42, 0x4f, 0x44, 0x59, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x5f, 0x46, 0x49, 0x4e, 0x47, 0x45,
	0x52, 0x5f, 0x4c, 0x45, 0x46, 0x54, 0x5f, 0x31, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x42, 0x4f,
	0x44, 0x59, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x5f, 0x46, 0x49, 0x4e, 0x47, 0x45, 0x52, 0x5f, 0x4c,
	0x45, 0x46, 0x54, 0x5f, 0x32, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x42, 0x4f, 0x44, 0x59, 0x5f,
	0x50, 0x41, 0x52, 0x54, 0x5f, 0x46, 0x49, 0x4e, 0x47, 0x45, 0x52, 0x5f, 0x4c, 0x45, 0x46, 0x54,
	0x5f, 0x33, 0x10, 0x04, 0x12, 0x1b, 0x0a, 0x17, 0x42, 0x4f, 0x44, 0x59, 0x5f, 0x50, 0x41, 0x52,
	0x54, 0x5f, 0x46, 0x49, 0x4e, 0x47, 0x45, 0x52, 0x5f, 0x4c, 0x45, 0x46, 0x54, 0x5f, 0x34, 0x10,
	0x05, 0x12, 0x1b, 0x0a, 0x17, 0x42, 0x4f, 0x44, 0x59, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x5f, 0x46,
	0x49, 0x4e, 0x47, 0x45, 0x52, 0x5f, 0x4c, 0x45, 0x46, 0x54, 0x5f, 0x35, 0x10, 0x06, 0x12, 0x1c,
	0x0a, 0x18, 0x42, 0x4f, 0x44, 0x59, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x5f, 0x46, 0x49, 0x4e, 0x47,
	0x45, 0x52, 0x5f, 0x52, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x31, 0x10, 0x07, 0x12, 0x1c, 0x0a, 0x18,
	0x42, 0x4f, 0x44, 0x59, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x5f, 0x46, 0x49, 0x4e, 0x47, 0x45, 0x52,
	0x5f, 0x52, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x32, 0x10, 0x08, 0x12, 0x1c, 0x0a, 0x18, 0x42, 0x4f,
	0x44, 0x59, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x5f, 0x46, 0x49, 0x4e, 0x47, 0x45, 0x52, 0x5f, 0x52,
	0x49, 0x47, 0x48, 0x54, 0x5f, 0x33, 0x10, 0x09, 0x12, 0x1c, 0x0a, 0x18, 0x42, 0x4f, 0x44, 0x59,
	0x5f, 0x50, 0x41, 0x52, 0x54, 0x5f, 0x46, 0x49, 0x4e, 0x47, 0x45, 0x52, 0x5f, 0x52, 0x49, 0x47,
	0x48, 0x54, 0x5f, 0x34, 0x10, 0x0a, 0x12, 0x1c, 0x0a, 0x18, 0x42, 0x4f, 0x44, 0x59, 0x5f, 0x50,
	0x41, 0x52, 0x54, 0x5f, 0x46, 0x49, 0x4e, 0x47, 0x45, 0x52, 0x5f, 0x52, 0x49, 0x47, 0x48, 0x54,
	0x5f, 0x35, 0x10, 0x0b, 0x12, 0x18, 0x0a, 0x14, 0x42, 0x4f, 0x44, 0x59, 0x5f, 0x50, 0x41, 0x52,
	0x54, 0x5f, 0x4c, 0x45, 0x46, 0x54, 0x5f, 0x57, 0x52, 0x49, 0x53, 0x54, 0x10, 0x0c, 0x12, 0x19,
	0x0a, 0x15, 0x42, 0x4f, 0x44, 0x59, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x5f, 0x52, 0x49, 0x47, 0x48,
	0x54, 0x5f, 0x57, 0x52, 0x49, 0x53, 0x54, 0x10, 0x0d, 0x2a, 0xaf, 0x01, 0x0a, 0x10, 0x50, 0x75,
	0x6c, 0x73, 0x65, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1e,
	0x0a, 0x1a, 0x50, 0x55, 0x4c, 0x53, 0x45, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x50, 0x4f, 0x53,
	0x54, 0x55, 0x52, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x1c,
	0x0a, 0x18, 0x50, 0x55, 0x4c, 0x53, 0x45, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x50, 0x4f, 0x53,
	0x54, 0x55, 0x52, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a,
	0x50, 0x55, 0x4c, 0x53, 0x45, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x50, 0x4f, 0x53, 0x54, 0x55,
	0x52, 0x45, 0x5f, 0x53, 0x49, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b,
	0x50, 0x55, 0x4c, 0x53, 0x45, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x50, 0x4f, 0x53, 0x54, 0x55,
	0x52, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x1c, 0x0a,
	0x18, 0x50, 0x55, 0x4c, 0x53, 0x45, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x50, 0x4f, 0x53, 0x54,
	0x55, 0x52, 0x45, 0x5f, 0x4c, 0x59, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x2a, 0x70, 0x0a, 0x0a, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x44, 0x45, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x45, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x52, 0x41, 0x10,
	0x02, 0x12, 0x1a, 0x0a, 0x16, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x50, 0x45, 0x52, 0x49, 0x50, 0x48, 0x45, 0x52, 0x41, 0x4c, 0x10, 0x03, 0x42, 0xc9, 0x01,
	0x0a, 0x22, 0x63, 0x6f, 0x6d, 0x2e, 0x6a, 0x69, 0x6e, 0x6d, 0x75, 0x68, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x2e, 0x76, 0x31, 0x42, 0x0b, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x50, 0x01, 0x5a, 0x4c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x6a, 0x69, 0x6e, 0x6d, 0x75, 0x6b, 0x65, 0x6a, 0x69, 0x2f, 0x6a, 0x74, 0x2d, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x6a, 0x69, 0x6e, 0x6d, 0x75, 0x68,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x2f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x76, 0x31, 0x3b, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x76,
	0x31, 0xa2, 0x02, 0x03, 0x4a, 0x50, 0x52, 0xaa, 0x02, 0x1e, 0x4a, 0x69, 0x6e, 0x6d, 0x75, 0x68,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x1e, 0x4a, 0x69, 0x6e, 0x6d, 0x75,
	0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5c, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5c,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5c, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_jinmuhealth_platform_report_v1_report_proto_rawDescOnce sync.Once
	file_jinmuhealth_platform_report_v1_report_proto_rawDescData = file_jinmuhealth_platform_report_v1_report_proto_rawDesc
)

func file_jinmuhealth_platform_report_v1_report_proto_rawDescGZIP() []byte {
	file_jinmuhealth_platform_report_v1_report_proto_rawDescOnce.Do(func() {
		file_jinmuhealth_platform_report_v1_report_proto_rawDescData = protoimpl.X.CompressGZIP(file_jinmuhealth_platform_report_v1_report_proto_rawDescData)
	})
	return file_jinmuhealth_platform_report_v1_report_proto_rawDescData
}

var file_jinmuhealth_platform_report_v1_report_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_jinmuhealth_platform_report_v1_report_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_jinmuhealth_platform_report_v1_report_proto_goTypes = []interface{}{
	(Gender)(0),                    // 0: jinmuhealth.platform.report.v1.Gender
	(BodyPart)(0),                  // 1: jinmuhealth.platform.report.v1.BodyPart
	(PulseTestPosture)(0),          // 2: jinmuhealth.platform.report.v1.PulseTestPosture
	(DeviceType)(0),                // 3: jinmuhealth.platform.report.v1.DeviceType
	(*PulseTestOptions)(nil),       // 4: jinmuhealth.platform.report.v1.PulseTestOptions
	(*SubjectProfile)(nil),         // 5: jinmuhealth.platform.report.v1.SubjectProfile
	(*SamplePayload)(nil),          // 6: jinmuhealth.platform.report.v1.SamplePayload
	(*SampleDevice)(nil),           // 7: jinmuhealth.platform.report.v1.SampleDevice
	(*SampleData)(nil),             // 8: jinmuhealth.platform.report.v1.SampleData
	(*ReportContent)(nil),          // 9: jinmuhealth.platform.report.v1.ReportContent
	(*QuestionList)(nil),           // 10: jinmuhealth.platform.report.v1.QuestionList
	(*Question)(nil),               // 11: jinmuhealth.platform.report.v1.Question
	(*AnswerList)(nil),             // 12: jinmuhealth.platform.report.v1.AnswerList
	(*Answer)(nil),                 // 13: jinmuhealth.platform.report.v1.Answer
	(*QuestionChoice)(nil),         // 14: jinmuhealth.platform.report.v1.QuestionChoice
	(*ReportTemplateParams)(nil),   // 15: jinmuhealth.platform.report.v1.ReportTemplateParams
	(*SearchReportItem)(nil),       // 16: jinmuhealth.platform.report.v1.SearchReportItem
	(*GeoLocation)(nil),            // 17: jinmuhealth.platform.report.v1.GeoLocation
	(*CData)(nil),                  // 18: jinmuhealth.platform.report.v1.CData
	nil,                            // 19: jinmuhealth.platform.report.v1.PulseTestOptions.ExtrasEntry
	nil,                            // 20: jinmuhealth.platform.report.v1.SubjectProfile.AdditionalDataEntry
	nil,                            // 21: jinmuhealth.platform.report.v1.SamplePayload.AdditionalDataEntry
	nil,                            // 22: jinmuhealth.platform.report.v1.SampleDevice.DeviceParamsEntry
	nil,                            // 23: jinmuhealth.platform.report.v1.SampleData.CodecParamsEntry
	nil,                            // 24: jinmuhealth.platform.report.v1.ReportContent.ExtrasEntry
	nil,                            // 25: jinmuhealth.platform.report.v1.ReportTemplateParams.ExtraParamsEntry
	(*timestamppb.Timestamp)(nil),  // 26: google.protobuf.Timestamp
	(*ReportModuleResult)(nil),     // 27: jinmuhealth.platform.report.v1.ReportModuleResult
	(*wrapperspb.DoubleValue)(nil), // 28: google.protobuf.DoubleValue
}
var file_jinmuhealth_platform_report_v1_report_proto_depIdxs = []int32{
	19, // 0: jinmuhealth.platform.report.v1.PulseTestOptions.extras:type_name -> jinmuhealth.platform.report.v1.PulseTestOptions.ExtrasEntry
	0,  // 1: jinmuhealth.platform.report.v1.SubjectProfile.gender:type_name -> jinmuhealth.platform.report.v1.Gender
	20, // 2: jinmuhealth.platform.report.v1.SubjectProfile.additional_data:type_name -> jinmuhealth.platform.report.v1.SubjectProfile.AdditionalDataEntry
	1,  // 3: jinmuhealth.platform.report.v1.SamplePayload.part:type_name -> jinmuhealth.platform.report.v1.BodyPart
	2,  // 4: jinmuhealth.platform.report.v1.SamplePayload.posture:type_name -> jinmuhealth.platform.report.v1.PulseTestPosture
	17, // 5: jinmuhealth.platform.report.v1.SamplePayload.geo_location:type_name -> jinmuhealth.platform.report.v1.GeoLocation
	7,  // 6: jinmuhealth.platform.report.v1.SamplePayload.sample_device:type_name -> jinmuhealth.platform.report.v1.SampleDevice
	8,  // 7: jinmuhealth.platform.report.v1.SamplePayload.sample_data:type_name -> jinmuhealth.platform.report.v1.SampleData
	21, // 8: jinmuhealth.platform.report.v1.SamplePayload.additional_data:type_name -> jinmuhealth.platform.report.v1.SamplePayload.AdditionalDataEntry
	3,  // 9: jinmuhealth.platform.report.v1.SampleDevice.device_type:type_name -> jinmuhealth.platform.report.v1.DeviceType
	22, // 10: jinmuhealth.platform.report.v1.SampleDevice.device_params:type_name -> jinmuhealth.platform.report.v1.SampleDevice.DeviceParamsEntry
	23, // 11: jinmuhealth.platform.report.v1.SampleData.codec_params:type_name -> jinmuhealth.platform.report.v1.SampleData.CodecParamsEntry
	26, // 12: jinmuhealth.platform.report.v1.SampleData.start_time:type_name -> google.protobuf.Timestamp
	26, // 13: jinmuhealth.platform.report.v1.SampleData.stop_time:type_name -> google.protobuf.Timestamp
	27, // 14: jinmuhealth.platform.report.v1.ReportContent.module_results:type_name -> jinmuhealth.platform.report.v1.ReportModuleResult
	26, // 15: jinmuhealth.platform.report.v1.ReportContent.created_time:type_name -> google.protobuf.Timestamp
	24, // 16: jinmuhealth.platform.report.v1.ReportContent.extras:type_name -> jinmuhealth.platform.report.v1.ReportContent.ExtrasEntry
	11, // 17: jinmuhealth.platform.report.v1.QuestionList.questions:type_name -> jinmuhealth.platform.report.v1.Question
	14, // 18: jinmuhealth.platform.report.v1.Question.choices:type_name -> jinmuhealth.platform.report.v1.QuestionChoice
	13, // 19: jinmuhealth.platform.report.v1.AnswerList.answers:type_name -> jinmuhealth.platform.report.v1.Answer
	25, // 20: jinmuhealth.platform.report.v1.ReportTemplateParams.extra_params:type_name -> jinmuhealth.platform.report.v1.ReportTemplateParams.ExtraParamsEntry
	26, // 21: jinmuhealth.platform.report.v1.SearchReportItem.created_time:type_name -> google.protobuf.Timestamp
	28, // 22: jinmuhealth.platform.report.v1.GeoLocation.altitude:type_name -> google.protobuf.DoubleValue
	28, // 23: jinmuhealth.platform.report.v1.GeoLocation.altitude_accuracy:type_name -> google.protobuf.DoubleValue
	28, // 24: jinmuhealth.platform.report.v1.GeoLocation.heading:type_name -> google.protobuf.DoubleValue
	28, // 25: jinmuhealth.platform.report.v1.GeoLocation.speed:type_name -> google.protobuf.DoubleValue
	26, // [26:26] is the sub-list for method output_type
	26, // [26:26] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_jinmuhealth_platform_report_v1_report_proto_init() }
func file_jinmuhealth_platform_report_v1_report_proto_init() {
	if File_jinmuhealth_platform_report_v1_report_proto != nil {
		return
	}
	file_jinmuhealth_platform_report_v1_report_modules_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_jinmuhealth_platform_report_v1_report_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PulseTestOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jinmuhealth_platform_report_v1_report_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubjectProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jinmuhealth_platform_report_v1_report_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SamplePayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jinmuhealth_platform_report_v1_report_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SampleDevice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jinmuhealth_platform_report_v1_report_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SampleData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jinmuhealth_platform_report_v1_report_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jinmuhealth_platform_report_v1_report_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jinmuhealth_platform_report_v1_report_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Question); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jinmuhealth_platform_report_v1_report_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnswerList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jinmuhealth_platform_report_v1_report_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Answer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jinmuhealth_platform_report_v1_report_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionChoice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jinmuhealth_platform_report_v1_report_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportTemplateParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jinmuhealth_platform_report_v1_report_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchReportItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jinmuhealth_platform_report_v1_report_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeoLocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jinmuhealth_platform_report_v1_report_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_jinmuhealth_platform_report_v1_report_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_jinmuhealth_platform_report_v1_report_proto_goTypes,
		DependencyIndexes: file_jinmuhealth_platform_report_v1_report_proto_depIdxs,
		EnumInfos:         file_jinmuhealth_platform_report_v1_report_proto_enumTypes,
		MessageInfos:      file_jinmuhealth_platform_report_v1_report_proto_msgTypes,
	}.Build()
	File_jinmuhealth_platform_report_v1_report_proto = out.File
	file_jinmuhealth_platform_report_v1_report_proto_rawDesc = nil
	file_jinmuhealth_platform_report_v1_report_proto_goTypes = nil
	file_jinmuhealth_platform_report_v1_report_proto_depIdxs = nil
}
