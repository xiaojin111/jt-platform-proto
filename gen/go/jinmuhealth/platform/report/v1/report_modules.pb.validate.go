// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: jinmuhealth/platform/report/v1/report_modules.proto

package reportv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// Validate checks the field values on ReportModuleInput with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ReportModuleInput) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Params

	// no validation rules for Data

	return nil
}

// ReportModuleInputValidationError is the validation error returned by
// ReportModuleInput.Validate if the designated constraints aren't met.
type ReportModuleInputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReportModuleInputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReportModuleInputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReportModuleInputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReportModuleInputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReportModuleInputValidationError) ErrorName() string {
	return "ReportModuleInputValidationError"
}

// Error satisfies the builtin error interface
func (e ReportModuleInputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReportModuleInput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReportModuleInputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReportModuleInputValidationError{}

// Validate checks the field values on ReportModuleResult with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ReportModuleResult) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ModuleName

	// no validation rules for Enabled

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReportModuleResultValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ReportModuleResultValidationError is the validation error returned by
// ReportModuleResult.Validate if the designated constraints aren't met.
type ReportModuleResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReportModuleResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReportModuleResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReportModuleResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReportModuleResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReportModuleResultValidationError) ErrorName() string {
	return "ReportModuleResultValidationError"
}

// Error satisfies the builtin error interface
func (e ReportModuleResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReportModuleResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReportModuleResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReportModuleResultValidationError{}

// Validate checks the field values on CInfo with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *CInfo) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for C0

	// no validation rules for C1

	// no validation rules for C2

	// no validation rules for C3

	// no validation rules for C4

	// no validation rules for C5

	// no validation rules for C6

	// no validation rules for C7

	if v, ok := interface{}(m.GetTestTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CInfoValidationError{
				field:  "TestTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CInfoValidationError is the validation error returned by CInfo.Validate if
// the designated constraints aren't met.
type CInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CInfoValidationError) ErrorName() string { return "CInfoValidationError" }

// Error satisfies the builtin error interface
func (e CInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CInfoValidationError{}

// Validate checks the field values on Lookup with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Lookup) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Key

	// no validation rules for Content

	// no validation rules for Score

	// no validation rules for LinkKey

	return nil
}

// LookupValidationError is the validation error returned by Lookup.Validate if
// the designated constraints aren't met.
type LookupValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LookupValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LookupValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LookupValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LookupValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LookupValidationError) ErrorName() string { return "LookupValidationError" }

// Error satisfies the builtin error interface
func (e LookupValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLookup.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LookupValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LookupValidationError{}

// Validate checks the field values on HeartRateModuleOutput with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *HeartRateModuleOutput) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AverageHeartRate

	// no validation rules for HighestHeartRate

	// no validation rules for LowestHeartRate

	return nil
}

// HeartRateModuleOutputValidationError is the validation error returned by
// HeartRateModuleOutput.Validate if the designated constraints aren't met.
type HeartRateModuleOutputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HeartRateModuleOutputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HeartRateModuleOutputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HeartRateModuleOutputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HeartRateModuleOutputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HeartRateModuleOutputValidationError) ErrorName() string {
	return "HeartRateModuleOutputValidationError"
}

// Error satisfies the builtin error interface
func (e HeartRateModuleOutputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHeartRateModuleOutput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HeartRateModuleOutputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HeartRateModuleOutputValidationError{}

// Validate checks the field values on RiskEstimateModuleOutput with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RiskEstimateModuleOutput) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetDiseaseEstimate() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RiskEstimateModuleOutputValidationError{
					field:  fmt.Sprintf("DiseaseEstimate[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetPromptMessage() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RiskEstimateModuleOutputValidationError{
					field:  fmt.Sprintf("PromptMessage[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// RiskEstimateModuleOutputValidationError is the validation error returned by
// RiskEstimateModuleOutput.Validate if the designated constraints aren't met.
type RiskEstimateModuleOutputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RiskEstimateModuleOutputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RiskEstimateModuleOutputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RiskEstimateModuleOutputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RiskEstimateModuleOutputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RiskEstimateModuleOutputValidationError) ErrorName() string {
	return "RiskEstimateModuleOutputValidationError"
}

// Error satisfies the builtin error interface
func (e RiskEstimateModuleOutputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRiskEstimateModuleOutput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RiskEstimateModuleOutputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RiskEstimateModuleOutputValidationError{}

// Validate checks the field values on PhysicalDialecticsModuleOutput with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *PhysicalDialecticsModuleOutput) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetLookups() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PhysicalDialecticsModuleOutputValidationError{
					field:  fmt.Sprintf("Lookups[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// PhysicalDialecticsModuleOutputValidationError is the validation error
// returned by PhysicalDialecticsModuleOutput.Validate if the designated
// constraints aren't met.
type PhysicalDialecticsModuleOutputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PhysicalDialecticsModuleOutputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PhysicalDialecticsModuleOutputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PhysicalDialecticsModuleOutputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PhysicalDialecticsModuleOutputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PhysicalDialecticsModuleOutputValidationError) ErrorName() string {
	return "PhysicalDialecticsModuleOutputValidationError"
}

// Error satisfies the builtin error interface
func (e PhysicalDialecticsModuleOutputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPhysicalDialecticsModuleOutput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PhysicalDialecticsModuleOutputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PhysicalDialecticsModuleOutputValidationError{}

// Validate checks the field values on DirtyDialecticModuleOutput with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DirtyDialecticModuleOutput) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetLookups() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DirtyDialecticModuleOutputValidationError{
					field:  fmt.Sprintf("Lookups[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// DirtyDialecticModuleOutputValidationError is the validation error returned
// by DirtyDialecticModuleOutput.Validate if the designated constraints aren't met.
type DirtyDialecticModuleOutputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DirtyDialecticModuleOutputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DirtyDialecticModuleOutputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DirtyDialecticModuleOutputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DirtyDialecticModuleOutputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DirtyDialecticModuleOutputValidationError) ErrorName() string {
	return "DirtyDialecticModuleOutputValidationError"
}

// Error satisfies the builtin error interface
func (e DirtyDialecticModuleOutputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDirtyDialecticModuleOutput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DirtyDialecticModuleOutputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DirtyDialecticModuleOutputValidationError{}

// Validate checks the field values on PhysicalTherapyIndexModuleOutput with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *PhysicalTherapyIndexModuleOutput) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetF0()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PhysicalTherapyIndexModuleOutputValidationError{
				field:  "F0",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetF1()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PhysicalTherapyIndexModuleOutputValidationError{
				field:  "F1",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetF2()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PhysicalTherapyIndexModuleOutputValidationError{
				field:  "F2",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetF3()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PhysicalTherapyIndexModuleOutputValidationError{
				field:  "F3",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetLookups() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PhysicalTherapyIndexModuleOutputValidationError{
					field:  fmt.Sprintf("Lookups[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// PhysicalTherapyIndexModuleOutputValidationError is the validation error
// returned by PhysicalTherapyIndexModuleOutput.Validate if the designated
// constraints aren't met.
type PhysicalTherapyIndexModuleOutputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PhysicalTherapyIndexModuleOutputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PhysicalTherapyIndexModuleOutputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PhysicalTherapyIndexModuleOutputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PhysicalTherapyIndexModuleOutputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PhysicalTherapyIndexModuleOutputValidationError) ErrorName() string {
	return "PhysicalTherapyIndexModuleOutputValidationError"
}

// Error satisfies the builtin error interface
func (e PhysicalTherapyIndexModuleOutputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPhysicalTherapyIndexModuleOutput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PhysicalTherapyIndexModuleOutputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PhysicalTherapyIndexModuleOutputValidationError{}

// Validate checks the field values on ConditioningAdviceModuleOutput with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ConditioningAdviceModuleOutput) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDietaryAdvice()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConditioningAdviceModuleOutputValidationError{
				field:  "DietaryAdvice",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetSportsAdvice()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConditioningAdviceModuleOutputValidationError{
				field:  "SportsAdvice",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetChineseMedicineAdvice()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConditioningAdviceModuleOutputValidationError{
				field:  "ChineseMedicineAdvice",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPhysicalTherapyAdvice()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConditioningAdviceModuleOutputValidationError{
				field:  "PhysicalTherapyAdvice",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ConditioningAdviceModuleOutputValidationError is the validation error
// returned by ConditioningAdviceModuleOutput.Validate if the designated
// constraints aren't met.
type ConditioningAdviceModuleOutputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConditioningAdviceModuleOutputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConditioningAdviceModuleOutputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConditioningAdviceModuleOutputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConditioningAdviceModuleOutputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConditioningAdviceModuleOutputValidationError) ErrorName() string {
	return "ConditioningAdviceModuleOutputValidationError"
}

// Error satisfies the builtin error interface
func (e ConditioningAdviceModuleOutputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConditioningAdviceModuleOutput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConditioningAdviceModuleOutputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConditioningAdviceModuleOutputValidationError{}

// Validate checks the field values on DietaryAdviceModuleOutput with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DietaryAdviceModuleOutput) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetLookups() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DietaryAdviceModuleOutputValidationError{
					field:  fmt.Sprintf("Lookups[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// DietaryAdviceModuleOutputValidationError is the validation error returned by
// DietaryAdviceModuleOutput.Validate if the designated constraints aren't met.
type DietaryAdviceModuleOutputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DietaryAdviceModuleOutputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DietaryAdviceModuleOutputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DietaryAdviceModuleOutputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DietaryAdviceModuleOutputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DietaryAdviceModuleOutputValidationError) ErrorName() string {
	return "DietaryAdviceModuleOutputValidationError"
}

// Error satisfies the builtin error interface
func (e DietaryAdviceModuleOutputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDietaryAdviceModuleOutput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DietaryAdviceModuleOutputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DietaryAdviceModuleOutputValidationError{}

// Validate checks the field values on SportsAdviceModuleOutput with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SportsAdviceModuleOutput) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetLookups() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SportsAdviceModuleOutputValidationError{
					field:  fmt.Sprintf("Lookups[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// SportsAdviceModuleOutputValidationError is the validation error returned by
// SportsAdviceModuleOutput.Validate if the designated constraints aren't met.
type SportsAdviceModuleOutputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SportsAdviceModuleOutputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SportsAdviceModuleOutputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SportsAdviceModuleOutputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SportsAdviceModuleOutputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SportsAdviceModuleOutputValidationError) ErrorName() string {
	return "SportsAdviceModuleOutputValidationError"
}

// Error satisfies the builtin error interface
func (e SportsAdviceModuleOutputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSportsAdviceModuleOutput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SportsAdviceModuleOutputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SportsAdviceModuleOutputValidationError{}

// Validate checks the field values on ChineseMedicineAdviceModuleOutput with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *ChineseMedicineAdviceModuleOutput) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetLookups() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChineseMedicineAdviceModuleOutputValidationError{
					field:  fmt.Sprintf("Lookups[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ChineseMedicineAdviceModuleOutputValidationError is the validation error
// returned by ChineseMedicineAdviceModuleOutput.Validate if the designated
// constraints aren't met.
type ChineseMedicineAdviceModuleOutputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChineseMedicineAdviceModuleOutputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChineseMedicineAdviceModuleOutputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChineseMedicineAdviceModuleOutputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChineseMedicineAdviceModuleOutputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChineseMedicineAdviceModuleOutputValidationError) ErrorName() string {
	return "ChineseMedicineAdviceModuleOutputValidationError"
}

// Error satisfies the builtin error interface
func (e ChineseMedicineAdviceModuleOutputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChineseMedicineAdviceModuleOutput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChineseMedicineAdviceModuleOutputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChineseMedicineAdviceModuleOutputValidationError{}

// Validate checks the field values on PhysicalTherapyAdviceModuleOutput with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *PhysicalTherapyAdviceModuleOutput) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetLookups() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PhysicalTherapyAdviceModuleOutputValidationError{
					field:  fmt.Sprintf("Lookups[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// PhysicalTherapyAdviceModuleOutputValidationError is the validation error
// returned by PhysicalTherapyAdviceModuleOutput.Validate if the designated
// constraints aren't met.
type PhysicalTherapyAdviceModuleOutputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PhysicalTherapyAdviceModuleOutputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PhysicalTherapyAdviceModuleOutputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PhysicalTherapyAdviceModuleOutputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PhysicalTherapyAdviceModuleOutputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PhysicalTherapyAdviceModuleOutputValidationError) ErrorName() string {
	return "PhysicalTherapyAdviceModuleOutputValidationError"
}

// Error satisfies the builtin error interface
func (e PhysicalTherapyAdviceModuleOutputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPhysicalTherapyAdviceModuleOutput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PhysicalTherapyAdviceModuleOutputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PhysicalTherapyAdviceModuleOutputValidationError{}

// Validate checks the field values on PartialPulseWaveModuleOutput with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *PartialPulseWaveModuleOutput) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// PartialPulseWaveModuleOutputValidationError is the validation error returned
// by PartialPulseWaveModuleOutput.Validate if the designated constraints
// aren't met.
type PartialPulseWaveModuleOutputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PartialPulseWaveModuleOutputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PartialPulseWaveModuleOutputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PartialPulseWaveModuleOutputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PartialPulseWaveModuleOutputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PartialPulseWaveModuleOutputValidationError) ErrorName() string {
	return "PartialPulseWaveModuleOutputValidationError"
}

// Error satisfies the builtin error interface
func (e PartialPulseWaveModuleOutputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPartialPulseWaveModuleOutput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PartialPulseWaveModuleOutputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PartialPulseWaveModuleOutputValidationError{}

// Validate checks the field values on MeridianBarChartModuleOutput with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MeridianBarChartModuleOutput) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetMeridianValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MeridianBarChartModuleOutputValidationError{
				field:  "MeridianValue",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// MeridianBarChartModuleOutputValidationError is the validation error returned
// by MeridianBarChartModuleOutput.Validate if the designated constraints
// aren't met.
type MeridianBarChartModuleOutputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MeridianBarChartModuleOutputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MeridianBarChartModuleOutputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MeridianBarChartModuleOutputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MeridianBarChartModuleOutputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MeridianBarChartModuleOutputValidationError) ErrorName() string {
	return "MeridianBarChartModuleOutputValidationError"
}

// Error satisfies the builtin error interface
func (e MeridianBarChartModuleOutputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMeridianBarChartModuleOutput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MeridianBarChartModuleOutputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MeridianBarChartModuleOutputValidationError{}

// Validate checks the field values on MeridianExplainModuleOutput with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MeridianExplainModuleOutput) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetLookups() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MeridianExplainModuleOutputValidationError{
					field:  fmt.Sprintf("Lookups[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// MeridianExplainModuleOutputValidationError is the validation error returned
// by MeridianExplainModuleOutput.Validate if the designated constraints
// aren't met.
type MeridianExplainModuleOutputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MeridianExplainModuleOutputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MeridianExplainModuleOutputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MeridianExplainModuleOutputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MeridianExplainModuleOutputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MeridianExplainModuleOutputValidationError) ErrorName() string {
	return "MeridianExplainModuleOutputValidationError"
}

// Error satisfies the builtin error interface
func (e MeridianExplainModuleOutputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMeridianExplainModuleOutput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MeridianExplainModuleOutputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MeridianExplainModuleOutputValidationError{}

// Validate checks the field values on EmotionalHealthModuleOutput with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *EmotionalHealthModuleOutput) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetF103()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EmotionalHealthModuleOutputValidationError{
				field:  "F103",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetLookups() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EmotionalHealthModuleOutputValidationError{
					field:  fmt.Sprintf("Lookups[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// EmotionalHealthModuleOutputValidationError is the validation error returned
// by EmotionalHealthModuleOutput.Validate if the designated constraints
// aren't met.
type EmotionalHealthModuleOutputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmotionalHealthModuleOutputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmotionalHealthModuleOutputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmotionalHealthModuleOutputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmotionalHealthModuleOutputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmotionalHealthModuleOutputValidationError) ErrorName() string {
	return "EmotionalHealthModuleOutputValidationError"
}

// Error satisfies the builtin error interface
func (e EmotionalHealthModuleOutputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmotionalHealthModuleOutput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmotionalHealthModuleOutputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmotionalHealthModuleOutputValidationError{}

// Validate checks the field values on FacialSkinModuleOutput with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *FacialSkinModuleOutput) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetF104()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FacialSkinModuleOutputValidationError{
				field:  "F104",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetLookups() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FacialSkinModuleOutputValidationError{
					field:  fmt.Sprintf("Lookups[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// FacialSkinModuleOutputValidationError is the validation error returned by
// FacialSkinModuleOutput.Validate if the designated constraints aren't met.
type FacialSkinModuleOutputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FacialSkinModuleOutputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FacialSkinModuleOutputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FacialSkinModuleOutputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FacialSkinModuleOutputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FacialSkinModuleOutputValidationError) ErrorName() string {
	return "FacialSkinModuleOutputValidationError"
}

// Error satisfies the builtin error interface
func (e FacialSkinModuleOutputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFacialSkinModuleOutput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FacialSkinModuleOutputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FacialSkinModuleOutputValidationError{}

// Validate checks the field values on FacialSkinMaleModuleOutput with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *FacialSkinMaleModuleOutput) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetF109()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FacialSkinMaleModuleOutputValidationError{
				field:  "F109",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetLookups() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FacialSkinMaleModuleOutputValidationError{
					field:  fmt.Sprintf("Lookups[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// FacialSkinMaleModuleOutputValidationError is the validation error returned
// by FacialSkinMaleModuleOutput.Validate if the designated constraints aren't met.
type FacialSkinMaleModuleOutputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FacialSkinMaleModuleOutputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FacialSkinMaleModuleOutputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FacialSkinMaleModuleOutputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FacialSkinMaleModuleOutputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FacialSkinMaleModuleOutputValidationError) ErrorName() string {
	return "FacialSkinMaleModuleOutputValidationError"
}

// Error satisfies the builtin error interface
func (e FacialSkinMaleModuleOutputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFacialSkinMaleModuleOutput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FacialSkinMaleModuleOutputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FacialSkinMaleModuleOutputValidationError{}

// Validate checks the field values on
// GynecologicalDiseaseRiskEstimateModuleOutput with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *GynecologicalDiseaseRiskEstimateModuleOutput) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetF101()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GynecologicalDiseaseRiskEstimateModuleOutputValidationError{
				field:  "F101",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetLookups() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GynecologicalDiseaseRiskEstimateModuleOutputValidationError{
					field:  fmt.Sprintf("Lookups[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GynecologicalDiseaseRiskEstimateModuleOutputValidationError is the
// validation error returned by
// GynecologicalDiseaseRiskEstimateModuleOutput.Validate if the designated
// constraints aren't met.
type GynecologicalDiseaseRiskEstimateModuleOutputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GynecologicalDiseaseRiskEstimateModuleOutputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GynecologicalDiseaseRiskEstimateModuleOutputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GynecologicalDiseaseRiskEstimateModuleOutputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GynecologicalDiseaseRiskEstimateModuleOutputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GynecologicalDiseaseRiskEstimateModuleOutputValidationError) ErrorName() string {
	return "GynecologicalDiseaseRiskEstimateModuleOutputValidationError"
}

// Error satisfies the builtin error interface
func (e GynecologicalDiseaseRiskEstimateModuleOutputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGynecologicalDiseaseRiskEstimateModuleOutput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GynecologicalDiseaseRiskEstimateModuleOutputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GynecologicalDiseaseRiskEstimateModuleOutputValidationError{}

// Validate checks the field values on GynecologicalInflammationModuleOutput
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *GynecologicalInflammationModuleOutput) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetF102()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GynecologicalInflammationModuleOutputValidationError{
				field:  "F102",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetLookups() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GynecologicalInflammationModuleOutputValidationError{
					field:  fmt.Sprintf("Lookups[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GynecologicalInflammationModuleOutputValidationError is the validation error
// returned by GynecologicalInflammationModuleOutput.Validate if the
// designated constraints aren't met.
type GynecologicalInflammationModuleOutputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GynecologicalInflammationModuleOutputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GynecologicalInflammationModuleOutputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GynecologicalInflammationModuleOutputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GynecologicalInflammationModuleOutputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GynecologicalInflammationModuleOutputValidationError) ErrorName() string {
	return "GynecologicalInflammationModuleOutputValidationError"
}

// Error satisfies the builtin error interface
func (e GynecologicalInflammationModuleOutputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGynecologicalInflammationModuleOutput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GynecologicalInflammationModuleOutputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GynecologicalInflammationModuleOutputValidationError{}

// Validate checks the field values on HormoneLevelModuleOutput with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *HormoneLevelModuleOutput) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetF106()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return HormoneLevelModuleOutputValidationError{
				field:  "F106",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetLookups() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HormoneLevelModuleOutputValidationError{
					field:  fmt.Sprintf("Lookups[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// HormoneLevelModuleOutputValidationError is the validation error returned by
// HormoneLevelModuleOutput.Validate if the designated constraints aren't met.
type HormoneLevelModuleOutputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HormoneLevelModuleOutputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HormoneLevelModuleOutputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HormoneLevelModuleOutputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HormoneLevelModuleOutputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HormoneLevelModuleOutputValidationError) ErrorName() string {
	return "HormoneLevelModuleOutputValidationError"
}

// Error satisfies the builtin error interface
func (e HormoneLevelModuleOutputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHormoneLevelModuleOutput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HormoneLevelModuleOutputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HormoneLevelModuleOutputValidationError{}

// Validate checks the field values on UterineHealthModuleOutput with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UterineHealthModuleOutput) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetF100()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UterineHealthModuleOutputValidationError{
				field:  "F100",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetLookups() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UterineHealthModuleOutputValidationError{
					field:  fmt.Sprintf("Lookups[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// UterineHealthModuleOutputValidationError is the validation error returned by
// UterineHealthModuleOutput.Validate if the designated constraints aren't met.
type UterineHealthModuleOutputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UterineHealthModuleOutputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UterineHealthModuleOutputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UterineHealthModuleOutputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UterineHealthModuleOutputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UterineHealthModuleOutputValidationError) ErrorName() string {
	return "UterineHealthModuleOutputValidationError"
}

// Error satisfies the builtin error interface
func (e UterineHealthModuleOutputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUterineHealthModuleOutput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UterineHealthModuleOutputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UterineHealthModuleOutputValidationError{}

// Validate checks the field values on MenstrualSunflowerModuleOutput with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MenstrualSunflowerModuleOutput) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetM0()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MenstrualSunflowerModuleOutputValidationError{
				field:  "M0",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetLookups() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MenstrualSunflowerModuleOutputValidationError{
					field:  fmt.Sprintf("Lookups[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// MenstrualSunflowerModuleOutputValidationError is the validation error
// returned by MenstrualSunflowerModuleOutput.Validate if the designated
// constraints aren't met.
type MenstrualSunflowerModuleOutputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MenstrualSunflowerModuleOutputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MenstrualSunflowerModuleOutputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MenstrualSunflowerModuleOutputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MenstrualSunflowerModuleOutputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MenstrualSunflowerModuleOutputValidationError) ErrorName() string {
	return "MenstrualSunflowerModuleOutputValidationError"
}

// Error satisfies the builtin error interface
func (e MenstrualSunflowerModuleOutputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMenstrualSunflowerModuleOutput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MenstrualSunflowerModuleOutputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MenstrualSunflowerModuleOutputValidationError{}

// Validate checks the field values on IrregularMenstruationModuleOutput with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *IrregularMenstruationModuleOutput) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetM1()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IrregularMenstruationModuleOutputValidationError{
				field:  "M1",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetLookups() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return IrregularMenstruationModuleOutputValidationError{
					field:  fmt.Sprintf("Lookups[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// IrregularMenstruationModuleOutputValidationError is the validation error
// returned by IrregularMenstruationModuleOutput.Validate if the designated
// constraints aren't met.
type IrregularMenstruationModuleOutputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IrregularMenstruationModuleOutputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IrregularMenstruationModuleOutputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IrregularMenstruationModuleOutputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IrregularMenstruationModuleOutputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IrregularMenstruationModuleOutputValidationError) ErrorName() string {
	return "IrregularMenstruationModuleOutputValidationError"
}

// Error satisfies the builtin error interface
func (e IrregularMenstruationModuleOutputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIrregularMenstruationModuleOutput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IrregularMenstruationModuleOutputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IrregularMenstruationModuleOutputValidationError{}

// Validate checks the field values on DysmenorrheaIndexModuleOutput with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DysmenorrheaIndexModuleOutput) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetM2()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DysmenorrheaIndexModuleOutputValidationError{
				field:  "M2",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetLookups() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DysmenorrheaIndexModuleOutputValidationError{
					field:  fmt.Sprintf("Lookups[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// DysmenorrheaIndexModuleOutputValidationError is the validation error
// returned by DysmenorrheaIndexModuleOutput.Validate if the designated
// constraints aren't met.
type DysmenorrheaIndexModuleOutputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DysmenorrheaIndexModuleOutputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DysmenorrheaIndexModuleOutputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DysmenorrheaIndexModuleOutputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DysmenorrheaIndexModuleOutputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DysmenorrheaIndexModuleOutputValidationError) ErrorName() string {
	return "DysmenorrheaIndexModuleOutputValidationError"
}

// Error satisfies the builtin error interface
func (e DysmenorrheaIndexModuleOutputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDysmenorrheaIndexModuleOutput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DysmenorrheaIndexModuleOutputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DysmenorrheaIndexModuleOutputValidationError{}

// Validate checks the field values on ReproductiveAgeModuleOutput with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ReproductiveAgeModuleOutput) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetF105()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReproductiveAgeModuleOutputValidationError{
				field:  "F105",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetLookups() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ReproductiveAgeModuleOutputValidationError{
					field:  fmt.Sprintf("Lookups[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ReproductiveAgeModuleOutputValidationError is the validation error returned
// by ReproductiveAgeModuleOutput.Validate if the designated constraints
// aren't met.
type ReproductiveAgeModuleOutputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReproductiveAgeModuleOutputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReproductiveAgeModuleOutputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReproductiveAgeModuleOutputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReproductiveAgeModuleOutputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReproductiveAgeModuleOutputValidationError) ErrorName() string {
	return "ReproductiveAgeModuleOutputValidationError"
}

// Error satisfies the builtin error interface
func (e ReproductiveAgeModuleOutputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReproductiveAgeModuleOutput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReproductiveAgeModuleOutputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReproductiveAgeModuleOutputValidationError{}

// Validate checks the field values on LymphaticHealthModuleOutput with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *LymphaticHealthModuleOutput) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetF107()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LymphaticHealthModuleOutputValidationError{
				field:  "F107",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetLookups() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LymphaticHealthModuleOutputValidationError{
					field:  fmt.Sprintf("Lookups[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// LymphaticHealthModuleOutputValidationError is the validation error returned
// by LymphaticHealthModuleOutput.Validate if the designated constraints
// aren't met.
type LymphaticHealthModuleOutputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LymphaticHealthModuleOutputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LymphaticHealthModuleOutputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LymphaticHealthModuleOutputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LymphaticHealthModuleOutputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LymphaticHealthModuleOutputValidationError) ErrorName() string {
	return "LymphaticHealthModuleOutputValidationError"
}

// Error satisfies the builtin error interface
func (e LymphaticHealthModuleOutputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLymphaticHealthModuleOutput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LymphaticHealthModuleOutputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LymphaticHealthModuleOutputValidationError{}

// Validate checks the field values on BreastHealthModuleOutput with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *BreastHealthModuleOutput) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetM3()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BreastHealthModuleOutputValidationError{
				field:  "M3",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetF108()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BreastHealthModuleOutputValidationError{
				field:  "F108",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetLookups() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BreastHealthModuleOutputValidationError{
					field:  fmt.Sprintf("Lookups[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// BreastHealthModuleOutputValidationError is the validation error returned by
// BreastHealthModuleOutput.Validate if the designated constraints aren't met.
type BreastHealthModuleOutputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BreastHealthModuleOutputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BreastHealthModuleOutputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BreastHealthModuleOutputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BreastHealthModuleOutputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BreastHealthModuleOutputValidationError) ErrorName() string {
	return "BreastHealthModuleOutputValidationError"
}

// Error satisfies the builtin error interface
func (e BreastHealthModuleOutputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBreastHealthModuleOutput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BreastHealthModuleOutputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BreastHealthModuleOutputValidationError{}

// Validate checks the field values on BreastCancerModuleOutput with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *BreastCancerModuleOutput) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetLookups() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BreastCancerModuleOutputValidationError{
					field:  fmt.Sprintf("Lookups[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// BreastCancerModuleOutputValidationError is the validation error returned by
// BreastCancerModuleOutput.Validate if the designated constraints aren't met.
type BreastCancerModuleOutputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BreastCancerModuleOutputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BreastCancerModuleOutputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BreastCancerModuleOutputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BreastCancerModuleOutputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BreastCancerModuleOutputValidationError) ErrorName() string {
	return "BreastCancerModuleOutputValidationError"
}

// Error satisfies the builtin error interface
func (e BreastCancerModuleOutputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBreastCancerModuleOutput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BreastCancerModuleOutputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BreastCancerModuleOutputValidationError{}

// Validate checks the field values on MeasurementJudgmentModuleOutput with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MeasurementJudgmentModuleOutput) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetLookups() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MeasurementJudgmentModuleOutputValidationError{
					field:  fmt.Sprintf("Lookups[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// MeasurementJudgmentModuleOutputValidationError is the validation error
// returned by MeasurementJudgmentModuleOutput.Validate if the designated
// constraints aren't met.
type MeasurementJudgmentModuleOutputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MeasurementJudgmentModuleOutputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MeasurementJudgmentModuleOutputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MeasurementJudgmentModuleOutputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MeasurementJudgmentModuleOutputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MeasurementJudgmentModuleOutputValidationError) ErrorName() string {
	return "MeasurementJudgmentModuleOutputValidationError"
}

// Error satisfies the builtin error interface
func (e MeasurementJudgmentModuleOutputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMeasurementJudgmentModuleOutput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MeasurementJudgmentModuleOutputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MeasurementJudgmentModuleOutputValidationError{}

// Validate checks the field values on TipsModuleOutput with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *TipsModuleOutput) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetLookups() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TipsModuleOutputValidationError{
					field:  fmt.Sprintf("Lookups[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// TipsModuleOutputValidationError is the validation error returned by
// TipsModuleOutput.Validate if the designated constraints aren't met.
type TipsModuleOutputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TipsModuleOutputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TipsModuleOutputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TipsModuleOutputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TipsModuleOutputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TipsModuleOutputValidationError) ErrorName() string { return "TipsModuleOutputValidationError" }

// Error satisfies the builtin error interface
func (e TipsModuleOutputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTipsModuleOutput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TipsModuleOutputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TipsModuleOutputValidationError{}

// Validate checks the field values on StressStateJudgmentModuleOutput with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *StressStateJudgmentModuleOutput) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for HasStressState

	// no validation rules for HasDoneSports

	// no validation rules for HasDrunkWine

	// no validation rules for HasHadCold

	// no validation rules for HasRhinitisEpisode

	// no validation rules for HasAbdominalPain

	// no validation rules for HasViralInfection

	// no validation rules for HasPhysiologicalPeriod

	// no validation rules for HasOvulation

	// no validation rules for HasPregnant

	// no validation rules for HasLactation

	return nil
}

// StressStateJudgmentModuleOutputValidationError is the validation error
// returned by StressStateJudgmentModuleOutput.Validate if the designated
// constraints aren't met.
type StressStateJudgmentModuleOutputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StressStateJudgmentModuleOutputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StressStateJudgmentModuleOutputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StressStateJudgmentModuleOutputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StressStateJudgmentModuleOutputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StressStateJudgmentModuleOutputValidationError) ErrorName() string {
	return "StressStateJudgmentModuleOutputValidationError"
}

// Error satisfies the builtin error interface
func (e StressStateJudgmentModuleOutputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStressStateJudgmentModuleOutput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StressStateJudgmentModuleOutputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StressStateJudgmentModuleOutputValidationError{}

// Validate checks the field values on HealthRiskAnalysisModuleOutput with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *HealthRiskAnalysisModuleOutput) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for SummaryIndex

	// no validation rules for Summary

	// no validation rules for Risks

	// no validation rules for RiskType

	return nil
}

// HealthRiskAnalysisModuleOutputValidationError is the validation error
// returned by HealthRiskAnalysisModuleOutput.Validate if the designated
// constraints aren't met.
type HealthRiskAnalysisModuleOutputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HealthRiskAnalysisModuleOutputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HealthRiskAnalysisModuleOutputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HealthRiskAnalysisModuleOutputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HealthRiskAnalysisModuleOutputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HealthRiskAnalysisModuleOutputValidationError) ErrorName() string {
	return "HealthRiskAnalysisModuleOutputValidationError"
}

// Error satisfies the builtin error interface
func (e HealthRiskAnalysisModuleOutputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHealthRiskAnalysisModuleOutput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HealthRiskAnalysisModuleOutputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HealthRiskAnalysisModuleOutputValidationError{}

// Validate checks the field values on JtHealthModuleOutput with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *JtHealthModuleOutput) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for HealthRiskIndex

	// no validation rules for HealthAge

	// no validation rules for PhysiqueExplain

	// no validation rules for PhysiqueKey

	// no validation rules for HealthSummaryKey

	// no validation rules for PhysiqueExplainKey

	// no validation rules for HeartRate

	// no validation rules for Risk_1

	// no validation rules for Risk_2

	// no validation rules for Risk_3

	// no validation rules for Risk_4

	// no validation rules for Risk_5

	// no validation rules for Risk_6

	// no validation rules for Risk_7

	// no validation rules for Risk_8

	// no validation rules for Risk_9

	// no validation rules for Risk_10

	// no validation rules for Risk_11

	// no validation rules for Risk_12

	// no validation rules for Risk_13

	// no validation rules for Risk_14

	// no validation rules for Risk_15

	// no validation rules for Risk_16

	// no validation rules for Risk_17

	// no validation rules for Risk_18

	return nil
}

// JtHealthModuleOutputValidationError is the validation error returned by
// JtHealthModuleOutput.Validate if the designated constraints aren't met.
type JtHealthModuleOutputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JtHealthModuleOutputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JtHealthModuleOutputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JtHealthModuleOutputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JtHealthModuleOutputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JtHealthModuleOutputValidationError) ErrorName() string {
	return "JtHealthModuleOutputValidationError"
}

// Error satisfies the builtin error interface
func (e JtHealthModuleOutputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJtHealthModuleOutput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JtHealthModuleOutputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JtHealthModuleOutputValidationError{}
