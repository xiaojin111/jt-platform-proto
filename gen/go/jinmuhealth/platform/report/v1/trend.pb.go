//
// 常州金姆健康科技有限公司. (c) 2019
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: jinmuhealth/platform/report/v1/trend.proto

package reportv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 周报趋势
type WeeklyTrend struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 经络数据列表
	MeridianList []*CInfo `protobuf:"bytes,1,rep,name=meridian_list,json=meridianList,proto3" json:"meridian_list,omitempty"`
	// 平均经络值，其中 test_time 这里时间字段返回本周的开始时间
	AverageMeridian *CInfo `protobuf:"bytes,2,opt,name=average_meridian,json=averageMeridian,proto3" json:"average_meridian,omitempty"`
	// 疾病统计
	DiseaseStatistics *DiseaseStatistics `protobuf:"bytes,3,opt,name=disease_statistics,json=diseaseStatistics,proto3" json:"disease_statistics,omitempty"`
	// 异常提示
	ErrorMessage string `protobuf:"bytes,4,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	// 开始时间
	StartTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// 结束时间
	EndTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (x *WeeklyTrend) Reset() {
	*x = WeeklyTrend{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jinmuhealth_platform_report_v1_trend_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WeeklyTrend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WeeklyTrend) ProtoMessage() {}

func (x *WeeklyTrend) ProtoReflect() protoreflect.Message {
	mi := &file_jinmuhealth_platform_report_v1_trend_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WeeklyTrend.ProtoReflect.Descriptor instead.
func (*WeeklyTrend) Descriptor() ([]byte, []int) {
	return file_jinmuhealth_platform_report_v1_trend_proto_rawDescGZIP(), []int{0}
}

func (x *WeeklyTrend) GetMeridianList() []*CInfo {
	if x != nil {
		return x.MeridianList
	}
	return nil
}

func (x *WeeklyTrend) GetAverageMeridian() *CInfo {
	if x != nil {
		return x.AverageMeridian
	}
	return nil
}

func (x *WeeklyTrend) GetDiseaseStatistics() *DiseaseStatistics {
	if x != nil {
		return x.DiseaseStatistics
	}
	return nil
}

func (x *WeeklyTrend) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *WeeklyTrend) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *WeeklyTrend) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

// 月报趋势
type MonthlyTrend struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 经络数据列表
	MeridianList []*CInfo `protobuf:"bytes,1,rep,name=meridian_list,json=meridianList,proto3" json:"meridian_list,omitempty"`
	// 平均经络值，其中 test_time 这里时间字段返回本月的开始时间
	AverageMeridian *CInfo `protobuf:"bytes,2,opt,name=average_meridian,json=averageMeridian,proto3" json:"average_meridian,omitempty"`
	// 疾病统计
	DiseaseStatistics *DiseaseStatistics `protobuf:"bytes,3,opt,name=disease_statistics,json=diseaseStatistics,proto3" json:"disease_statistics,omitempty"`
	// 异常提示
	ErrorMessage string `protobuf:"bytes,4,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	// 开始时间
	StartTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// 结束时间
	EndTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (x *MonthlyTrend) Reset() {
	*x = MonthlyTrend{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jinmuhealth_platform_report_v1_trend_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonthlyTrend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonthlyTrend) ProtoMessage() {}

func (x *MonthlyTrend) ProtoReflect() protoreflect.Message {
	mi := &file_jinmuhealth_platform_report_v1_trend_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonthlyTrend.ProtoReflect.Descriptor instead.
func (*MonthlyTrend) Descriptor() ([]byte, []int) {
	return file_jinmuhealth_platform_report_v1_trend_proto_rawDescGZIP(), []int{1}
}

func (x *MonthlyTrend) GetMeridianList() []*CInfo {
	if x != nil {
		return x.MeridianList
	}
	return nil
}

func (x *MonthlyTrend) GetAverageMeridian() *CInfo {
	if x != nil {
		return x.AverageMeridian
	}
	return nil
}

func (x *MonthlyTrend) GetDiseaseStatistics() *DiseaseStatistics {
	if x != nil {
		return x.DiseaseStatistics
	}
	return nil
}

func (x *MonthlyTrend) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *MonthlyTrend) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *MonthlyTrend) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

// 趋势的疾病统计
type DiseaseStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 疾病名称和疾病对应数量的映射
	// 其中疾病名称只能为如下值且含义如下
	// abdominal_pain 腹痛腹泻
	// done_sports 运动
	// drunk_wine 饮酒
	// had_cold 感冒
	// lactation 哺乳期
	// ovulation 排卵期
	// pregnant 怀孕
	// rhinitis_episode 鼻炎发作
	// physiological_period 生理期判断
	// viral_infection 既往病毒感染
	Counters map[string]int32 `protobuf:"bytes,1,rep,name=counters,proto3" json:"counters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *DiseaseStatistics) Reset() {
	*x = DiseaseStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jinmuhealth_platform_report_v1_trend_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiseaseStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiseaseStatistics) ProtoMessage() {}

func (x *DiseaseStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_jinmuhealth_platform_report_v1_trend_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiseaseStatistics.ProtoReflect.Descriptor instead.
func (*DiseaseStatistics) Descriptor() ([]byte, []int) {
	return file_jinmuhealth_platform_report_v1_trend_proto_rawDescGZIP(), []int{2}
}

func (x *DiseaseStatistics) GetCounters() map[string]int32 {
	if x != nil {
		return x.Counters
	}
	return nil
}

var File_jinmuhealth_platform_report_v1_trend_proto protoreflect.FileDescriptor

var file_jinmuhealth_platform_report_v1_trend_proto_rawDesc = []byte{
	0x0a, 0x2a, 0x6a, 0x69, 0x6e, 0x6d, 0x75, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2f, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x76, 0x31,
	0x2f, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1e, 0x6a, 0x69,
	0x6e, 0x6d, 0x75, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x33, 0x6a,
	0x69, 0x6e, 0x6d, 0x75, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2f, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xa4, 0x03, 0x0a, 0x0b, 0x57, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x54, 0x72, 0x65,
	0x6e, 0x64, 0x12, 0x4a, 0x0a, 0x0d, 0x6d, 0x65, 0x72, 0x69, 0x64, 0x69, 0x61, 0x6e, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6a, 0x69, 0x6e, 0x6d,
	0x75, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0c, 0x6d, 0x65, 0x72, 0x69, 0x64, 0x69, 0x61, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x50,
	0x0a, 0x10, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x65, 0x72, 0x69, 0x64, 0x69,
	0x61, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6a, 0x69, 0x6e, 0x6d, 0x75,
	0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0f, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x72, 0x69, 0x64, 0x69, 0x61, 0x6e,
	0x12, 0x60, 0x0a, 0x12, 0x64, 0x69, 0x73, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6a,
	0x69, 0x6e, 0x6d, 0x75, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69,
	0x73, 0x65, 0x61, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52,
	0x11, 0x64, 0x69, 0x73, 0x65, 0x61, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xa5, 0x03, 0x0a, 0x0c, 0x4d, 0x6f,
	0x6e, 0x74, 0x68, 0x6c, 0x79, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x12, 0x4a, 0x0a, 0x0d, 0x6d, 0x65,
	0x72, 0x69, 0x64, 0x69, 0x61, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x6a, 0x69, 0x6e, 0x6d, 0x75, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x6d, 0x65, 0x72, 0x69, 0x64, 0x69,
	0x61, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x50, 0x0a, 0x10, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x5f, 0x6d, 0x65, 0x72, 0x69, 0x64, 0x69, 0x61, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x6a, 0x69, 0x6e, 0x6d, 0x75, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65,
	0x4d, 0x65, 0x72, 0x69, 0x64, 0x69, 0x61, 0x6e, 0x12, 0x60, 0x0a, 0x12, 0x64, 0x69, 0x73, 0x65,
	0x61, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6a, 0x69, 0x6e, 0x6d, 0x75, 0x68, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x65, 0x61, 0x73, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x11, 0x64, 0x69, 0x73, 0x65, 0x61, 0x73, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0xad, 0x01, 0x0a, 0x11, 0x44, 0x69, 0x73, 0x65, 0x61, 0x73, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x5b, 0x0a, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x6a, 0x69, 0x6e, 0x6d,
	0x75, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x65, 0x61,
	0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x73, 0x1a, 0x3b, 0x0a, 0x0d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x42, 0xc8, 0x01, 0x0a, 0x22, 0x63, 0x6f, 0x6d, 0x2e, 0x6a, 0x69, 0x6e, 0x6d, 0x75, 0x68,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x42, 0x0a, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x4c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x6a, 0x69, 0x6e, 0x6d, 0x75, 0x6b, 0x65, 0x6a, 0x69, 0x2f, 0x6a, 0x74, 0x2d,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x6a, 0x69, 0x6e,
	0x6d, 0x75, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x76, 0x31, 0x3b, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x4a, 0x50, 0x52, 0xaa, 0x02, 0x1e, 0x4a, 0x69, 0x6e,
	0x6d, 0x75, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x1e, 0x4a, 0x69,
	0x6e, 0x6d, 0x75, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5c, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x5c, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5c, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_jinmuhealth_platform_report_v1_trend_proto_rawDescOnce sync.Once
	file_jinmuhealth_platform_report_v1_trend_proto_rawDescData = file_jinmuhealth_platform_report_v1_trend_proto_rawDesc
)

func file_jinmuhealth_platform_report_v1_trend_proto_rawDescGZIP() []byte {
	file_jinmuhealth_platform_report_v1_trend_proto_rawDescOnce.Do(func() {
		file_jinmuhealth_platform_report_v1_trend_proto_rawDescData = protoimpl.X.CompressGZIP(file_jinmuhealth_platform_report_v1_trend_proto_rawDescData)
	})
	return file_jinmuhealth_platform_report_v1_trend_proto_rawDescData
}

var file_jinmuhealth_platform_report_v1_trend_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_jinmuhealth_platform_report_v1_trend_proto_goTypes = []interface{}{
	(*WeeklyTrend)(nil),           // 0: jinmuhealth.platform.report.v1.WeeklyTrend
	(*MonthlyTrend)(nil),          // 1: jinmuhealth.platform.report.v1.MonthlyTrend
	(*DiseaseStatistics)(nil),     // 2: jinmuhealth.platform.report.v1.DiseaseStatistics
	nil,                           // 3: jinmuhealth.platform.report.v1.DiseaseStatistics.CountersEntry
	(*CInfo)(nil),                 // 4: jinmuhealth.platform.report.v1.CInfo
	(*timestamppb.Timestamp)(nil), // 5: google.protobuf.Timestamp
}
var file_jinmuhealth_platform_report_v1_trend_proto_depIdxs = []int32{
	4,  // 0: jinmuhealth.platform.report.v1.WeeklyTrend.meridian_list:type_name -> jinmuhealth.platform.report.v1.CInfo
	4,  // 1: jinmuhealth.platform.report.v1.WeeklyTrend.average_meridian:type_name -> jinmuhealth.platform.report.v1.CInfo
	2,  // 2: jinmuhealth.platform.report.v1.WeeklyTrend.disease_statistics:type_name -> jinmuhealth.platform.report.v1.DiseaseStatistics
	5,  // 3: jinmuhealth.platform.report.v1.WeeklyTrend.start_time:type_name -> google.protobuf.Timestamp
	5,  // 4: jinmuhealth.platform.report.v1.WeeklyTrend.end_time:type_name -> google.protobuf.Timestamp
	4,  // 5: jinmuhealth.platform.report.v1.MonthlyTrend.meridian_list:type_name -> jinmuhealth.platform.report.v1.CInfo
	4,  // 6: jinmuhealth.platform.report.v1.MonthlyTrend.average_meridian:type_name -> jinmuhealth.platform.report.v1.CInfo
	2,  // 7: jinmuhealth.platform.report.v1.MonthlyTrend.disease_statistics:type_name -> jinmuhealth.platform.report.v1.DiseaseStatistics
	5,  // 8: jinmuhealth.platform.report.v1.MonthlyTrend.start_time:type_name -> google.protobuf.Timestamp
	5,  // 9: jinmuhealth.platform.report.v1.MonthlyTrend.end_time:type_name -> google.protobuf.Timestamp
	3,  // 10: jinmuhealth.platform.report.v1.DiseaseStatistics.counters:type_name -> jinmuhealth.platform.report.v1.DiseaseStatistics.CountersEntry
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_jinmuhealth_platform_report_v1_trend_proto_init() }
func file_jinmuhealth_platform_report_v1_trend_proto_init() {
	if File_jinmuhealth_platform_report_v1_trend_proto != nil {
		return
	}
	file_jinmuhealth_platform_report_v1_report_modules_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_jinmuhealth_platform_report_v1_trend_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WeeklyTrend); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jinmuhealth_platform_report_v1_trend_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonthlyTrend); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jinmuhealth_platform_report_v1_trend_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiseaseStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_jinmuhealth_platform_report_v1_trend_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_jinmuhealth_platform_report_v1_trend_proto_goTypes,
		DependencyIndexes: file_jinmuhealth_platform_report_v1_trend_proto_depIdxs,
		MessageInfos:      file_jinmuhealth_platform_report_v1_trend_proto_msgTypes,
	}.Build()
	File_jinmuhealth_platform_report_v1_trend_proto = out.File
	file_jinmuhealth_platform_report_v1_trend_proto_rawDesc = nil
	file_jinmuhealth_platform_report_v1_trend_proto_goTypes = nil
	file_jinmuhealth_platform_report_v1_trend_proto_depIdxs = nil
}
