// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: jinmuhealth/platform/report/v1/report.proto

package reportv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// Validate checks the field values on PulseTestOptions with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *PulseTestOptions) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for IsGuestSubject

	// no validation rules for EnableHistory

	// no validation rules for EnableTrendingStatistics

	// no validation rules for Extras

	return nil
}

// PulseTestOptionsValidationError is the validation error returned by
// PulseTestOptions.Validate if the designated constraints aren't met.
type PulseTestOptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PulseTestOptionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PulseTestOptionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PulseTestOptionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PulseTestOptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PulseTestOptionsValidationError) ErrorName() string { return "PulseTestOptionsValidationError" }

// Error satisfies the builtin error interface
func (e PulseTestOptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPulseTestOptions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PulseTestOptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PulseTestOptionsValidationError{}

// Validate checks the field values on SubjectProfile with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *SubjectProfile) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for SubjectId

	// no validation rules for Gender

	// no validation rules for Height

	// no validation rules for Weight

	// no validation rules for Age

	// no validation rules for AdditionalData

	return nil
}

// SubjectProfileValidationError is the validation error returned by
// SubjectProfile.Validate if the designated constraints aren't met.
type SubjectProfileValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubjectProfileValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubjectProfileValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubjectProfileValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubjectProfileValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubjectProfileValidationError) ErrorName() string { return "SubjectProfileValidationError" }

// Error satisfies the builtin error interface
func (e SubjectProfileValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubjectProfile.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubjectProfileValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubjectProfileValidationError{}

// Validate checks the field values on SamplePayload with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *SamplePayload) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Part

	// no validation rules for Posture

	if v, ok := interface{}(m.GetGeoLocation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SamplePayloadValidationError{
				field:  "GeoLocation",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetSampleDevice()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SamplePayloadValidationError{
				field:  "SampleDevice",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetSampleData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SamplePayloadValidationError{
				field:  "SampleData",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Remark

	// no validation rules for AdditionalData

	return nil
}

// SamplePayloadValidationError is the validation error returned by
// SamplePayload.Validate if the designated constraints aren't met.
type SamplePayloadValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SamplePayloadValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SamplePayloadValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SamplePayloadValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SamplePayloadValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SamplePayloadValidationError) ErrorName() string { return "SamplePayloadValidationError" }

// Error satisfies the builtin error interface
func (e SamplePayloadValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSamplePayload.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SamplePayloadValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SamplePayloadValidationError{}

// Validate checks the field values on SampleDevice with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *SampleDevice) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for DeviceType

	// no validation rules for DeviceModel

	// no validation rules for DeviceMac

	// no validation rules for DeviceSn

	// no validation rules for DeviceParams

	return nil
}

// SampleDeviceValidationError is the validation error returned by
// SampleDevice.Validate if the designated constraints aren't met.
type SampleDeviceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SampleDeviceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SampleDeviceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SampleDeviceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SampleDeviceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SampleDeviceValidationError) ErrorName() string { return "SampleDeviceValidationError" }

// Error satisfies the builtin error interface
func (e SampleDeviceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSampleDevice.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SampleDeviceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SampleDeviceValidationError{}

// Validate checks the field values on SampleData with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *SampleData) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Codec

	// no validation rules for CodecParams

	// no validation rules for Data

	// no validation rules for Signature

	// no validation rules for SampleRate

	// no validation rules for Timezone

	if v, ok := interface{}(m.GetStartTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SampleDataValidationError{
				field:  "StartTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetStopTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SampleDataValidationError{
				field:  "StopTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SampleDataValidationError is the validation error returned by
// SampleData.Validate if the designated constraints aren't met.
type SampleDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SampleDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SampleDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SampleDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SampleDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SampleDataValidationError) ErrorName() string { return "SampleDataValidationError" }

// Error satisfies the builtin error interface
func (e SampleDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSampleData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SampleDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SampleDataValidationError{}

// Validate checks the field values on ReportContent with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ReportContent) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ReportId

	for idx, item := range m.GetModuleResults() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ReportContentValidationError{
					field:  fmt.Sprintf("ModuleResults[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetCreatedTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReportContentValidationError{
				field:  "CreatedTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Extras

	return nil
}

// ReportContentValidationError is the validation error returned by
// ReportContent.Validate if the designated constraints aren't met.
type ReportContentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReportContentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReportContentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReportContentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReportContentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReportContentValidationError) ErrorName() string { return "ReportContentValidationError" }

// Error satisfies the builtin error interface
func (e ReportContentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReportContent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReportContentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReportContentValidationError{}

// Validate checks the field values on QuestionList with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *QuestionList) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetQuestions() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QuestionListValidationError{
					field:  fmt.Sprintf("Questions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// QuestionListValidationError is the validation error returned by
// QuestionList.Validate if the designated constraints aren't met.
type QuestionListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QuestionListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QuestionListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QuestionListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QuestionListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QuestionListValidationError) ErrorName() string { return "QuestionListValidationError" }

// Error satisfies the builtin error interface
func (e QuestionListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQuestionList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QuestionListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QuestionListValidationError{}

// Validate checks the field values on Question with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Question) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for QuestionKey

	// no validation rules for Content

	// no validation rules for Type

	for idx, item := range m.GetChoices() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QuestionValidationError{
					field:  fmt.Sprintf("Choices[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// QuestionValidationError is the validation error returned by
// Question.Validate if the designated constraints aren't met.
type QuestionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QuestionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QuestionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QuestionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QuestionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QuestionValidationError) ErrorName() string { return "QuestionValidationError" }

// Error satisfies the builtin error interface
func (e QuestionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQuestion.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QuestionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QuestionValidationError{}

// Validate checks the field values on AnswerList with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *AnswerList) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetAnswers() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AnswerListValidationError{
					field:  fmt.Sprintf("Answers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// AnswerListValidationError is the validation error returned by
// AnswerList.Validate if the designated constraints aren't met.
type AnswerListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AnswerListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AnswerListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AnswerListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AnswerListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AnswerListValidationError) ErrorName() string { return "AnswerListValidationError" }

// Error satisfies the builtin error interface
func (e AnswerListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAnswerList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AnswerListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AnswerListValidationError{}

// Validate checks the field values on Answer with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Answer) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for QuestionKey

	return nil
}

// AnswerValidationError is the validation error returned by Answer.Validate if
// the designated constraints aren't met.
type AnswerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AnswerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AnswerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AnswerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AnswerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AnswerValidationError) ErrorName() string { return "AnswerValidationError" }

// Error satisfies the builtin error interface
func (e AnswerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAnswer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AnswerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AnswerValidationError{}

// Validate checks the field values on QuestionChoice with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *QuestionChoice) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ChoiceKey

	// no validation rules for Content

	// no validation rules for Selected

	return nil
}

// QuestionChoiceValidationError is the validation error returned by
// QuestionChoice.Validate if the designated constraints aren't met.
type QuestionChoiceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QuestionChoiceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QuestionChoiceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QuestionChoiceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QuestionChoiceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QuestionChoiceValidationError) ErrorName() string { return "QuestionChoiceValidationError" }

// Error satisfies the builtin error interface
func (e QuestionChoiceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQuestionChoice.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QuestionChoiceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QuestionChoiceValidationError{}

// Validate checks the field values on ReportTemplateParams with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ReportTemplateParams) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for LanguageCode

	// no validation rules for ExtraParams

	return nil
}

// ReportTemplateParamsValidationError is the validation error returned by
// ReportTemplateParams.Validate if the designated constraints aren't met.
type ReportTemplateParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReportTemplateParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReportTemplateParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReportTemplateParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReportTemplateParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReportTemplateParamsValidationError) ErrorName() string {
	return "ReportTemplateParamsValidationError"
}

// Error satisfies the builtin error interface
func (e ReportTemplateParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReportTemplateParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReportTemplateParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReportTemplateParamsValidationError{}

// Validate checks the field values on SearchReportItem with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *SearchReportItem) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ReportId

	// no validation rules for UserId

	if v, ok := interface{}(m.GetCreatedTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SearchReportItemValidationError{
				field:  "CreatedTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SearchReportItemValidationError is the validation error returned by
// SearchReportItem.Validate if the designated constraints aren't met.
type SearchReportItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchReportItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchReportItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchReportItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchReportItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchReportItemValidationError) ErrorName() string { return "SearchReportItemValidationError" }

// Error satisfies the builtin error interface
func (e SearchReportItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchReportItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchReportItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchReportItemValidationError{}

// Validate checks the field values on GeoLocation with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GeoLocation) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Latitude

	// no validation rules for Longitude

	if v, ok := interface{}(m.GetAltitude()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GeoLocationValidationError{
				field:  "Altitude",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Accuracy

	if v, ok := interface{}(m.GetAltitudeAccuracy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GeoLocationValidationError{
				field:  "AltitudeAccuracy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetHeading()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GeoLocationValidationError{
				field:  "Heading",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetSpeed()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GeoLocationValidationError{
				field:  "Speed",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GeoLocationValidationError is the validation error returned by
// GeoLocation.Validate if the designated constraints aren't met.
type GeoLocationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GeoLocationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GeoLocationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GeoLocationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GeoLocationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GeoLocationValidationError) ErrorName() string { return "GeoLocationValidationError" }

// Error satisfies the builtin error interface
func (e GeoLocationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGeoLocation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GeoLocationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GeoLocationValidationError{}

// Validate checks the field values on CData with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *CData) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for C0

	// no validation rules for C1

	// no validation rules for C2

	// no validation rules for C3

	// no validation rules for C4

	// no validation rules for C5

	// no validation rules for C6

	// no validation rules for C7

	return nil
}

// CDataValidationError is the validation error returned by CData.Validate if
// the designated constraints aren't met.
type CDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CDataValidationError) ErrorName() string { return "CDataValidationError" }

// Error satisfies the builtin error interface
func (e CDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CDataValidationError{}
