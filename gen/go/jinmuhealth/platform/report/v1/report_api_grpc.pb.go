// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package reportv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ReportAPIClient is the client API for ReportAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReportAPIClient interface {
	// SubmitPulseTest 提交采样数据.
	SubmitPulseTest(ctx context.Context, in *SubmitPulseTestRequest, opts ...grpc.CallOption) (*SubmitPulseTestResponse, error)
	// GetRawData 获取原始脉搏波数据
	GetRawData(ctx context.Context, in *GetRawDataRequest, opts ...grpc.CallOption) (*GetRawDataResponse, error)
	// GetReport 获得测量分析报告（含问答）.
	GetReport(ctx context.Context, in *GetReportRequest, opts ...grpc.CallOption) (*GetReportResponse, error)
	// SearchReports 获得历史报告记录.
	SearchReports(ctx context.Context, in *SearchReportsRequest, opts ...grpc.CallOption) (*SearchReportsResponse, error)
	// GetWeeklyTrend 获得周趋势.
	GetWeeklyTrend(ctx context.Context, in *GetWeeklyTrendRequest, opts ...grpc.CallOption) (*GetWeeklyTrendResponse, error)
	// GetMonthlyTrend 获得月趋势.
	GetMonthlyTrend(ctx context.Context, in *GetMonthlyTrendRequest, opts ...grpc.CallOption) (*GetMonthlyTrendResponse, error)
	// GetWeeklyReport 获得周报.
	GetWeeklyReport(ctx context.Context, in *GetWeeklyReportRequest, opts ...grpc.CallOption) (*GetWeeklyReportResponse, error)
	// GetMonthlyReport 获得月报.
	GetMonthlyReport(ctx context.Context, in *GetMonthlyReportRequest, opts ...grpc.CallOption) (*GetMonthlyReportResponse, error)
}

type reportAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewReportAPIClient(cc grpc.ClientConnInterface) ReportAPIClient {
	return &reportAPIClient{cc}
}

func (c *reportAPIClient) SubmitPulseTest(ctx context.Context, in *SubmitPulseTestRequest, opts ...grpc.CallOption) (*SubmitPulseTestResponse, error) {
	out := new(SubmitPulseTestResponse)
	err := c.cc.Invoke(ctx, "/jinmuhealth.platform.report.v1.ReportAPI/SubmitPulseTest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportAPIClient) GetRawData(ctx context.Context, in *GetRawDataRequest, opts ...grpc.CallOption) (*GetRawDataResponse, error) {
	out := new(GetRawDataResponse)
	err := c.cc.Invoke(ctx, "/jinmuhealth.platform.report.v1.ReportAPI/GetRawData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportAPIClient) GetReport(ctx context.Context, in *GetReportRequest, opts ...grpc.CallOption) (*GetReportResponse, error) {
	out := new(GetReportResponse)
	err := c.cc.Invoke(ctx, "/jinmuhealth.platform.report.v1.ReportAPI/GetReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportAPIClient) SearchReports(ctx context.Context, in *SearchReportsRequest, opts ...grpc.CallOption) (*SearchReportsResponse, error) {
	out := new(SearchReportsResponse)
	err := c.cc.Invoke(ctx, "/jinmuhealth.platform.report.v1.ReportAPI/SearchReports", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportAPIClient) GetWeeklyTrend(ctx context.Context, in *GetWeeklyTrendRequest, opts ...grpc.CallOption) (*GetWeeklyTrendResponse, error) {
	out := new(GetWeeklyTrendResponse)
	err := c.cc.Invoke(ctx, "/jinmuhealth.platform.report.v1.ReportAPI/GetWeeklyTrend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportAPIClient) GetMonthlyTrend(ctx context.Context, in *GetMonthlyTrendRequest, opts ...grpc.CallOption) (*GetMonthlyTrendResponse, error) {
	out := new(GetMonthlyTrendResponse)
	err := c.cc.Invoke(ctx, "/jinmuhealth.platform.report.v1.ReportAPI/GetMonthlyTrend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportAPIClient) GetWeeklyReport(ctx context.Context, in *GetWeeklyReportRequest, opts ...grpc.CallOption) (*GetWeeklyReportResponse, error) {
	out := new(GetWeeklyReportResponse)
	err := c.cc.Invoke(ctx, "/jinmuhealth.platform.report.v1.ReportAPI/GetWeeklyReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportAPIClient) GetMonthlyReport(ctx context.Context, in *GetMonthlyReportRequest, opts ...grpc.CallOption) (*GetMonthlyReportResponse, error) {
	out := new(GetMonthlyReportResponse)
	err := c.cc.Invoke(ctx, "/jinmuhealth.platform.report.v1.ReportAPI/GetMonthlyReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReportAPIServer is the server API for ReportAPI service.
// All implementations must embed UnimplementedReportAPIServer
// for forward compatibility
type ReportAPIServer interface {
	// SubmitPulseTest 提交采样数据.
	SubmitPulseTest(context.Context, *SubmitPulseTestRequest) (*SubmitPulseTestResponse, error)
	// GetRawData 获取原始脉搏波数据
	GetRawData(context.Context, *GetRawDataRequest) (*GetRawDataResponse, error)
	// GetReport 获得测量分析报告（含问答）.
	GetReport(context.Context, *GetReportRequest) (*GetReportResponse, error)
	// SearchReports 获得历史报告记录.
	SearchReports(context.Context, *SearchReportsRequest) (*SearchReportsResponse, error)
	// GetWeeklyTrend 获得周趋势.
	GetWeeklyTrend(context.Context, *GetWeeklyTrendRequest) (*GetWeeklyTrendResponse, error)
	// GetMonthlyTrend 获得月趋势.
	GetMonthlyTrend(context.Context, *GetMonthlyTrendRequest) (*GetMonthlyTrendResponse, error)
	// GetWeeklyReport 获得周报.
	GetWeeklyReport(context.Context, *GetWeeklyReportRequest) (*GetWeeklyReportResponse, error)
	// GetMonthlyReport 获得月报.
	GetMonthlyReport(context.Context, *GetMonthlyReportRequest) (*GetMonthlyReportResponse, error)
	mustEmbedUnimplementedReportAPIServer()
}

// UnimplementedReportAPIServer must be embedded to have forward compatible implementations.
type UnimplementedReportAPIServer struct {
}

func (UnimplementedReportAPIServer) SubmitPulseTest(context.Context, *SubmitPulseTestRequest) (*SubmitPulseTestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitPulseTest not implemented")
}
func (UnimplementedReportAPIServer) GetRawData(context.Context, *GetRawDataRequest) (*GetRawDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRawData not implemented")
}
func (UnimplementedReportAPIServer) GetReport(context.Context, *GetReportRequest) (*GetReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReport not implemented")
}
func (UnimplementedReportAPIServer) SearchReports(context.Context, *SearchReportsRequest) (*SearchReportsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchReports not implemented")
}
func (UnimplementedReportAPIServer) GetWeeklyTrend(context.Context, *GetWeeklyTrendRequest) (*GetWeeklyTrendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWeeklyTrend not implemented")
}
func (UnimplementedReportAPIServer) GetMonthlyTrend(context.Context, *GetMonthlyTrendRequest) (*GetMonthlyTrendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMonthlyTrend not implemented")
}
func (UnimplementedReportAPIServer) GetWeeklyReport(context.Context, *GetWeeklyReportRequest) (*GetWeeklyReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWeeklyReport not implemented")
}
func (UnimplementedReportAPIServer) GetMonthlyReport(context.Context, *GetMonthlyReportRequest) (*GetMonthlyReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMonthlyReport not implemented")
}
func (UnimplementedReportAPIServer) mustEmbedUnimplementedReportAPIServer() {}

// UnsafeReportAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReportAPIServer will
// result in compilation errors.
type UnsafeReportAPIServer interface {
	mustEmbedUnimplementedReportAPIServer()
}

func RegisterReportAPIServer(s *grpc.Server, srv ReportAPIServer) {
	s.RegisterService(&_ReportAPI_serviceDesc, srv)
}

func _ReportAPI_SubmitPulseTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitPulseTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportAPIServer).SubmitPulseTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jinmuhealth.platform.report.v1.ReportAPI/SubmitPulseTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportAPIServer).SubmitPulseTest(ctx, req.(*SubmitPulseTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportAPI_GetRawData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRawDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportAPIServer).GetRawData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jinmuhealth.platform.report.v1.ReportAPI/GetRawData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportAPIServer).GetRawData(ctx, req.(*GetRawDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportAPI_GetReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportAPIServer).GetReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jinmuhealth.platform.report.v1.ReportAPI/GetReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportAPIServer).GetReport(ctx, req.(*GetReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportAPI_SearchReports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchReportsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportAPIServer).SearchReports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jinmuhealth.platform.report.v1.ReportAPI/SearchReports",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportAPIServer).SearchReports(ctx, req.(*SearchReportsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportAPI_GetWeeklyTrend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWeeklyTrendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportAPIServer).GetWeeklyTrend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jinmuhealth.platform.report.v1.ReportAPI/GetWeeklyTrend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportAPIServer).GetWeeklyTrend(ctx, req.(*GetWeeklyTrendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportAPI_GetMonthlyTrend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMonthlyTrendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportAPIServer).GetMonthlyTrend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jinmuhealth.platform.report.v1.ReportAPI/GetMonthlyTrend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportAPIServer).GetMonthlyTrend(ctx, req.(*GetMonthlyTrendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportAPI_GetWeeklyReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWeeklyReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportAPIServer).GetWeeklyReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jinmuhealth.platform.report.v1.ReportAPI/GetWeeklyReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportAPIServer).GetWeeklyReport(ctx, req.(*GetWeeklyReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportAPI_GetMonthlyReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMonthlyReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportAPIServer).GetMonthlyReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jinmuhealth.platform.report.v1.ReportAPI/GetMonthlyReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportAPIServer).GetMonthlyReport(ctx, req.(*GetMonthlyReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ReportAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "jinmuhealth.platform.report.v1.ReportAPI",
	HandlerType: (*ReportAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitPulseTest",
			Handler:    _ReportAPI_SubmitPulseTest_Handler,
		},
		{
			MethodName: "GetRawData",
			Handler:    _ReportAPI_GetRawData_Handler,
		},
		{
			MethodName: "GetReport",
			Handler:    _ReportAPI_GetReport_Handler,
		},
		{
			MethodName: "SearchReports",
			Handler:    _ReportAPI_SearchReports_Handler,
		},
		{
			MethodName: "GetWeeklyTrend",
			Handler:    _ReportAPI_GetWeeklyTrend_Handler,
		},
		{
			MethodName: "GetMonthlyTrend",
			Handler:    _ReportAPI_GetMonthlyTrend_Handler,
		},
		{
			MethodName: "GetWeeklyReport",
			Handler:    _ReportAPI_GetWeeklyReport_Handler,
		},
		{
			MethodName: "GetMonthlyReport",
			Handler:    _ReportAPI_GetMonthlyReport_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "jinmuhealth/platform/report/v1/report_api.proto",
}
