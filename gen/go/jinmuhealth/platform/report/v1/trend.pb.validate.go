// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: jinmuhealth/platform/report/v1/trend.proto

package reportv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// Validate checks the field values on WeeklyTrend with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *WeeklyTrend) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetMeridianList() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WeeklyTrendValidationError{
					field:  fmt.Sprintf("MeridianList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetAverageMeridian()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WeeklyTrendValidationError{
				field:  "AverageMeridian",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetDiseaseStatistics()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WeeklyTrendValidationError{
				field:  "DiseaseStatistics",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ErrorMessage

	if v, ok := interface{}(m.GetStartTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WeeklyTrendValidationError{
				field:  "StartTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetEndTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WeeklyTrendValidationError{
				field:  "EndTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// WeeklyTrendValidationError is the validation error returned by
// WeeklyTrend.Validate if the designated constraints aren't met.
type WeeklyTrendValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WeeklyTrendValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WeeklyTrendValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WeeklyTrendValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WeeklyTrendValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WeeklyTrendValidationError) ErrorName() string { return "WeeklyTrendValidationError" }

// Error satisfies the builtin error interface
func (e WeeklyTrendValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWeeklyTrend.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WeeklyTrendValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WeeklyTrendValidationError{}

// Validate checks the field values on MonthlyTrend with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *MonthlyTrend) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetMeridianList() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MonthlyTrendValidationError{
					field:  fmt.Sprintf("MeridianList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetAverageMeridian()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MonthlyTrendValidationError{
				field:  "AverageMeridian",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetDiseaseStatistics()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MonthlyTrendValidationError{
				field:  "DiseaseStatistics",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ErrorMessage

	if v, ok := interface{}(m.GetStartTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MonthlyTrendValidationError{
				field:  "StartTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetEndTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MonthlyTrendValidationError{
				field:  "EndTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// MonthlyTrendValidationError is the validation error returned by
// MonthlyTrend.Validate if the designated constraints aren't met.
type MonthlyTrendValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MonthlyTrendValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MonthlyTrendValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MonthlyTrendValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MonthlyTrendValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MonthlyTrendValidationError) ErrorName() string { return "MonthlyTrendValidationError" }

// Error satisfies the builtin error interface
func (e MonthlyTrendValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMonthlyTrend.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MonthlyTrendValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MonthlyTrendValidationError{}

// Validate checks the field values on DiseaseStatistics with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *DiseaseStatistics) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Counters

	return nil
}

// DiseaseStatisticsValidationError is the validation error returned by
// DiseaseStatistics.Validate if the designated constraints aren't met.
type DiseaseStatisticsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DiseaseStatisticsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DiseaseStatisticsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DiseaseStatisticsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DiseaseStatisticsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DiseaseStatisticsValidationError) ErrorName() string {
	return "DiseaseStatisticsValidationError"
}

// Error satisfies the builtin error interface
func (e DiseaseStatisticsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDiseaseStatistics.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DiseaseStatisticsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DiseaseStatisticsValidationError{}
