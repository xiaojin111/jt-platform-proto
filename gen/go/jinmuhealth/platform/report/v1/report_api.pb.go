//
// 常州金姆健康科技有限公司. (c) 2019
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: jinmuhealth/platform/report/v1/report_api.proto

package reportv1

import (
	_ "github.com/jinmukeji/jt-platform-proto/gen/go/jinmuhealth/platform/annotation/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 提交采样数据的请求
type SubmitPulseTestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 本次测量使用的 App ID
	AppId string `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	// 测量功能开关
	Options *PulseTestOptions `protobuf:"bytes,2,opt,name=options,proto3" json:"options,omitempty"`
	// 受试者档案信息
	Subject *SubjectProfile `protobuf:"bytes,3,opt,name=subject,proto3" json:"subject,omitempty"`
	// 信号采样负载
	Payload *SamplePayload `protobuf:"bytes,4,opt,name=payload,proto3" json:"payload,omitempty"`
	// 元数据，Key-Value Pair
	// 不超过 500 个 Key-Value Pair.
	// Key 的字符长度不超过 64 个字符
	// Value 的字符长度不超过 65536 个字符
	Metadata map[string]string `protobuf:"bytes,100,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SubmitPulseTestRequest) Reset() {
	*x = SubmitPulseTestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jinmuhealth_platform_report_v1_report_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitPulseTestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitPulseTestRequest) ProtoMessage() {}

func (x *SubmitPulseTestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jinmuhealth_platform_report_v1_report_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitPulseTestRequest.ProtoReflect.Descriptor instead.
func (*SubmitPulseTestRequest) Descriptor() ([]byte, []int) {
	return file_jinmuhealth_platform_report_v1_report_api_proto_rawDescGZIP(), []int{0}
}

func (x *SubmitPulseTestRequest) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *SubmitPulseTestRequest) GetOptions() *PulseTestOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *SubmitPulseTestRequest) GetSubject() *SubjectProfile {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *SubmitPulseTestRequest) GetPayload() *SamplePayload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *SubmitPulseTestRequest) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// 提交采样数据的响应
type SubmitPulseTestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 测量流水号 ID
	PulseTestId string `protobuf:"bytes,1,opt,name=pulse_test_id,json=pulseTestId,proto3" json:"pulse_test_id,omitempty"`
	// 元数据，Key-Value Pair
	// 不超过 500 个 Key-Value Pair.
	// Key 的字符长度不超过 64 个字符
	// Value 的字符长度不超过 65536 个字符
	Metadata map[string]string `protobuf:"bytes,100,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SubmitPulseTestResponse) Reset() {
	*x = SubmitPulseTestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jinmuhealth_platform_report_v1_report_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitPulseTestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitPulseTestResponse) ProtoMessage() {}

func (x *SubmitPulseTestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jinmuhealth_platform_report_v1_report_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitPulseTestResponse.ProtoReflect.Descriptor instead.
func (*SubmitPulseTestResponse) Descriptor() ([]byte, []int) {
	return file_jinmuhealth_platform_report_v1_report_api_proto_rawDescGZIP(), []int{1}
}

func (x *SubmitPulseTestResponse) GetPulseTestId() string {
	if x != nil {
		return x.PulseTestId
	}
	return ""
}

func (x *SubmitPulseTestResponse) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// 获取原始脉搏波数据请求
type GetRawDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// App ID
	AppId string `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	// 测量流水号 ID
	// 调用将返回对应本测量流水号 ID 的脉搏波数据
	PulseTestId string `protobuf:"bytes,2,opt,name=pulse_test_id,json=pulseTestId,proto3" json:"pulse_test_id,omitempty"`
	// 期望获得的数据长度
	// expected_count>=0 时，至多返回指定数量的数据点数，数量不超过1000；
	// expected_count<0 时，返回全部数据点，仅对高级用户开放.
	ExpectedCount int32 `protobuf:"varint,3,opt,name=expected_count,json=expectedCount,proto3" json:"expected_count,omitempty"`
}

func (x *GetRawDataRequest) Reset() {
	*x = GetRawDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jinmuhealth_platform_report_v1_report_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRawDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRawDataRequest) ProtoMessage() {}

func (x *GetRawDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jinmuhealth_platform_report_v1_report_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRawDataRequest.ProtoReflect.Descriptor instead.
func (*GetRawDataRequest) Descriptor() ([]byte, []int) {
	return file_jinmuhealth_platform_report_v1_report_api_proto_rawDescGZIP(), []int{2}
}

func (x *GetRawDataRequest) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *GetRawDataRequest) GetPulseTestId() string {
	if x != nil {
		return x.PulseTestId
	}
	return ""
}

func (x *GetRawDataRequest) GetExpectedCount() int32 {
	if x != nil {
		return x.ExpectedCount
	}
	return 0
}

// 获取原始脉搏波数据响应
type GetRawDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 采样频率
	SampleRate uint32 `protobuf:"varint,1,opt,name=sample_rate,json=sampleRate,proto3" json:"sample_rate,omitempty"`
	// 本次采样的(局部)数据，整数序列
	RawData []uint32 `protobuf:"varint,2,rep,packed,name=raw_data,json=rawData,proto3" json:"raw_data,omitempty"`
}

func (x *GetRawDataResponse) Reset() {
	*x = GetRawDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jinmuhealth_platform_report_v1_report_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRawDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRawDataResponse) ProtoMessage() {}

func (x *GetRawDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jinmuhealth_platform_report_v1_report_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRawDataResponse.ProtoReflect.Descriptor instead.
func (*GetRawDataResponse) Descriptor() ([]byte, []int) {
	return file_jinmuhealth_platform_report_v1_report_api_proto_rawDescGZIP(), []int{3}
}

func (x *GetRawDataResponse) GetSampleRate() uint32 {
	if x != nil {
		return x.SampleRate
	}
	return 0
}

func (x *GetRawDataResponse) GetRawData() []uint32 {
	if x != nil {
		return x.RawData
	}
	return nil
}

// 尝试获得报告的请求
type GetReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// App ID
	AppId string `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	// 测量流水号 ID
	PulseTestId string `protobuf:"bytes,2,opt,name=pulse_test_id,json=pulseTestId,proto3" json:"pulse_test_id,omitempty"`
	// 分析报告 ID (可选)
	// 1. 如果传入了 report_id，则系统查找指定报告，进行问答轮替流程
	// 2. 如果 report_id 传入了空值，
	//    则系统将重新计算生成一个新的分析报告，并返回新的 report_id
	ReportId string `protobuf:"bytes,3,opt,name=report_id,json=reportId,proto3" json:"report_id,omitempty"`
	// 申请查询的模块内容清单
	// 返回的报告内容中仅包含申请的模块清单的数据
	RequestedModuleInputs []*ReportModuleInput `protobuf:"bytes,4,rep,name=requested_module_inputs,json=requestedModuleInputs,proto3" json:"requested_module_inputs,omitempty"`
	// 回答的问题，是模块名到回答的问题的映射关系
	ModuleAnswers map[string]*AnswerList `protobuf:"bytes,5,rep,name=module_answers,json=moduleAnswers,proto3" json:"module_answers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 分析报告内容模版参数
	TemplateParams *ReportTemplateParams `protobuf:"bytes,6,opt,name=template_params,json=templateParams,proto3" json:"template_params,omitempty"`
	// 额外的扩展上下文数据，KV 键值对
	Extras map[string]string `protobuf:"bytes,100,rep,name=extras,proto3" json:"extras,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetReportRequest) Reset() {
	*x = GetReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jinmuhealth_platform_report_v1_report_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReportRequest) ProtoMessage() {}

func (x *GetReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jinmuhealth_platform_report_v1_report_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReportRequest.ProtoReflect.Descriptor instead.
func (*GetReportRequest) Descriptor() ([]byte, []int) {
	return file_jinmuhealth_platform_report_v1_report_api_proto_rawDescGZIP(), []int{4}
}

func (x *GetReportRequest) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *GetReportRequest) GetPulseTestId() string {
	if x != nil {
		return x.PulseTestId
	}
	return ""
}

func (x *GetReportRequest) GetReportId() string {
	if x != nil {
		return x.ReportId
	}
	return ""
}

func (x *GetReportRequest) GetRequestedModuleInputs() []*ReportModuleInput {
	if x != nil {
		return x.RequestedModuleInputs
	}
	return nil
}

func (x *GetReportRequest) GetModuleAnswers() map[string]*AnswerList {
	if x != nil {
		return x.ModuleAnswers
	}
	return nil
}

func (x *GetReportRequest) GetTemplateParams() *ReportTemplateParams {
	if x != nil {
		return x.TemplateParams
	}
	return nil
}

func (x *GetReportRequest) GetExtras() map[string]string {
	if x != nil {
		return x.Extras
	}
	return nil
}

// 尝试获得报告的响应
type GetReportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 报告 ID
	ReportId string `protobuf:"bytes,1,opt,name=report_id,json=reportId,proto3" json:"report_id,omitempty"`
	// 是否是完整的报告
	// 为 true 时 report 中才有内容.
	IsCompleteReport bool `protobuf:"varint,2,opt,name=is_complete_report,json=isCompleteReport,proto3" json:"is_complete_report,omitempty"`
	// 是否还需要回答问题
	HasQuestions bool `protobuf:"varint,3,opt,name=has_questions,json=hasQuestions,proto3" json:"has_questions,omitempty"`
	// 提问的问题，是模块名到提问的问题的映射关系
	ModuleQuestions map[string]*QuestionList `protobuf:"bytes,4,rep,name=module_questions,json=moduleQuestions,proto3" json:"module_questions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 报告内容
	Report *ReportContent `protobuf:"bytes,10,opt,name=report,proto3" json:"report,omitempty"`
	// 算法数据
	CData *CData `protobuf:"bytes,11,opt,name=c_data,json=cData,proto3" json:"c_data,omitempty"`
	// 元数据，Key-Value Pair
	// 不超过 500 个 Key-Value Pair.
	// Key 的字符长度不超过 64 个字符
	// Value 的字符长度不超过 65536 个字符
	Metadata map[string]string `protobuf:"bytes,100,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetReportResponse) Reset() {
	*x = GetReportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jinmuhealth_platform_report_v1_report_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReportResponse) ProtoMessage() {}

func (x *GetReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jinmuhealth_platform_report_v1_report_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReportResponse.ProtoReflect.Descriptor instead.
func (*GetReportResponse) Descriptor() ([]byte, []int) {
	return file_jinmuhealth_platform_report_v1_report_api_proto_rawDescGZIP(), []int{5}
}

func (x *GetReportResponse) GetReportId() string {
	if x != nil {
		return x.ReportId
	}
	return ""
}

func (x *GetReportResponse) GetIsCompleteReport() bool {
	if x != nil {
		return x.IsCompleteReport
	}
	return false
}

func (x *GetReportResponse) GetHasQuestions() bool {
	if x != nil {
		return x.HasQuestions
	}
	return false
}

func (x *GetReportResponse) GetModuleQuestions() map[string]*QuestionList {
	if x != nil {
		return x.ModuleQuestions
	}
	return nil
}

func (x *GetReportResponse) GetReport() *ReportContent {
	if x != nil {
		return x.Report
	}
	return nil
}

func (x *GetReportResponse) GetCData() *CData {
	if x != nil {
		return x.CData
	}
	return nil
}

func (x *GetReportResponse) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// 获得历史报告记录的请求
type SearchReportsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// App ID
	AppId string `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	// 用户 ID
	UserId string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// 测量数据开始时间(UTC)
	StartTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// 测量数据结束时间(UTC)
	EndTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// 分页偏移量
	PageOffset int32 `protobuf:"varint,5,opt,name=page_offset,json=pageOffset,proto3" json:"page_offset,omitempty"`
	// 期望分页查询记录的数量
	PageSize int32 `protobuf:"varint,6,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
}

func (x *SearchReportsRequest) Reset() {
	*x = SearchReportsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jinmuhealth_platform_report_v1_report_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchReportsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchReportsRequest) ProtoMessage() {}

func (x *SearchReportsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jinmuhealth_platform_report_v1_report_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchReportsRequest.ProtoReflect.Descriptor instead.
func (*SearchReportsRequest) Descriptor() ([]byte, []int) {
	return file_jinmuhealth_platform_report_v1_report_api_proto_rawDescGZIP(), []int{6}
}

func (x *SearchReportsRequest) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *SearchReportsRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *SearchReportsRequest) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *SearchReportsRequest) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *SearchReportsRequest) GetPageOffset() int32 {
	if x != nil {
		return x.PageOffset
	}
	return 0
}

func (x *SearchReportsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

// 获得历史报告记录的响应
type SearchReportsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 历史记录清单
	Items []*SearchReportItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *SearchReportsResponse) Reset() {
	*x = SearchReportsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jinmuhealth_platform_report_v1_report_api_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchReportsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchReportsResponse) ProtoMessage() {}

func (x *SearchReportsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jinmuhealth_platform_report_v1_report_api_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchReportsResponse.ProtoReflect.Descriptor instead.
func (*SearchReportsResponse) Descriptor() ([]byte, []int) {
	return file_jinmuhealth_platform_report_v1_report_api_proto_rawDescGZIP(), []int{7}
}

func (x *SearchReportsResponse) GetItems() []*SearchReportItem {
	if x != nil {
		return x.Items
	}
	return nil
}

// 获得周趋势的请求
type GetWeeklyTrendRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// App ID
	AppId string `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	// 用户 ID
	UserId string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *GetWeeklyTrendRequest) Reset() {
	*x = GetWeeklyTrendRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jinmuhealth_platform_report_v1_report_api_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWeeklyTrendRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWeeklyTrendRequest) ProtoMessage() {}

func (x *GetWeeklyTrendRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jinmuhealth_platform_report_v1_report_api_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWeeklyTrendRequest.ProtoReflect.Descriptor instead.
func (*GetWeeklyTrendRequest) Descriptor() ([]byte, []int) {
	return file_jinmuhealth_platform_report_v1_report_api_proto_rawDescGZIP(), []int{8}
}

func (x *GetWeeklyTrendRequest) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *GetWeeklyTrendRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

// 获得周趋势的响应
type GetWeeklyTrendResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 周趋势
	WeeklyTrend *WeeklyTrend `protobuf:"bytes,1,opt,name=weekly_trend,json=weeklyTrend,proto3" json:"weekly_trend,omitempty"`
}

func (x *GetWeeklyTrendResponse) Reset() {
	*x = GetWeeklyTrendResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jinmuhealth_platform_report_v1_report_api_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWeeklyTrendResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWeeklyTrendResponse) ProtoMessage() {}

func (x *GetWeeklyTrendResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jinmuhealth_platform_report_v1_report_api_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWeeklyTrendResponse.ProtoReflect.Descriptor instead.
func (*GetWeeklyTrendResponse) Descriptor() ([]byte, []int) {
	return file_jinmuhealth_platform_report_v1_report_api_proto_rawDescGZIP(), []int{9}
}

func (x *GetWeeklyTrendResponse) GetWeeklyTrend() *WeeklyTrend {
	if x != nil {
		return x.WeeklyTrend
	}
	return nil
}

// 获得月趋势的请求
type GetMonthlyTrendRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// App ID
	AppId string `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	// 用户 ID
	UserId string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *GetMonthlyTrendRequest) Reset() {
	*x = GetMonthlyTrendRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jinmuhealth_platform_report_v1_report_api_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMonthlyTrendRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMonthlyTrendRequest) ProtoMessage() {}

func (x *GetMonthlyTrendRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jinmuhealth_platform_report_v1_report_api_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMonthlyTrendRequest.ProtoReflect.Descriptor instead.
func (*GetMonthlyTrendRequest) Descriptor() ([]byte, []int) {
	return file_jinmuhealth_platform_report_v1_report_api_proto_rawDescGZIP(), []int{10}
}

func (x *GetMonthlyTrendRequest) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *GetMonthlyTrendRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

// 获得月趋势的响应
type GetMonthlyTrendResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 月趋势
	MonthlyTrend *MonthlyTrend `protobuf:"bytes,1,opt,name=monthly_trend,json=monthlyTrend,proto3" json:"monthly_trend,omitempty"`
}

func (x *GetMonthlyTrendResponse) Reset() {
	*x = GetMonthlyTrendResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jinmuhealth_platform_report_v1_report_api_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMonthlyTrendResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMonthlyTrendResponse) ProtoMessage() {}

func (x *GetMonthlyTrendResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jinmuhealth_platform_report_v1_report_api_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMonthlyTrendResponse.ProtoReflect.Descriptor instead.
func (*GetMonthlyTrendResponse) Descriptor() ([]byte, []int) {
	return file_jinmuhealth_platform_report_v1_report_api_proto_rawDescGZIP(), []int{11}
}

func (x *GetMonthlyTrendResponse) GetMonthlyTrend() *MonthlyTrend {
	if x != nil {
		return x.MonthlyTrend
	}
	return nil
}

// 获得周报的请求
type GetWeeklyReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// App ID
	AppId string `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	// 用户ID
	UserId string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// 语言
	LanguageCode string `protobuf:"bytes,3,opt,name=language_code,json=languageCode,proto3" json:"language_code,omitempty"`
	// 模版参数
	TemplateParams *ReportTemplateParams `protobuf:"bytes,4,opt,name=template_params,json=templateParams,proto3" json:"template_params,omitempty"`
}

func (x *GetWeeklyReportRequest) Reset() {
	*x = GetWeeklyReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jinmuhealth_platform_report_v1_report_api_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWeeklyReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWeeklyReportRequest) ProtoMessage() {}

func (x *GetWeeklyReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jinmuhealth_platform_report_v1_report_api_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWeeklyReportRequest.ProtoReflect.Descriptor instead.
func (*GetWeeklyReportRequest) Descriptor() ([]byte, []int) {
	return file_jinmuhealth_platform_report_v1_report_api_proto_rawDescGZIP(), []int{12}
}

func (x *GetWeeklyReportRequest) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *GetWeeklyReportRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetWeeklyReportRequest) GetLanguageCode() string {
	if x != nil {
		return x.LanguageCode
	}
	return ""
}

func (x *GetWeeklyReportRequest) GetTemplateParams() *ReportTemplateParams {
	if x != nil {
		return x.TemplateParams
	}
	return nil
}

// 获得周报的响应
type GetWeeklyReportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 报告内容
	Report *ReportContent `protobuf:"bytes,1,opt,name=report,proto3" json:"report,omitempty"`
	// 开始时间
	StartTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// 结束时间
	EndTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (x *GetWeeklyReportResponse) Reset() {
	*x = GetWeeklyReportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jinmuhealth_platform_report_v1_report_api_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWeeklyReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWeeklyReportResponse) ProtoMessage() {}

func (x *GetWeeklyReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jinmuhealth_platform_report_v1_report_api_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWeeklyReportResponse.ProtoReflect.Descriptor instead.
func (*GetWeeklyReportResponse) Descriptor() ([]byte, []int) {
	return file_jinmuhealth_platform_report_v1_report_api_proto_rawDescGZIP(), []int{13}
}

func (x *GetWeeklyReportResponse) GetReport() *ReportContent {
	if x != nil {
		return x.Report
	}
	return nil
}

func (x *GetWeeklyReportResponse) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *GetWeeklyReportResponse) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

// 获得月报的请求
type GetMonthlyReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// App ID
	AppId string `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	// 用户ID
	UserId string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// 语言
	LanguageCode string `protobuf:"bytes,3,opt,name=language_code,json=languageCode,proto3" json:"language_code,omitempty"`
	// 模版参数
	TemplateParams *ReportTemplateParams `protobuf:"bytes,4,opt,name=template_params,json=templateParams,proto3" json:"template_params,omitempty"`
}

func (x *GetMonthlyReportRequest) Reset() {
	*x = GetMonthlyReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jinmuhealth_platform_report_v1_report_api_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMonthlyReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMonthlyReportRequest) ProtoMessage() {}

func (x *GetMonthlyReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jinmuhealth_platform_report_v1_report_api_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMonthlyReportRequest.ProtoReflect.Descriptor instead.
func (*GetMonthlyReportRequest) Descriptor() ([]byte, []int) {
	return file_jinmuhealth_platform_report_v1_report_api_proto_rawDescGZIP(), []int{14}
}

func (x *GetMonthlyReportRequest) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *GetMonthlyReportRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetMonthlyReportRequest) GetLanguageCode() string {
	if x != nil {
		return x.LanguageCode
	}
	return ""
}

func (x *GetMonthlyReportRequest) GetTemplateParams() *ReportTemplateParams {
	if x != nil {
		return x.TemplateParams
	}
	return nil
}

// 获得月报的响应
type GetMonthlyReportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 报告内容
	Report *ReportContent `protobuf:"bytes,1,opt,name=report,proto3" json:"report,omitempty"`
	// 开始时间
	StartTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// 结束时间
	EndTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (x *GetMonthlyReportResponse) Reset() {
	*x = GetMonthlyReportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jinmuhealth_platform_report_v1_report_api_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMonthlyReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMonthlyReportResponse) ProtoMessage() {}

func (x *GetMonthlyReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jinmuhealth_platform_report_v1_report_api_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMonthlyReportResponse.ProtoReflect.Descriptor instead.
func (*GetMonthlyReportResponse) Descriptor() ([]byte, []int) {
	return file_jinmuhealth_platform_report_v1_report_api_proto_rawDescGZIP(), []int{15}
}

func (x *GetMonthlyReportResponse) GetReport() *ReportContent {
	if x != nil {
		return x.Report
	}
	return nil
}

func (x *GetMonthlyReportResponse) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *GetMonthlyReportResponse) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

var File_jinmuhealth_platform_report_v1_report_api_proto protoreflect.FileDescriptor

var file_jinmuhealth_platform_report_v1_report_api_proto_rawDesc = []byte{
	0x0a, 0x2f, 0x6a, 0x69, 0x6e, 0x6d, 0x75, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2f, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x76, 0x31,
	0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x1e, 0x6a, 0x69, 0x6e, 0x6d, 0x75, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76,
	0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x2b, 0x6a, 0x69, 0x6e, 0x6d, 0x75, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2f,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f,
	0x76, 0x31, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x2a, 0x6a, 0x69, 0x6e, 0x6d, 0x75, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2f, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x76, 0x31, 0x2f,
	0x74, 0x72, 0x65, 0x6e, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x33, 0x6a, 0x69, 0x6e,
	0x6d, 0x75, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x33, 0x6a, 0x69, 0x6e, 0x6d, 0x75, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2f, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xad, 0x03, 0x0a, 0x16, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x50, 0x75, 0x6c, 0x73, 0x65, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6a, 0x69, 0x6e, 0x6d, 0x75,
	0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x6c, 0x73, 0x65, 0x54,
	0x65, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x48, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6a, 0x69, 0x6e, 0x6d, 0x75, 0x68, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x47, 0x0a,
	0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x6a, 0x69, 0x6e, 0x6d, 0x75, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x07, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x60, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x64, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x6a, 0x69, 0x6e, 0x6d, 0x75,
	0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x50, 0x75, 0x6c, 0x73, 0x65, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xdd, 0x01, 0x0a, 0x17, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x50, 0x75, 0x6c, 0x73, 0x65, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x22, 0x0a, 0x0d, 0x70, 0x75, 0x6c, 0x73, 0x65, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x75, 0x6c, 0x73, 0x65, 0x54,
	0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x61, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x64, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x6a, 0x69, 0x6e, 0x6d, 0x75, 0x68,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x50,
	0x75, 0x6c, 0x73, 0x65, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x75, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x52, 0x61, 0x77, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49,
	0x64, 0x12, 0x22, 0x0a, 0x0d, 0x70, 0x75, 0x6c, 0x73, 0x65, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x75, 0x6c, 0x73, 0x65, 0x54,
	0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x65,
	0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x54, 0x0a, 0x12,
	0x47, 0x65, 0x74, 0x52, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52,
	0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x08, 0x72, 0x61, 0x77, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x02, 0x10, 0x01, 0x52, 0x07, 0x72, 0x61, 0x77, 0x44, 0x61,
	0x74, 0x61, 0x22, 0x9f, 0x05, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x22,
	0x0a, 0x0d, 0x70, 0x75, 0x6c, 0x73, 0x65, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x75, 0x6c, 0x73, 0x65, 0x54, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12,
	0x69, 0x0a, 0x17, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x31, 0x2e, 0x6a, 0x69, 0x6e, 0x6d, 0x75, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x52, 0x15, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x6a, 0x0a, 0x0e, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x5f, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x43, 0x2e, 0x6a, 0x69, 0x6e, 0x6d, 0x75, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x41, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x41,
	0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x12, 0x5d, 0x0a, 0x0f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x34, 0x2e, 0x6a, 0x69, 0x6e, 0x6d, 0x75, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0e, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x54, 0x0a, 0x06, 0x65, 0x78, 0x74, 0x72, 0x61, 0x73, 0x18,
	0x64, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x6a, 0x69, 0x6e, 0x6d, 0x75, 0x68, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x06, 0x65, 0x78, 0x74, 0x72, 0x61, 0x73, 0x1a, 0x6c, 0x0a, 0x12, 0x4d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x40, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6a, 0x69, 0x6e, 0x6d, 0x75, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x87, 0x05, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x68, 0x61, 0x73, 0x5f, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x68, 0x61,
	0x73, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x71, 0x0a, 0x10, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x6a, 0x69, 0x6e, 0x6d, 0x75, 0x68, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x45, 0x0a,
	0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x6a, 0x69, 0x6e, 0x6d, 0x75, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x3c, 0x0a, 0x06, 0x63, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6a, 0x69, 0x6e, 0x6d, 0x75, 0x68, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x63, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x5b, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x64,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x6a, 0x69, 0x6e, 0x6d, 0x75, 0x68, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a,
	0x70, 0x0a, 0x14, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x42, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6a, 0x69, 0x6e, 0x6d, 0x75,
	0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf6,
	0x01, 0x0a, 0x14, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x70, 0x61, 0x67, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x5f, 0x0a, 0x15, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x46, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x6a, 0x69, 0x6e, 0x6d, 0x75, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x47, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x57,
	0x65, 0x65, 0x6b, 0x6c, 0x79, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x22, 0x68, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x57, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x54, 0x72,
	0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x0c, 0x77,
	0x65, 0x65, 0x6b, 0x6c, 0x79, 0x5f, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x6a, 0x69, 0x6e, 0x6d, 0x75, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x57, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x52, 0x0b,
	0x77, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x22, 0x48, 0x0a, 0x16, 0x47,
	0x65, 0x74, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x6c, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x6e, 0x74,
	0x68, 0x6c, 0x79, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x51, 0x0a, 0x0d, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x5f, 0x74, 0x72, 0x65, 0x6e,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6a, 0x69, 0x6e, 0x6d, 0x75, 0x68,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79,
	0x54, 0x72, 0x65, 0x6e, 0x64, 0x52, 0x0c, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x54, 0x72,
	0x65, 0x6e, 0x64, 0x22, 0xcc, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x57, 0x65, 0x65, 0x6b, 0x6c,
	0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15,
	0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23,
	0x0a, 0x0d, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x5d, 0x0a, 0x0f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6a,
	0x69, 0x6e, 0x6d, 0x75, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x52, 0x0e, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x22, 0xd2, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x57, 0x65, 0x65, 0x6b, 0x6c, 0x79,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45,
	0x0a, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x6a, 0x69, 0x6e, 0x6d, 0x75, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07,
	0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xcd, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4d,
	0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x5d, 0x0a, 0x0f, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x34, 0x2e, 0x6a, 0x69, 0x6e, 0x6d, 0x75, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0e, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0xd3, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x4d,
	0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6a, 0x69, 0x6e, 0x6d, 0x75, 0x68, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x52, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x32, 0xc0, 0x08,
	0x0a, 0x09, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x50, 0x49, 0x12, 0x88, 0x01, 0x0a, 0x0f,
	0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x50, 0x75, 0x6c, 0x73, 0x65, 0x54, 0x65, 0x73, 0x74, 0x12,
	0x36, 0x2e, 0x6a, 0x69, 0x6e, 0x6d, 0x75, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x50, 0x75, 0x6c, 0x73, 0x65, 0x54, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x6a, 0x69, 0x6e, 0x6d, 0x75, 0x68,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x50,
	0x75, 0x6c, 0x73, 0x65, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x04, 0xc8, 0xf0, 0x19, 0x01, 0x12, 0x79, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x52, 0x61, 0x77,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x31, 0x2e, 0x6a, 0x69, 0x6e, 0x6d, 0x75, 0x68, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x6a, 0x69, 0x6e, 0x6d, 0x75, 0x68,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x61, 0x77, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x04, 0xc8, 0xf0, 0x19,
	0x01, 0x12, 0x76, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x30,
	0x2e, 0x6a, 0x69, 0x6e, 0x6d, 0x75, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x31, 0x2e, 0x6a, 0x69, 0x6e, 0x6d, 0x75, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x04, 0xc8, 0xf0, 0x19, 0x01, 0x12, 0x82, 0x01, 0x0a, 0x0d, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x34, 0x2e, 0x6a, 0x69,
	0x6e, 0x6d, 0x75, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x35, 0x2e, 0x6a, 0x69, 0x6e, 0x6d, 0x75, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x04, 0xc8, 0xf0, 0x19, 0x01, 0x12, 0x85,
	0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x57, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x54, 0x72, 0x65, 0x6e,
	0x64, 0x12, 0x35, 0x2e, 0x6a, 0x69, 0x6e, 0x6d, 0x75, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x54, 0x72, 0x65, 0x6e,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x6a, 0x69, 0x6e, 0x6d, 0x75,
	0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x65, 0x65,
	0x6b, 0x6c, 0x79, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x04, 0xc8, 0xf0, 0x19, 0x01, 0x12, 0x88, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4d, 0x6f,
	0x6e, 0x74, 0x68, 0x6c, 0x79, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x12, 0x36, 0x2e, 0x6a, 0x69, 0x6e,
	0x6d, 0x75, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d,
	0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x37, 0x2e, 0x6a, 0x69, 0x6e, 0x6d, 0x75, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x54, 0x72,
	0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x04, 0xc8, 0xf0, 0x19,
	0x01, 0x12, 0x88, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x57, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x36, 0x2e, 0x6a, 0x69, 0x6e, 0x6d, 0x75, 0x68, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x65, 0x65, 0x6b, 0x6c, 0x79,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e,
	0x6a, 0x69, 0x6e, 0x6d, 0x75, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x57, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x04, 0xc8, 0xf0, 0x19, 0x01, 0x12, 0x8b, 0x01, 0x0a,
	0x10, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x37, 0x2e, 0x6a, 0x69, 0x6e, 0x6d, 0x75, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x6a, 0x69, 0x6e,
	0x6d, 0x75, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d,
	0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x04, 0xc8, 0xf0, 0x19, 0x01, 0x1a, 0x04, 0x88, 0xb2, 0x19, 0x01,
	0x42, 0xcc, 0x01, 0x0a, 0x22, 0x63, 0x6f, 0x6d, 0x2e, 0x6a, 0x69, 0x6e, 0x6d, 0x75, 0x68, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x42, 0x0e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41,
	0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x4c, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6a, 0x69, 0x6e, 0x6d, 0x75, 0x6b, 0x65, 0x6a, 0x69, 0x2f,
	0x6a, 0x74, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f,
	0x6a, 0x69, 0x6e, 0x6d, 0x75, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2f, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x76, 0x31, 0x3b, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x4a, 0x50, 0x52, 0xaa, 0x02, 0x1e,
	0x4a, 0x69, 0x6e, 0x6d, 0x75, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x50, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x56, 0x31, 0xca, 0x02,
	0x1e, 0x4a, 0x69, 0x6e, 0x6d, 0x75, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5c, 0x50, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5c, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5c, 0x56, 0x31, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_jinmuhealth_platform_report_v1_report_api_proto_rawDescOnce sync.Once
	file_jinmuhealth_platform_report_v1_report_api_proto_rawDescData = file_jinmuhealth_platform_report_v1_report_api_proto_rawDesc
)

func file_jinmuhealth_platform_report_v1_report_api_proto_rawDescGZIP() []byte {
	file_jinmuhealth_platform_report_v1_report_api_proto_rawDescOnce.Do(func() {
		file_jinmuhealth_platform_report_v1_report_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_jinmuhealth_platform_report_v1_report_api_proto_rawDescData)
	})
	return file_jinmuhealth_platform_report_v1_report_api_proto_rawDescData
}

var file_jinmuhealth_platform_report_v1_report_api_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_jinmuhealth_platform_report_v1_report_api_proto_goTypes = []interface{}{
	(*SubmitPulseTestRequest)(nil),   // 0: jinmuhealth.platform.report.v1.SubmitPulseTestRequest
	(*SubmitPulseTestResponse)(nil),  // 1: jinmuhealth.platform.report.v1.SubmitPulseTestResponse
	(*GetRawDataRequest)(nil),        // 2: jinmuhealth.platform.report.v1.GetRawDataRequest
	(*GetRawDataResponse)(nil),       // 3: jinmuhealth.platform.report.v1.GetRawDataResponse
	(*GetReportRequest)(nil),         // 4: jinmuhealth.platform.report.v1.GetReportRequest
	(*GetReportResponse)(nil),        // 5: jinmuhealth.platform.report.v1.GetReportResponse
	(*SearchReportsRequest)(nil),     // 6: jinmuhealth.platform.report.v1.SearchReportsRequest
	(*SearchReportsResponse)(nil),    // 7: jinmuhealth.platform.report.v1.SearchReportsResponse
	(*GetWeeklyTrendRequest)(nil),    // 8: jinmuhealth.platform.report.v1.GetWeeklyTrendRequest
	(*GetWeeklyTrendResponse)(nil),   // 9: jinmuhealth.platform.report.v1.GetWeeklyTrendResponse
	(*GetMonthlyTrendRequest)(nil),   // 10: jinmuhealth.platform.report.v1.GetMonthlyTrendRequest
	(*GetMonthlyTrendResponse)(nil),  // 11: jinmuhealth.platform.report.v1.GetMonthlyTrendResponse
	(*GetWeeklyReportRequest)(nil),   // 12: jinmuhealth.platform.report.v1.GetWeeklyReportRequest
	(*GetWeeklyReportResponse)(nil),  // 13: jinmuhealth.platform.report.v1.GetWeeklyReportResponse
	(*GetMonthlyReportRequest)(nil),  // 14: jinmuhealth.platform.report.v1.GetMonthlyReportRequest
	(*GetMonthlyReportResponse)(nil), // 15: jinmuhealth.platform.report.v1.GetMonthlyReportResponse
	nil,                              // 16: jinmuhealth.platform.report.v1.SubmitPulseTestRequest.MetadataEntry
	nil,                              // 17: jinmuhealth.platform.report.v1.SubmitPulseTestResponse.MetadataEntry
	nil,                              // 18: jinmuhealth.platform.report.v1.GetReportRequest.ModuleAnswersEntry
	nil,                              // 19: jinmuhealth.platform.report.v1.GetReportRequest.ExtrasEntry
	nil,                              // 20: jinmuhealth.platform.report.v1.GetReportResponse.ModuleQuestionsEntry
	nil,                              // 21: jinmuhealth.platform.report.v1.GetReportResponse.MetadataEntry
	(*PulseTestOptions)(nil),         // 22: jinmuhealth.platform.report.v1.PulseTestOptions
	(*SubjectProfile)(nil),           // 23: jinmuhealth.platform.report.v1.SubjectProfile
	(*SamplePayload)(nil),            // 24: jinmuhealth.platform.report.v1.SamplePayload
	(*ReportModuleInput)(nil),        // 25: jinmuhealth.platform.report.v1.ReportModuleInput
	(*ReportTemplateParams)(nil),     // 26: jinmuhealth.platform.report.v1.ReportTemplateParams
	(*ReportContent)(nil),            // 27: jinmuhealth.platform.report.v1.ReportContent
	(*CData)(nil),                    // 28: jinmuhealth.platform.report.v1.CData
	(*timestamppb.Timestamp)(nil),    // 29: google.protobuf.Timestamp
	(*SearchReportItem)(nil),         // 30: jinmuhealth.platform.report.v1.SearchReportItem
	(*WeeklyTrend)(nil),              // 31: jinmuhealth.platform.report.v1.WeeklyTrend
	(*MonthlyTrend)(nil),             // 32: jinmuhealth.platform.report.v1.MonthlyTrend
	(*AnswerList)(nil),               // 33: jinmuhealth.platform.report.v1.AnswerList
	(*QuestionList)(nil),             // 34: jinmuhealth.platform.report.v1.QuestionList
}
var file_jinmuhealth_platform_report_v1_report_api_proto_depIdxs = []int32{
	22, // 0: jinmuhealth.platform.report.v1.SubmitPulseTestRequest.options:type_name -> jinmuhealth.platform.report.v1.PulseTestOptions
	23, // 1: jinmuhealth.platform.report.v1.SubmitPulseTestRequest.subject:type_name -> jinmuhealth.platform.report.v1.SubjectProfile
	24, // 2: jinmuhealth.platform.report.v1.SubmitPulseTestRequest.payload:type_name -> jinmuhealth.platform.report.v1.SamplePayload
	16, // 3: jinmuhealth.platform.report.v1.SubmitPulseTestRequest.metadata:type_name -> jinmuhealth.platform.report.v1.SubmitPulseTestRequest.MetadataEntry
	17, // 4: jinmuhealth.platform.report.v1.SubmitPulseTestResponse.metadata:type_name -> jinmuhealth.platform.report.v1.SubmitPulseTestResponse.MetadataEntry
	25, // 5: jinmuhealth.platform.report.v1.GetReportRequest.requested_module_inputs:type_name -> jinmuhealth.platform.report.v1.ReportModuleInput
	18, // 6: jinmuhealth.platform.report.v1.GetReportRequest.module_answers:type_name -> jinmuhealth.platform.report.v1.GetReportRequest.ModuleAnswersEntry
	26, // 7: jinmuhealth.platform.report.v1.GetReportRequest.template_params:type_name -> jinmuhealth.platform.report.v1.ReportTemplateParams
	19, // 8: jinmuhealth.platform.report.v1.GetReportRequest.extras:type_name -> jinmuhealth.platform.report.v1.GetReportRequest.ExtrasEntry
	20, // 9: jinmuhealth.platform.report.v1.GetReportResponse.module_questions:type_name -> jinmuhealth.platform.report.v1.GetReportResponse.ModuleQuestionsEntry
	27, // 10: jinmuhealth.platform.report.v1.GetReportResponse.report:type_name -> jinmuhealth.platform.report.v1.ReportContent
	28, // 11: jinmuhealth.platform.report.v1.GetReportResponse.c_data:type_name -> jinmuhealth.platform.report.v1.CData
	21, // 12: jinmuhealth.platform.report.v1.GetReportResponse.metadata:type_name -> jinmuhealth.platform.report.v1.GetReportResponse.MetadataEntry
	29, // 13: jinmuhealth.platform.report.v1.SearchReportsRequest.start_time:type_name -> google.protobuf.Timestamp
	29, // 14: jinmuhealth.platform.report.v1.SearchReportsRequest.end_time:type_name -> google.protobuf.Timestamp
	30, // 15: jinmuhealth.platform.report.v1.SearchReportsResponse.items:type_name -> jinmuhealth.platform.report.v1.SearchReportItem
	31, // 16: jinmuhealth.platform.report.v1.GetWeeklyTrendResponse.weekly_trend:type_name -> jinmuhealth.platform.report.v1.WeeklyTrend
	32, // 17: jinmuhealth.platform.report.v1.GetMonthlyTrendResponse.monthly_trend:type_name -> jinmuhealth.platform.report.v1.MonthlyTrend
	26, // 18: jinmuhealth.platform.report.v1.GetWeeklyReportRequest.template_params:type_name -> jinmuhealth.platform.report.v1.ReportTemplateParams
	27, // 19: jinmuhealth.platform.report.v1.GetWeeklyReportResponse.report:type_name -> jinmuhealth.platform.report.v1.ReportContent
	29, // 20: jinmuhealth.platform.report.v1.GetWeeklyReportResponse.start_time:type_name -> google.protobuf.Timestamp
	29, // 21: jinmuhealth.platform.report.v1.GetWeeklyReportResponse.end_time:type_name -> google.protobuf.Timestamp
	26, // 22: jinmuhealth.platform.report.v1.GetMonthlyReportRequest.template_params:type_name -> jinmuhealth.platform.report.v1.ReportTemplateParams
	27, // 23: jinmuhealth.platform.report.v1.GetMonthlyReportResponse.report:type_name -> jinmuhealth.platform.report.v1.ReportContent
	29, // 24: jinmuhealth.platform.report.v1.GetMonthlyReportResponse.start_time:type_name -> google.protobuf.Timestamp
	29, // 25: jinmuhealth.platform.report.v1.GetMonthlyReportResponse.end_time:type_name -> google.protobuf.Timestamp
	33, // 26: jinmuhealth.platform.report.v1.GetReportRequest.ModuleAnswersEntry.value:type_name -> jinmuhealth.platform.report.v1.AnswerList
	34, // 27: jinmuhealth.platform.report.v1.GetReportResponse.ModuleQuestionsEntry.value:type_name -> jinmuhealth.platform.report.v1.QuestionList
	0,  // 28: jinmuhealth.platform.report.v1.ReportAPI.SubmitPulseTest:input_type -> jinmuhealth.platform.report.v1.SubmitPulseTestRequest
	2,  // 29: jinmuhealth.platform.report.v1.ReportAPI.GetRawData:input_type -> jinmuhealth.platform.report.v1.GetRawDataRequest
	4,  // 30: jinmuhealth.platform.report.v1.ReportAPI.GetReport:input_type -> jinmuhealth.platform.report.v1.GetReportRequest
	6,  // 31: jinmuhealth.platform.report.v1.ReportAPI.SearchReports:input_type -> jinmuhealth.platform.report.v1.SearchReportsRequest
	8,  // 32: jinmuhealth.platform.report.v1.ReportAPI.GetWeeklyTrend:input_type -> jinmuhealth.platform.report.v1.GetWeeklyTrendRequest
	10, // 33: jinmuhealth.platform.report.v1.ReportAPI.GetMonthlyTrend:input_type -> jinmuhealth.platform.report.v1.GetMonthlyTrendRequest
	12, // 34: jinmuhealth.platform.report.v1.ReportAPI.GetWeeklyReport:input_type -> jinmuhealth.platform.report.v1.GetWeeklyReportRequest
	14, // 35: jinmuhealth.platform.report.v1.ReportAPI.GetMonthlyReport:input_type -> jinmuhealth.platform.report.v1.GetMonthlyReportRequest
	1,  // 36: jinmuhealth.platform.report.v1.ReportAPI.SubmitPulseTest:output_type -> jinmuhealth.platform.report.v1.SubmitPulseTestResponse
	3,  // 37: jinmuhealth.platform.report.v1.ReportAPI.GetRawData:output_type -> jinmuhealth.platform.report.v1.GetRawDataResponse
	5,  // 38: jinmuhealth.platform.report.v1.ReportAPI.GetReport:output_type -> jinmuhealth.platform.report.v1.GetReportResponse
	7,  // 39: jinmuhealth.platform.report.v1.ReportAPI.SearchReports:output_type -> jinmuhealth.platform.report.v1.SearchReportsResponse
	9,  // 40: jinmuhealth.platform.report.v1.ReportAPI.GetWeeklyTrend:output_type -> jinmuhealth.platform.report.v1.GetWeeklyTrendResponse
	11, // 41: jinmuhealth.platform.report.v1.ReportAPI.GetMonthlyTrend:output_type -> jinmuhealth.platform.report.v1.GetMonthlyTrendResponse
	13, // 42: jinmuhealth.platform.report.v1.ReportAPI.GetWeeklyReport:output_type -> jinmuhealth.platform.report.v1.GetWeeklyReportResponse
	15, // 43: jinmuhealth.platform.report.v1.ReportAPI.GetMonthlyReport:output_type -> jinmuhealth.platform.report.v1.GetMonthlyReportResponse
	36, // [36:44] is the sub-list for method output_type
	28, // [28:36] is the sub-list for method input_type
	28, // [28:28] is the sub-list for extension type_name
	28, // [28:28] is the sub-list for extension extendee
	0,  // [0:28] is the sub-list for field type_name
}

func init() { file_jinmuhealth_platform_report_v1_report_api_proto_init() }
func file_jinmuhealth_platform_report_v1_report_api_proto_init() {
	if File_jinmuhealth_platform_report_v1_report_api_proto != nil {
		return
	}
	file_jinmuhealth_platform_report_v1_report_proto_init()
	file_jinmuhealth_platform_report_v1_trend_proto_init()
	file_jinmuhealth_platform_report_v1_report_modules_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_jinmuhealth_platform_report_v1_report_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitPulseTestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jinmuhealth_platform_report_v1_report_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitPulseTestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jinmuhealth_platform_report_v1_report_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRawDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jinmuhealth_platform_report_v1_report_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRawDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jinmuhealth_platform_report_v1_report_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jinmuhealth_platform_report_v1_report_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jinmuhealth_platform_report_v1_report_api_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchReportsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jinmuhealth_platform_report_v1_report_api_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchReportsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jinmuhealth_platform_report_v1_report_api_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWeeklyTrendRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jinmuhealth_platform_report_v1_report_api_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWeeklyTrendResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jinmuhealth_platform_report_v1_report_api_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMonthlyTrendRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jinmuhealth_platform_report_v1_report_api_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMonthlyTrendResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jinmuhealth_platform_report_v1_report_api_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWeeklyReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jinmuhealth_platform_report_v1_report_api_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWeeklyReportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jinmuhealth_platform_report_v1_report_api_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMonthlyReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jinmuhealth_platform_report_v1_report_api_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMonthlyReportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_jinmuhealth_platform_report_v1_report_api_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_jinmuhealth_platform_report_v1_report_api_proto_goTypes,
		DependencyIndexes: file_jinmuhealth_platform_report_v1_report_api_proto_depIdxs,
		MessageInfos:      file_jinmuhealth_platform_report_v1_report_api_proto_msgTypes,
	}.Build()
	File_jinmuhealth_platform_report_v1_report_api_proto = out.File
	file_jinmuhealth_platform_report_v1_report_api_proto_rawDesc = nil
	file_jinmuhealth_platform_report_v1_report_api_proto_goTypes = nil
	file_jinmuhealth_platform_report_v1_report_api_proto_depIdxs = nil
}
