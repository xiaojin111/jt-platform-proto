// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: jinmuhealth/platform/report/v1/report_api.proto

package reportv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// Validate checks the field values on SubmitPulseTestRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SubmitPulseTestRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AppId

	if v, ok := interface{}(m.GetOptions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SubmitPulseTestRequestValidationError{
				field:  "Options",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetSubject()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SubmitPulseTestRequestValidationError{
				field:  "Subject",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPayload()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SubmitPulseTestRequestValidationError{
				field:  "Payload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Metadata

	return nil
}

// SubmitPulseTestRequestValidationError is the validation error returned by
// SubmitPulseTestRequest.Validate if the designated constraints aren't met.
type SubmitPulseTestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubmitPulseTestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubmitPulseTestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubmitPulseTestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubmitPulseTestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubmitPulseTestRequestValidationError) ErrorName() string {
	return "SubmitPulseTestRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SubmitPulseTestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubmitPulseTestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubmitPulseTestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubmitPulseTestRequestValidationError{}

// Validate checks the field values on SubmitPulseTestResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SubmitPulseTestResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for PulseTestId

	// no validation rules for Metadata

	return nil
}

// SubmitPulseTestResponseValidationError is the validation error returned by
// SubmitPulseTestResponse.Validate if the designated constraints aren't met.
type SubmitPulseTestResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubmitPulseTestResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubmitPulseTestResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubmitPulseTestResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubmitPulseTestResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubmitPulseTestResponseValidationError) ErrorName() string {
	return "SubmitPulseTestResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SubmitPulseTestResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubmitPulseTestResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubmitPulseTestResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubmitPulseTestResponseValidationError{}

// Validate checks the field values on GetRawDataRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetRawDataRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AppId

	// no validation rules for PulseTestId

	// no validation rules for ExpectedCount

	return nil
}

// GetRawDataRequestValidationError is the validation error returned by
// GetRawDataRequest.Validate if the designated constraints aren't met.
type GetRawDataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRawDataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRawDataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRawDataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRawDataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRawDataRequestValidationError) ErrorName() string {
	return "GetRawDataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetRawDataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRawDataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRawDataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRawDataRequestValidationError{}

// Validate checks the field values on GetRawDataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetRawDataResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for SampleRate

	return nil
}

// GetRawDataResponseValidationError is the validation error returned by
// GetRawDataResponse.Validate if the designated constraints aren't met.
type GetRawDataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRawDataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRawDataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRawDataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRawDataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRawDataResponseValidationError) ErrorName() string {
	return "GetRawDataResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetRawDataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRawDataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRawDataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRawDataResponseValidationError{}

// Validate checks the field values on GetReportRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetReportRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AppId

	// no validation rules for PulseTestId

	// no validation rules for ReportId

	for idx, item := range m.GetRequestedModuleInputs() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetReportRequestValidationError{
					field:  fmt.Sprintf("RequestedModuleInputs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for key, val := range m.GetModuleAnswers() {
		_ = val

		// no validation rules for ModuleAnswers[key]

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetReportRequestValidationError{
					field:  fmt.Sprintf("ModuleAnswers[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetTemplateParams()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetReportRequestValidationError{
				field:  "TemplateParams",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Extras

	return nil
}

// GetReportRequestValidationError is the validation error returned by
// GetReportRequest.Validate if the designated constraints aren't met.
type GetReportRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetReportRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetReportRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetReportRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetReportRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetReportRequestValidationError) ErrorName() string { return "GetReportRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetReportRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetReportRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetReportRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetReportRequestValidationError{}

// Validate checks the field values on GetReportResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetReportResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ReportId

	// no validation rules for IsCompleteReport

	// no validation rules for HasQuestions

	for key, val := range m.GetModuleQuestions() {
		_ = val

		// no validation rules for ModuleQuestions[key]

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetReportResponseValidationError{
					field:  fmt.Sprintf("ModuleQuestions[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetReport()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetReportResponseValidationError{
				field:  "Report",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetReportResponseValidationError{
				field:  "CData",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Metadata

	return nil
}

// GetReportResponseValidationError is the validation error returned by
// GetReportResponse.Validate if the designated constraints aren't met.
type GetReportResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetReportResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetReportResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetReportResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetReportResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetReportResponseValidationError) ErrorName() string {
	return "GetReportResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetReportResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetReportResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetReportResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetReportResponseValidationError{}

// Validate checks the field values on SearchReportsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SearchReportsRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AppId

	// no validation rules for UserId

	if v, ok := interface{}(m.GetStartTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SearchReportsRequestValidationError{
				field:  "StartTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetEndTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SearchReportsRequestValidationError{
				field:  "EndTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for PageOffset

	// no validation rules for PageSize

	return nil
}

// SearchReportsRequestValidationError is the validation error returned by
// SearchReportsRequest.Validate if the designated constraints aren't met.
type SearchReportsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchReportsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchReportsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchReportsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchReportsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchReportsRequestValidationError) ErrorName() string {
	return "SearchReportsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SearchReportsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchReportsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchReportsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchReportsRequestValidationError{}

// Validate checks the field values on SearchReportsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SearchReportsResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchReportsResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// SearchReportsResponseValidationError is the validation error returned by
// SearchReportsResponse.Validate if the designated constraints aren't met.
type SearchReportsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchReportsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchReportsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchReportsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchReportsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchReportsResponseValidationError) ErrorName() string {
	return "SearchReportsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SearchReportsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchReportsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchReportsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchReportsResponseValidationError{}

// Validate checks the field values on GetWeeklyTrendRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetWeeklyTrendRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AppId

	// no validation rules for UserId

	return nil
}

// GetWeeklyTrendRequestValidationError is the validation error returned by
// GetWeeklyTrendRequest.Validate if the designated constraints aren't met.
type GetWeeklyTrendRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWeeklyTrendRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWeeklyTrendRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWeeklyTrendRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWeeklyTrendRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWeeklyTrendRequestValidationError) ErrorName() string {
	return "GetWeeklyTrendRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetWeeklyTrendRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWeeklyTrendRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWeeklyTrendRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWeeklyTrendRequestValidationError{}

// Validate checks the field values on GetWeeklyTrendResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetWeeklyTrendResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetWeeklyTrend()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetWeeklyTrendResponseValidationError{
				field:  "WeeklyTrend",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetWeeklyTrendResponseValidationError is the validation error returned by
// GetWeeklyTrendResponse.Validate if the designated constraints aren't met.
type GetWeeklyTrendResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWeeklyTrendResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWeeklyTrendResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWeeklyTrendResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWeeklyTrendResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWeeklyTrendResponseValidationError) ErrorName() string {
	return "GetWeeklyTrendResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetWeeklyTrendResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWeeklyTrendResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWeeklyTrendResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWeeklyTrendResponseValidationError{}

// Validate checks the field values on GetMonthlyTrendRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetMonthlyTrendRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AppId

	// no validation rules for UserId

	return nil
}

// GetMonthlyTrendRequestValidationError is the validation error returned by
// GetMonthlyTrendRequest.Validate if the designated constraints aren't met.
type GetMonthlyTrendRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMonthlyTrendRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMonthlyTrendRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMonthlyTrendRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMonthlyTrendRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMonthlyTrendRequestValidationError) ErrorName() string {
	return "GetMonthlyTrendRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetMonthlyTrendRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMonthlyTrendRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMonthlyTrendRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMonthlyTrendRequestValidationError{}

// Validate checks the field values on GetMonthlyTrendResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetMonthlyTrendResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetMonthlyTrend()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetMonthlyTrendResponseValidationError{
				field:  "MonthlyTrend",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetMonthlyTrendResponseValidationError is the validation error returned by
// GetMonthlyTrendResponse.Validate if the designated constraints aren't met.
type GetMonthlyTrendResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMonthlyTrendResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMonthlyTrendResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMonthlyTrendResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMonthlyTrendResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMonthlyTrendResponseValidationError) ErrorName() string {
	return "GetMonthlyTrendResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetMonthlyTrendResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMonthlyTrendResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMonthlyTrendResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMonthlyTrendResponseValidationError{}

// Validate checks the field values on GetWeeklyReportRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetWeeklyReportRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AppId

	// no validation rules for UserId

	// no validation rules for LanguageCode

	if v, ok := interface{}(m.GetTemplateParams()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetWeeklyReportRequestValidationError{
				field:  "TemplateParams",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetWeeklyReportRequestValidationError is the validation error returned by
// GetWeeklyReportRequest.Validate if the designated constraints aren't met.
type GetWeeklyReportRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWeeklyReportRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWeeklyReportRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWeeklyReportRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWeeklyReportRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWeeklyReportRequestValidationError) ErrorName() string {
	return "GetWeeklyReportRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetWeeklyReportRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWeeklyReportRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWeeklyReportRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWeeklyReportRequestValidationError{}

// Validate checks the field values on GetWeeklyReportResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetWeeklyReportResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetReport()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetWeeklyReportResponseValidationError{
				field:  "Report",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetStartTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetWeeklyReportResponseValidationError{
				field:  "StartTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetEndTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetWeeklyReportResponseValidationError{
				field:  "EndTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetWeeklyReportResponseValidationError is the validation error returned by
// GetWeeklyReportResponse.Validate if the designated constraints aren't met.
type GetWeeklyReportResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWeeklyReportResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWeeklyReportResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWeeklyReportResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWeeklyReportResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWeeklyReportResponseValidationError) ErrorName() string {
	return "GetWeeklyReportResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetWeeklyReportResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWeeklyReportResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWeeklyReportResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWeeklyReportResponseValidationError{}

// Validate checks the field values on GetMonthlyReportRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetMonthlyReportRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AppId

	// no validation rules for UserId

	// no validation rules for LanguageCode

	if v, ok := interface{}(m.GetTemplateParams()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetMonthlyReportRequestValidationError{
				field:  "TemplateParams",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetMonthlyReportRequestValidationError is the validation error returned by
// GetMonthlyReportRequest.Validate if the designated constraints aren't met.
type GetMonthlyReportRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMonthlyReportRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMonthlyReportRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMonthlyReportRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMonthlyReportRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMonthlyReportRequestValidationError) ErrorName() string {
	return "GetMonthlyReportRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetMonthlyReportRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMonthlyReportRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMonthlyReportRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMonthlyReportRequestValidationError{}

// Validate checks the field values on GetMonthlyReportResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetMonthlyReportResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetReport()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetMonthlyReportResponseValidationError{
				field:  "Report",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetStartTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetMonthlyReportResponseValidationError{
				field:  "StartTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetEndTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetMonthlyReportResponseValidationError{
				field:  "EndTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetMonthlyReportResponseValidationError is the validation error returned by
// GetMonthlyReportResponse.Validate if the designated constraints aren't met.
type GetMonthlyReportResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMonthlyReportResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMonthlyReportResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMonthlyReportResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMonthlyReportResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMonthlyReportResponseValidationError) ErrorName() string {
	return "GetMonthlyReportResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetMonthlyReportResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMonthlyReportResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMonthlyReportResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMonthlyReportResponseValidationError{}
