// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: jthealth/biz/user/v1/jing_tong_order_api.proto

package userv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 获取用户剩余测量次数请求
type JingTongMeasurementCountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *JingTongMeasurementCountRequest) Reset() {
	*x = JingTongMeasurementCountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jthealth_biz_user_v1_jing_tong_order_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JingTongMeasurementCountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JingTongMeasurementCountRequest) ProtoMessage() {}

func (x *JingTongMeasurementCountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jthealth_biz_user_v1_jing_tong_order_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JingTongMeasurementCountRequest.ProtoReflect.Descriptor instead.
func (*JingTongMeasurementCountRequest) Descriptor() ([]byte, []int) {
	return file_jthealth_biz_user_v1_jing_tong_order_api_proto_rawDescGZIP(), []int{0}
}

func (x *JingTongMeasurementCountRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

// 获取用户剩余测量次数响应
type JingTongMeasurementCountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count int32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *JingTongMeasurementCountResponse) Reset() {
	*x = JingTongMeasurementCountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jthealth_biz_user_v1_jing_tong_order_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JingTongMeasurementCountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JingTongMeasurementCountResponse) ProtoMessage() {}

func (x *JingTongMeasurementCountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jthealth_biz_user_v1_jing_tong_order_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JingTongMeasurementCountResponse.ProtoReflect.Descriptor instead.
func (*JingTongMeasurementCountResponse) Descriptor() ([]byte, []int) {
	return file_jthealth_biz_user_v1_jing_tong_order_api_proto_rawDescGZIP(), []int{1}
}

func (x *JingTongMeasurementCountResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

// 获取用户openId请求
type JingTongGetWxMiniProOpenIdByCodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Code   string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *JingTongGetWxMiniProOpenIdByCodeRequest) Reset() {
	*x = JingTongGetWxMiniProOpenIdByCodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jthealth_biz_user_v1_jing_tong_order_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JingTongGetWxMiniProOpenIdByCodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JingTongGetWxMiniProOpenIdByCodeRequest) ProtoMessage() {}

func (x *JingTongGetWxMiniProOpenIdByCodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jthealth_biz_user_v1_jing_tong_order_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JingTongGetWxMiniProOpenIdByCodeRequest.ProtoReflect.Descriptor instead.
func (*JingTongGetWxMiniProOpenIdByCodeRequest) Descriptor() ([]byte, []int) {
	return file_jthealth_biz_user_v1_jing_tong_order_api_proto_rawDescGZIP(), []int{2}
}

func (x *JingTongGetWxMiniProOpenIdByCodeRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *JingTongGetWxMiniProOpenIdByCodeRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

// 获取用户openId响应
type JingTongGetWxMiniProOpenIdByCodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpenId string `protobuf:"bytes,1,opt,name=open_id,json=openId,proto3" json:"open_id,omitempty"`
}

func (x *JingTongGetWxMiniProOpenIdByCodeResponse) Reset() {
	*x = JingTongGetWxMiniProOpenIdByCodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jthealth_biz_user_v1_jing_tong_order_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JingTongGetWxMiniProOpenIdByCodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JingTongGetWxMiniProOpenIdByCodeResponse) ProtoMessage() {}

func (x *JingTongGetWxMiniProOpenIdByCodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jthealth_biz_user_v1_jing_tong_order_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JingTongGetWxMiniProOpenIdByCodeResponse.ProtoReflect.Descriptor instead.
func (*JingTongGetWxMiniProOpenIdByCodeResponse) Descriptor() ([]byte, []int) {
	return file_jthealth_biz_user_v1_jing_tong_order_api_proto_rawDescGZIP(), []int{3}
}

func (x *JingTongGetWxMiniProOpenIdByCodeResponse) GetOpenId() string {
	if x != nil {
		return x.OpenId
	}
	return ""
}

// 创建订单请求
type JingTongCreateOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 用户ID
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// 微信小程序openid
	OpenId string `protobuf:"bytes,2,opt,name=open_id,json=openId,proto3" json:"open_id,omitempty"`
}

func (x *JingTongCreateOrderRequest) Reset() {
	*x = JingTongCreateOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jthealth_biz_user_v1_jing_tong_order_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JingTongCreateOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JingTongCreateOrderRequest) ProtoMessage() {}

func (x *JingTongCreateOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jthealth_biz_user_v1_jing_tong_order_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JingTongCreateOrderRequest.ProtoReflect.Descriptor instead.
func (*JingTongCreateOrderRequest) Descriptor() ([]byte, []int) {
	return file_jthealth_biz_user_v1_jing_tong_order_api_proto_rawDescGZIP(), []int{4}
}

func (x *JingTongCreateOrderRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *JingTongCreateOrderRequest) GetOpenId() string {
	if x != nil {
		return x.OpenId
	}
	return ""
}

// 创建订单响应
type JingTongCreateOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 系统订单号
	OrderId   string `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	AppId     string `protobuf:"bytes,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	PartnerId string `protobuf:"bytes,3,opt,name=partner_id,json=partnerId,proto3" json:"partner_id,omitempty"`
	PrepayId  string `protobuf:"bytes,4,opt,name=prepay_id,json=prepayId,proto3" json:"prepay_id,omitempty"`
	//暂填写固定值Sign=WXPay
	Package    string `protobuf:"bytes,5,opt,name=package,proto3" json:"package,omitempty"`
	NonceStr   string `protobuf:"bytes,6,opt,name=nonce_str,json=nonceStr,proto3" json:"nonce_str,omitempty"`
	Timestamp  string `protobuf:"bytes,7,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Sign       string `protobuf:"bytes,8,opt,name=sign,proto3" json:"sign,omitempty"`
	WxOrderUrl string `protobuf:"bytes,9,opt,name=wx_order_url,json=wxOrderUrl,proto3" json:"wx_order_url,omitempty"`
}

func (x *JingTongCreateOrderResponse) Reset() {
	*x = JingTongCreateOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jthealth_biz_user_v1_jing_tong_order_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JingTongCreateOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JingTongCreateOrderResponse) ProtoMessage() {}

func (x *JingTongCreateOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jthealth_biz_user_v1_jing_tong_order_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JingTongCreateOrderResponse.ProtoReflect.Descriptor instead.
func (*JingTongCreateOrderResponse) Descriptor() ([]byte, []int) {
	return file_jthealth_biz_user_v1_jing_tong_order_api_proto_rawDescGZIP(), []int{5}
}

func (x *JingTongCreateOrderResponse) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *JingTongCreateOrderResponse) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *JingTongCreateOrderResponse) GetPartnerId() string {
	if x != nil {
		return x.PartnerId
	}
	return ""
}

func (x *JingTongCreateOrderResponse) GetPrepayId() string {
	if x != nil {
		return x.PrepayId
	}
	return ""
}

func (x *JingTongCreateOrderResponse) GetPackage() string {
	if x != nil {
		return x.Package
	}
	return ""
}

func (x *JingTongCreateOrderResponse) GetNonceStr() string {
	if x != nil {
		return x.NonceStr
	}
	return ""
}

func (x *JingTongCreateOrderResponse) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *JingTongCreateOrderResponse) GetSign() string {
	if x != nil {
		return x.Sign
	}
	return ""
}

func (x *JingTongCreateOrderResponse) GetWxOrderUrl() string {
	if x != nil {
		return x.WxOrderUrl
	}
	return ""
}

// 微信支付通知请求
type JingTongNotifyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Body    string `protobuf:"bytes,1,opt,name=body,proto3" json:"body,omitempty"`
	Headers string `protobuf:"bytes,2,opt,name=headers,proto3" json:"headers,omitempty"`
}

func (x *JingTongNotifyRequest) Reset() {
	*x = JingTongNotifyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jthealth_biz_user_v1_jing_tong_order_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JingTongNotifyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JingTongNotifyRequest) ProtoMessage() {}

func (x *JingTongNotifyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jthealth_biz_user_v1_jing_tong_order_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JingTongNotifyRequest.ProtoReflect.Descriptor instead.
func (*JingTongNotifyRequest) Descriptor() ([]byte, []int) {
	return file_jthealth_biz_user_v1_jing_tong_order_api_proto_rawDescGZIP(), []int{6}
}

func (x *JingTongNotifyRequest) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

func (x *JingTongNotifyRequest) GetHeaders() string {
	if x != nil {
		return x.Headers
	}
	return ""
}

// 微信支付通知响应
type JingTongNotifyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *JingTongNotifyResponse) Reset() {
	*x = JingTongNotifyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jthealth_biz_user_v1_jing_tong_order_api_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JingTongNotifyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JingTongNotifyResponse) ProtoMessage() {}

func (x *JingTongNotifyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jthealth_biz_user_v1_jing_tong_order_api_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JingTongNotifyResponse.ProtoReflect.Descriptor instead.
func (*JingTongNotifyResponse) Descriptor() ([]byte, []int) {
	return file_jthealth_biz_user_v1_jing_tong_order_api_proto_rawDescGZIP(), []int{7}
}

// 获取订单列表请求
type JingTongGetOrderListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNum  int32  `protobuf:"varint,1,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`
	PageSize int32  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	UserId   string `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	OrderId  string `protobuf:"bytes,4,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
}

func (x *JingTongGetOrderListRequest) Reset() {
	*x = JingTongGetOrderListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jthealth_biz_user_v1_jing_tong_order_api_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JingTongGetOrderListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JingTongGetOrderListRequest) ProtoMessage() {}

func (x *JingTongGetOrderListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jthealth_biz_user_v1_jing_tong_order_api_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JingTongGetOrderListRequest.ProtoReflect.Descriptor instead.
func (*JingTongGetOrderListRequest) Descriptor() ([]byte, []int) {
	return file_jthealth_biz_user_v1_jing_tong_order_api_proto_rawDescGZIP(), []int{8}
}

func (x *JingTongGetOrderListRequest) GetPageNum() int32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *JingTongGetOrderListRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *JingTongGetOrderListRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *JingTongGetOrderListRequest) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

// 获取订单列表响应
type JingTongGetOrderListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNum  int32 `protobuf:"varint,1,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Total    int32 `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	//用户列表
	List []*JingTongOrderMsg `protobuf:"bytes,4,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *JingTongGetOrderListResponse) Reset() {
	*x = JingTongGetOrderListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jthealth_biz_user_v1_jing_tong_order_api_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JingTongGetOrderListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JingTongGetOrderListResponse) ProtoMessage() {}

func (x *JingTongGetOrderListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jthealth_biz_user_v1_jing_tong_order_api_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JingTongGetOrderListResponse.ProtoReflect.Descriptor instead.
func (*JingTongGetOrderListResponse) Descriptor() ([]byte, []int) {
	return file_jthealth_biz_user_v1_jing_tong_order_api_proto_rawDescGZIP(), []int{9}
}

func (x *JingTongGetOrderListResponse) GetPageNum() int32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *JingTongGetOrderListResponse) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *JingTongGetOrderListResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *JingTongGetOrderListResponse) GetList() []*JingTongOrderMsg {
	if x != nil {
		return x.List
	}
	return nil
}

type JingTongOrderMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 系统订单号
	OrderId string `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	//支付金额
	Price float64 `protobuf:"fixed64,2,opt,name=price,proto3" json:"price,omitempty"`
	//支付时间
	PayTime string `protobuf:"bytes,3,opt,name=pay_time,json=payTime,proto3" json:"pay_time,omitempty"`
	//手机号
	Phone string `protobuf:"bytes,4,opt,name=phone,proto3" json:"phone,omitempty"`
}

func (x *JingTongOrderMsg) Reset() {
	*x = JingTongOrderMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jthealth_biz_user_v1_jing_tong_order_api_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JingTongOrderMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JingTongOrderMsg) ProtoMessage() {}

func (x *JingTongOrderMsg) ProtoReflect() protoreflect.Message {
	mi := &file_jthealth_biz_user_v1_jing_tong_order_api_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JingTongOrderMsg.ProtoReflect.Descriptor instead.
func (*JingTongOrderMsg) Descriptor() ([]byte, []int) {
	return file_jthealth_biz_user_v1_jing_tong_order_api_proto_rawDescGZIP(), []int{10}
}

func (x *JingTongOrderMsg) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *JingTongOrderMsg) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *JingTongOrderMsg) GetPayTime() string {
	if x != nil {
		return x.PayTime
	}
	return ""
}

func (x *JingTongOrderMsg) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

// 首页订单统计请求
type JingTongOrderStatisticalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *JingTongOrderStatisticalRequest) Reset() {
	*x = JingTongOrderStatisticalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jthealth_biz_user_v1_jing_tong_order_api_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JingTongOrderStatisticalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JingTongOrderStatisticalRequest) ProtoMessage() {}

func (x *JingTongOrderStatisticalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jthealth_biz_user_v1_jing_tong_order_api_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JingTongOrderStatisticalRequest.ProtoReflect.Descriptor instead.
func (*JingTongOrderStatisticalRequest) Descriptor() ([]byte, []int) {
	return file_jthealth_biz_user_v1_jing_tong_order_api_proto_rawDescGZIP(), []int{11}
}

// 首页订单统计响应
type JingTongOrderStatisticalResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Yesterday float64 `protobuf:"fixed64,1,opt,name=yesterday,proto3" json:"yesterday,omitempty"`
	Month     float64 `protobuf:"fixed64,2,opt,name=month,proto3" json:"month,omitempty"`
	Year      float64 `protobuf:"fixed64,3,opt,name=year,proto3" json:"year,omitempty"`
}

func (x *JingTongOrderStatisticalResponse) Reset() {
	*x = JingTongOrderStatisticalResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jthealth_biz_user_v1_jing_tong_order_api_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JingTongOrderStatisticalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JingTongOrderStatisticalResponse) ProtoMessage() {}

func (x *JingTongOrderStatisticalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jthealth_biz_user_v1_jing_tong_order_api_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JingTongOrderStatisticalResponse.ProtoReflect.Descriptor instead.
func (*JingTongOrderStatisticalResponse) Descriptor() ([]byte, []int) {
	return file_jthealth_biz_user_v1_jing_tong_order_api_proto_rawDescGZIP(), []int{12}
}

func (x *JingTongOrderStatisticalResponse) GetYesterday() float64 {
	if x != nil {
		return x.Yesterday
	}
	return 0
}

func (x *JingTongOrderStatisticalResponse) GetMonth() float64 {
	if x != nil {
		return x.Month
	}
	return 0
}

func (x *JingTongOrderStatisticalResponse) GetYear() float64 {
	if x != nil {
		return x.Year
	}
	return 0
}

// 后台获取订单列表请求
type JingTongBGGetOrderListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Phone     string `protobuf:"bytes,1,opt,name=phone,proto3" json:"phone,omitempty"`
	StartTime int64  `protobuf:"varint,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime   int64  `protobuf:"varint,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	PageNum   int32  `protobuf:"varint,4,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`
	PageSize  int32  `protobuf:"varint,5,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
}

func (x *JingTongBGGetOrderListRequest) Reset() {
	*x = JingTongBGGetOrderListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jthealth_biz_user_v1_jing_tong_order_api_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JingTongBGGetOrderListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JingTongBGGetOrderListRequest) ProtoMessage() {}

func (x *JingTongBGGetOrderListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jthealth_biz_user_v1_jing_tong_order_api_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JingTongBGGetOrderListRequest.ProtoReflect.Descriptor instead.
func (*JingTongBGGetOrderListRequest) Descriptor() ([]byte, []int) {
	return file_jthealth_biz_user_v1_jing_tong_order_api_proto_rawDescGZIP(), []int{13}
}

func (x *JingTongBGGetOrderListRequest) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *JingTongBGGetOrderListRequest) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *JingTongBGGetOrderListRequest) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *JingTongBGGetOrderListRequest) GetPageNum() int32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *JingTongBGGetOrderListRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

// 后台获取订单列表响应
type JingTongBGGetOrderListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNum     int32   `protobuf:"varint,1,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`
	PageSize    int32   `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Total       int32   `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	TotalAmount float64 `protobuf:"fixed64,4,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount,omitempty"`
	//用户列表
	List []*JingTongOrderMsg `protobuf:"bytes,5,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *JingTongBGGetOrderListResponse) Reset() {
	*x = JingTongBGGetOrderListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jthealth_biz_user_v1_jing_tong_order_api_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JingTongBGGetOrderListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JingTongBGGetOrderListResponse) ProtoMessage() {}

func (x *JingTongBGGetOrderListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jthealth_biz_user_v1_jing_tong_order_api_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JingTongBGGetOrderListResponse.ProtoReflect.Descriptor instead.
func (*JingTongBGGetOrderListResponse) Descriptor() ([]byte, []int) {
	return file_jthealth_biz_user_v1_jing_tong_order_api_proto_rawDescGZIP(), []int{14}
}

func (x *JingTongBGGetOrderListResponse) GetPageNum() int32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *JingTongBGGetOrderListResponse) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *JingTongBGGetOrderListResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *JingTongBGGetOrderListResponse) GetTotalAmount() float64 {
	if x != nil {
		return x.TotalAmount
	}
	return 0
}

func (x *JingTongBGGetOrderListResponse) GetList() []*JingTongOrderMsg {
	if x != nil {
		return x.List
	}
	return nil
}

var File_jthealth_biz_user_v1_jing_tong_order_api_proto protoreflect.FileDescriptor

var file_jthealth_biz_user_v1_jing_tong_order_api_proto_rawDesc = []byte{
	0x0a, 0x2e, 0x6a, 0x74, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2f, 0x62, 0x69, 0x7a, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x6a, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x6e, 0x67,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x14, 0x6a, 0x74, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x3a, 0x0a, 0x1f, 0x4a, 0x69, 0x6e, 0x67, 0x54,
	0x6f, 0x6e, 0x67, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x22, 0x38, 0x0a, 0x20, 0x4a, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x6e, 0x67, 0x4d,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x56, 0x0a,
	0x27, 0x4a, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x6e, 0x67, 0x47, 0x65, 0x74, 0x57, 0x78, 0x4d, 0x69,
	0x6e, 0x69, 0x50, 0x72, 0x6f, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x42, 0x79, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x43, 0x0a, 0x28, 0x4a, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x6e,
	0x67, 0x47, 0x65, 0x74, 0x57, 0x78, 0x4d, 0x69, 0x6e, 0x69, 0x50, 0x72, 0x6f, 0x4f, 0x70, 0x65,
	0x6e, 0x49, 0x64, 0x42, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x22, 0x4e, 0x0a, 0x1a, 0x4a, 0x69,
	0x6e, 0x67, 0x54, 0x6f, 0x6e, 0x67, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x22, 0x96, 0x02, 0x0a, 0x1b, 0x4a,
	0x69, 0x6e, 0x67, 0x54, 0x6f, 0x6e, 0x67, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70,
	0x72, 0x65, 0x70, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x72, 0x65, 0x70, 0x61, 0x79, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x72, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x67,
	0x6e, 0x12, 0x20, 0x0a, 0x0c, 0x77, 0x78, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x78, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x55, 0x72, 0x6c, 0x22, 0x45, 0x0a, 0x15, 0x4a, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x6e, 0x67, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x62, 0x6f, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79,
	0x12, 0x18, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x22, 0x18, 0x0a, 0x16, 0x4a, 0x69,
	0x6e, 0x67, 0x54, 0x6f, 0x6e, 0x67, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x89, 0x01, 0x0a, 0x1b, 0x4a, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x6e,
	0x67, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x22, 0xa8, 0x01, 0x0a, 0x1c, 0x4a, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x6e, 0x67, 0x47, 0x65, 0x74,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1b, 0x0a, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x3a, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x6a, 0x74, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4a, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x6e, 0x67, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x4d, 0x73, 0x67, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x74, 0x0a, 0x10, 0x4a,
	0x69, 0x6e, 0x67, 0x54, 0x6f, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x12,
	0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x22, 0x21, 0x0a, 0x1f, 0x4a, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x6e, 0x67, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x6a, 0x0a, 0x20, 0x4a, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x6e, 0x67,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x79, 0x65, 0x73, 0x74,
	0x65, 0x72, 0x64, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x79, 0x65, 0x73,
	0x74, 0x65, 0x72, 0x64, 0x61, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04,
	0x79, 0x65, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72,
	0x22, 0xa7, 0x01, 0x0a, 0x1d, 0x4a, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x6e, 0x67, 0x42, 0x47, 0x47,
	0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1b, 0x0a,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xcd, 0x01, 0x0a, 0x1e, 0x4a,
	0x69, 0x6e, 0x67, 0x54, 0x6f, 0x6e, 0x67, 0x42, 0x47, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3a,
	0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6a,
	0x74, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x4a, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x4d, 0x73, 0x67, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x32, 0xbc, 0x07, 0x0a, 0x10, 0x4a,
	0x69, 0x6e, 0x67, 0x54, 0x6f, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x50, 0x49, 0x12,
	0x89, 0x01, 0x0a, 0x18, 0x4a, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x6e, 0x67, 0x4d, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x35, 0x2e, 0x6a,
	0x74, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x4a, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x6e, 0x67, 0x4d, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x6a, 0x74, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x62,
	0x69, 0x7a, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4a, 0x69, 0x6e, 0x67, 0x54,
	0x6f, 0x6e, 0x67, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xa1, 0x01, 0x0a, 0x20,
	0x4a, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x6e, 0x67, 0x47, 0x65, 0x74, 0x57, 0x78, 0x4d, 0x69, 0x6e,
	0x69, 0x50, 0x72, 0x6f, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x42, 0x79, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x3d, 0x2e, 0x6a, 0x74, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x62, 0x69, 0x7a, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4a, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x6e, 0x67,
	0x47, 0x65, 0x74, 0x57, 0x78, 0x4d, 0x69, 0x6e, 0x69, 0x50, 0x72, 0x6f, 0x4f, 0x70, 0x65, 0x6e,
	0x49, 0x64, 0x42, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x3e, 0x2e, 0x6a, 0x74, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4a, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x6e, 0x67, 0x47,
	0x65, 0x74, 0x57, 0x78, 0x4d, 0x69, 0x6e, 0x69, 0x50, 0x72, 0x6f, 0x4f, 0x70, 0x65, 0x6e, 0x49,
	0x64, 0x42, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x7a, 0x0a, 0x13, 0x4a, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x6e, 0x67, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x30, 0x2e, 0x6a, 0x74, 0x68, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4a, 0x69,
	0x6e, 0x67, 0x54, 0x6f, 0x6e, 0x67, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6a, 0x74, 0x68, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x4a, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x6e, 0x67, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6b, 0x0a, 0x0e, 0x4a,
	0x69, 0x6e, 0x67, 0x54, 0x6f, 0x6e, 0x67, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x2b, 0x2e,
	0x6a, 0x74, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4a, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x6e, 0x67, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6a, 0x74, 0x68,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x4a, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x6e, 0x67, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7d, 0x0a, 0x14, 0x4a, 0x69, 0x6e, 0x67,
	0x54, 0x6f, 0x6e, 0x67, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x31, 0x2e, 0x6a, 0x74, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x62, 0x69, 0x7a, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4a, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x6e, 0x67,
	0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x6a, 0x74, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x62,
	0x69, 0x7a, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4a, 0x69, 0x6e, 0x67, 0x54,
	0x6f, 0x6e, 0x67, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x89, 0x01, 0x0a, 0x18, 0x4a, 0x69, 0x6e, 0x67,
	0x54, 0x6f, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x12, 0x35, 0x2e, 0x6a, 0x74, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e,
	0x62, 0x69, 0x7a, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4a, 0x69, 0x6e, 0x67,
	0x54, 0x6f, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x6a, 0x74,
	0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x4a, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x83, 0x01, 0x0a, 0x16, 0x4a, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x6e, 0x67,
	0x42, 0x47, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x33,
	0x2e, 0x6a, 0x74, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4a, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x6e, 0x67, 0x42, 0x47,
	0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x6a, 0x74, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x62,
	0x69, 0x7a, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4a, 0x69, 0x6e, 0x67, 0x54,
	0x6f, 0x6e, 0x67, 0x42, 0x47, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x9d, 0x01, 0x0a, 0x18, 0x63, 0x6f,
	0x6d, 0x2e, 0x6a, 0x74, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x42, 0x09, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x50, 0x01, 0x5a, 0x40, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x6a, 0x69, 0x6e, 0x6d, 0x75, 0x6b, 0x65, 0x6a, 0x69, 0x2f, 0x6a, 0x74, 0x2d, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x6a, 0x74, 0x68, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x2f, 0x62, 0x69, 0x7a, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x3b, 0x75,
	0x73, 0x65, 0x72, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x4a, 0x42, 0x55, 0xaa, 0x02, 0x14, 0x4a, 0x74,
	0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x42, 0x69, 0x7a, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x2e,
	0x56, 0x31, 0xca, 0x02, 0x14, 0x4a, 0x74, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5c, 0x42, 0x69,
	0x7a, 0x5c, 0x55, 0x73, 0x65, 0x72, 0x5c, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_jthealth_biz_user_v1_jing_tong_order_api_proto_rawDescOnce sync.Once
	file_jthealth_biz_user_v1_jing_tong_order_api_proto_rawDescData = file_jthealth_biz_user_v1_jing_tong_order_api_proto_rawDesc
)

func file_jthealth_biz_user_v1_jing_tong_order_api_proto_rawDescGZIP() []byte {
	file_jthealth_biz_user_v1_jing_tong_order_api_proto_rawDescOnce.Do(func() {
		file_jthealth_biz_user_v1_jing_tong_order_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_jthealth_biz_user_v1_jing_tong_order_api_proto_rawDescData)
	})
	return file_jthealth_biz_user_v1_jing_tong_order_api_proto_rawDescData
}

var file_jthealth_biz_user_v1_jing_tong_order_api_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_jthealth_biz_user_v1_jing_tong_order_api_proto_goTypes = []interface{}{
	(*JingTongMeasurementCountRequest)(nil),          // 0: jthealth.biz.user.v1.JingTongMeasurementCountRequest
	(*JingTongMeasurementCountResponse)(nil),         // 1: jthealth.biz.user.v1.JingTongMeasurementCountResponse
	(*JingTongGetWxMiniProOpenIdByCodeRequest)(nil),  // 2: jthealth.biz.user.v1.JingTongGetWxMiniProOpenIdByCodeRequest
	(*JingTongGetWxMiniProOpenIdByCodeResponse)(nil), // 3: jthealth.biz.user.v1.JingTongGetWxMiniProOpenIdByCodeResponse
	(*JingTongCreateOrderRequest)(nil),               // 4: jthealth.biz.user.v1.JingTongCreateOrderRequest
	(*JingTongCreateOrderResponse)(nil),              // 5: jthealth.biz.user.v1.JingTongCreateOrderResponse
	(*JingTongNotifyRequest)(nil),                    // 6: jthealth.biz.user.v1.JingTongNotifyRequest
	(*JingTongNotifyResponse)(nil),                   // 7: jthealth.biz.user.v1.JingTongNotifyResponse
	(*JingTongGetOrderListRequest)(nil),              // 8: jthealth.biz.user.v1.JingTongGetOrderListRequest
	(*JingTongGetOrderListResponse)(nil),             // 9: jthealth.biz.user.v1.JingTongGetOrderListResponse
	(*JingTongOrderMsg)(nil),                         // 10: jthealth.biz.user.v1.JingTongOrderMsg
	(*JingTongOrderStatisticalRequest)(nil),          // 11: jthealth.biz.user.v1.JingTongOrderStatisticalRequest
	(*JingTongOrderStatisticalResponse)(nil),         // 12: jthealth.biz.user.v1.JingTongOrderStatisticalResponse
	(*JingTongBGGetOrderListRequest)(nil),            // 13: jthealth.biz.user.v1.JingTongBGGetOrderListRequest
	(*JingTongBGGetOrderListResponse)(nil),           // 14: jthealth.biz.user.v1.JingTongBGGetOrderListResponse
}
var file_jthealth_biz_user_v1_jing_tong_order_api_proto_depIdxs = []int32{
	10, // 0: jthealth.biz.user.v1.JingTongGetOrderListResponse.list:type_name -> jthealth.biz.user.v1.JingTongOrderMsg
	10, // 1: jthealth.biz.user.v1.JingTongBGGetOrderListResponse.list:type_name -> jthealth.biz.user.v1.JingTongOrderMsg
	0,  // 2: jthealth.biz.user.v1.JingTongOrderAPI.JingTongMeasurementCount:input_type -> jthealth.biz.user.v1.JingTongMeasurementCountRequest
	2,  // 3: jthealth.biz.user.v1.JingTongOrderAPI.JingTongGetWxMiniProOpenIdByCode:input_type -> jthealth.biz.user.v1.JingTongGetWxMiniProOpenIdByCodeRequest
	4,  // 4: jthealth.biz.user.v1.JingTongOrderAPI.JingTongCreateOrder:input_type -> jthealth.biz.user.v1.JingTongCreateOrderRequest
	6,  // 5: jthealth.biz.user.v1.JingTongOrderAPI.JingTongNotify:input_type -> jthealth.biz.user.v1.JingTongNotifyRequest
	8,  // 6: jthealth.biz.user.v1.JingTongOrderAPI.JingTongGetOrderList:input_type -> jthealth.biz.user.v1.JingTongGetOrderListRequest
	11, // 7: jthealth.biz.user.v1.JingTongOrderAPI.JingTongOrderStatistical:input_type -> jthealth.biz.user.v1.JingTongOrderStatisticalRequest
	13, // 8: jthealth.biz.user.v1.JingTongOrderAPI.JingTongBGGetOrderList:input_type -> jthealth.biz.user.v1.JingTongBGGetOrderListRequest
	1,  // 9: jthealth.biz.user.v1.JingTongOrderAPI.JingTongMeasurementCount:output_type -> jthealth.biz.user.v1.JingTongMeasurementCountResponse
	3,  // 10: jthealth.biz.user.v1.JingTongOrderAPI.JingTongGetWxMiniProOpenIdByCode:output_type -> jthealth.biz.user.v1.JingTongGetWxMiniProOpenIdByCodeResponse
	5,  // 11: jthealth.biz.user.v1.JingTongOrderAPI.JingTongCreateOrder:output_type -> jthealth.biz.user.v1.JingTongCreateOrderResponse
	7,  // 12: jthealth.biz.user.v1.JingTongOrderAPI.JingTongNotify:output_type -> jthealth.biz.user.v1.JingTongNotifyResponse
	9,  // 13: jthealth.biz.user.v1.JingTongOrderAPI.JingTongGetOrderList:output_type -> jthealth.biz.user.v1.JingTongGetOrderListResponse
	12, // 14: jthealth.biz.user.v1.JingTongOrderAPI.JingTongOrderStatistical:output_type -> jthealth.biz.user.v1.JingTongOrderStatisticalResponse
	14, // 15: jthealth.biz.user.v1.JingTongOrderAPI.JingTongBGGetOrderList:output_type -> jthealth.biz.user.v1.JingTongBGGetOrderListResponse
	9,  // [9:16] is the sub-list for method output_type
	2,  // [2:9] is the sub-list for method input_type
	2,  // [2:2] is the sub-list for extension type_name
	2,  // [2:2] is the sub-list for extension extendee
	0,  // [0:2] is the sub-list for field type_name
}

func init() { file_jthealth_biz_user_v1_jing_tong_order_api_proto_init() }
func file_jthealth_biz_user_v1_jing_tong_order_api_proto_init() {
	if File_jthealth_biz_user_v1_jing_tong_order_api_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_jthealth_biz_user_v1_jing_tong_order_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JingTongMeasurementCountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jthealth_biz_user_v1_jing_tong_order_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JingTongMeasurementCountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jthealth_biz_user_v1_jing_tong_order_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JingTongGetWxMiniProOpenIdByCodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jthealth_biz_user_v1_jing_tong_order_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JingTongGetWxMiniProOpenIdByCodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jthealth_biz_user_v1_jing_tong_order_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JingTongCreateOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jthealth_biz_user_v1_jing_tong_order_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JingTongCreateOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jthealth_biz_user_v1_jing_tong_order_api_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JingTongNotifyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jthealth_biz_user_v1_jing_tong_order_api_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JingTongNotifyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jthealth_biz_user_v1_jing_tong_order_api_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JingTongGetOrderListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jthealth_biz_user_v1_jing_tong_order_api_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JingTongGetOrderListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jthealth_biz_user_v1_jing_tong_order_api_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JingTongOrderMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jthealth_biz_user_v1_jing_tong_order_api_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JingTongOrderStatisticalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jthealth_biz_user_v1_jing_tong_order_api_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JingTongOrderStatisticalResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jthealth_biz_user_v1_jing_tong_order_api_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JingTongBGGetOrderListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jthealth_biz_user_v1_jing_tong_order_api_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JingTongBGGetOrderListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_jthealth_biz_user_v1_jing_tong_order_api_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_jthealth_biz_user_v1_jing_tong_order_api_proto_goTypes,
		DependencyIndexes: file_jthealth_biz_user_v1_jing_tong_order_api_proto_depIdxs,
		MessageInfos:      file_jthealth_biz_user_v1_jing_tong_order_api_proto_msgTypes,
	}.Build()
	File_jthealth_biz_user_v1_jing_tong_order_api_proto = out.File
	file_jthealth_biz_user_v1_jing_tong_order_api_proto_rawDesc = nil
	file_jthealth_biz_user_v1_jing_tong_order_api_proto_goTypes = nil
	file_jthealth_biz_user_v1_jing_tong_order_api_proto_depIdxs = nil
}
