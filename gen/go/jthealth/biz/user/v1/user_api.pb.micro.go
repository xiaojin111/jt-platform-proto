// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: jthealth/biz/user/v1/user_api.proto

package userv1

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for UserAPI service

func NewUserAPIEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for UserAPI service

type UserAPIService interface {
	// SignInByPhoneCode 手机号验证码登录.
	SignInByPhoneCode(ctx context.Context, in *SignInByPhoneCodeRequest, opts ...client.CallOption) (*SignInByPhoneCodeResponse, error)
}

type userAPIService struct {
	c    client.Client
	name string
}

func NewUserAPIService(name string, c client.Client) UserAPIService {
	return &userAPIService{
		c:    c,
		name: name,
	}
}

func (c *userAPIService) SignInByPhoneCode(ctx context.Context, in *SignInByPhoneCodeRequest, opts ...client.CallOption) (*SignInByPhoneCodeResponse, error) {
	req := c.c.NewRequest(c.name, "UserAPI.SignInByPhoneCode", in)
	out := new(SignInByPhoneCodeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserAPI service

type UserAPIHandler interface {
	// SignInByPhoneCode 手机号验证码登录.
	SignInByPhoneCode(context.Context, *SignInByPhoneCodeRequest, *SignInByPhoneCodeResponse) error
}

func RegisterUserAPIHandler(s server.Server, hdlr UserAPIHandler, opts ...server.HandlerOption) error {
	type userAPI interface {
		SignInByPhoneCode(ctx context.Context, in *SignInByPhoneCodeRequest, out *SignInByPhoneCodeResponse) error
	}
	type UserAPI struct {
		userAPI
	}
	h := &userAPIHandler{hdlr}
	return s.Handle(s.NewHandler(&UserAPI{h}, opts...))
}

type userAPIHandler struct {
	UserAPIHandler
}

func (h *userAPIHandler) SignInByPhoneCode(ctx context.Context, in *SignInByPhoneCodeRequest, out *SignInByPhoneCodeResponse) error {
	return h.UserAPIHandler.SignInByPhoneCode(ctx, in, out)
}
