// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: jthealth/biz/user/v1/user_api.proto

package userv1

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for UserAPI service

func NewUserAPIEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for UserAPI service

type UserAPIService interface {
	//---------------------经通天下------------------
	//手机号验证码登录
	JingTongSignInByPhoneCode(ctx context.Context, in *JingTongSignInByPhoneCodeRequest, opts ...client.CallOption) (*JingTongSignInByPhoneCodeResponse, error)
	//微信授权登录
	JingTongSignInByWechatMiniProgram(ctx context.Context, in *JingTongSignInByWechatMiniProgramRequest, opts ...client.CallOption) (*JingTongSignInByWechatMiniProgramResponse, error)
	//获取用户信息
	JingTongGetUserProfile(ctx context.Context, in *JingTongGetUserProfileRequest, opts ...client.CallOption) (*JingTongGetUserProfileResponse, error)
	//更新用户信息
	JingTongUpdateUserProfile(ctx context.Context, in *JingTongUpdateUserProfileRequest, opts ...client.CallOption) (*JingTongUpdateUserProfileResponse, error)
	//修改手机号
	JingTongUpdatePhone(ctx context.Context, in *JingTongUpdatePhoneRequest, opts ...client.CallOption) (*JingTongUpdatePhoneResponse, error)
	//后台用户登录
	JingTongBgLogin(ctx context.Context, in *JingTongBgLoginRequest, opts ...client.CallOption) (*JingTongBgLoginResponse, error)
}

type userAPIService struct {
	c    client.Client
	name string
}

func NewUserAPIService(name string, c client.Client) UserAPIService {
	return &userAPIService{
		c:    c,
		name: name,
	}
}

func (c *userAPIService) JingTongSignInByPhoneCode(ctx context.Context, in *JingTongSignInByPhoneCodeRequest, opts ...client.CallOption) (*JingTongSignInByPhoneCodeResponse, error) {
	req := c.c.NewRequest(c.name, "UserAPI.JingTongSignInByPhoneCode", in)
	out := new(JingTongSignInByPhoneCodeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIService) JingTongSignInByWechatMiniProgram(ctx context.Context, in *JingTongSignInByWechatMiniProgramRequest, opts ...client.CallOption) (*JingTongSignInByWechatMiniProgramResponse, error) {
	req := c.c.NewRequest(c.name, "UserAPI.JingTongSignInByWechatMiniProgram", in)
	out := new(JingTongSignInByWechatMiniProgramResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIService) JingTongGetUserProfile(ctx context.Context, in *JingTongGetUserProfileRequest, opts ...client.CallOption) (*JingTongGetUserProfileResponse, error) {
	req := c.c.NewRequest(c.name, "UserAPI.JingTongGetUserProfile", in)
	out := new(JingTongGetUserProfileResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIService) JingTongUpdateUserProfile(ctx context.Context, in *JingTongUpdateUserProfileRequest, opts ...client.CallOption) (*JingTongUpdateUserProfileResponse, error) {
	req := c.c.NewRequest(c.name, "UserAPI.JingTongUpdateUserProfile", in)
	out := new(JingTongUpdateUserProfileResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIService) JingTongUpdatePhone(ctx context.Context, in *JingTongUpdatePhoneRequest, opts ...client.CallOption) (*JingTongUpdatePhoneResponse, error) {
	req := c.c.NewRequest(c.name, "UserAPI.JingTongUpdatePhone", in)
	out := new(JingTongUpdatePhoneResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIService) JingTongBgLogin(ctx context.Context, in *JingTongBgLoginRequest, opts ...client.CallOption) (*JingTongBgLoginResponse, error) {
	req := c.c.NewRequest(c.name, "UserAPI.JingTongBgLogin", in)
	out := new(JingTongBgLoginResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserAPI service

type UserAPIHandler interface {
	//---------------------经通天下------------------
	//手机号验证码登录
	JingTongSignInByPhoneCode(context.Context, *JingTongSignInByPhoneCodeRequest, *JingTongSignInByPhoneCodeResponse) error
	//微信授权登录
	JingTongSignInByWechatMiniProgram(context.Context, *JingTongSignInByWechatMiniProgramRequest, *JingTongSignInByWechatMiniProgramResponse) error
	//获取用户信息
	JingTongGetUserProfile(context.Context, *JingTongGetUserProfileRequest, *JingTongGetUserProfileResponse) error
	//更新用户信息
	JingTongUpdateUserProfile(context.Context, *JingTongUpdateUserProfileRequest, *JingTongUpdateUserProfileResponse) error
	//修改手机号
	JingTongUpdatePhone(context.Context, *JingTongUpdatePhoneRequest, *JingTongUpdatePhoneResponse) error
	//后台用户登录
	JingTongBgLogin(context.Context, *JingTongBgLoginRequest, *JingTongBgLoginResponse) error
}

func RegisterUserAPIHandler(s server.Server, hdlr UserAPIHandler, opts ...server.HandlerOption) error {
	type userAPI interface {
		JingTongSignInByPhoneCode(ctx context.Context, in *JingTongSignInByPhoneCodeRequest, out *JingTongSignInByPhoneCodeResponse) error
		JingTongSignInByWechatMiniProgram(ctx context.Context, in *JingTongSignInByWechatMiniProgramRequest, out *JingTongSignInByWechatMiniProgramResponse) error
		JingTongGetUserProfile(ctx context.Context, in *JingTongGetUserProfileRequest, out *JingTongGetUserProfileResponse) error
		JingTongUpdateUserProfile(ctx context.Context, in *JingTongUpdateUserProfileRequest, out *JingTongUpdateUserProfileResponse) error
		JingTongUpdatePhone(ctx context.Context, in *JingTongUpdatePhoneRequest, out *JingTongUpdatePhoneResponse) error
		JingTongBgLogin(ctx context.Context, in *JingTongBgLoginRequest, out *JingTongBgLoginResponse) error
	}
	type UserAPI struct {
		userAPI
	}
	h := &userAPIHandler{hdlr}
	return s.Handle(s.NewHandler(&UserAPI{h}, opts...))
}

type userAPIHandler struct {
	UserAPIHandler
}

func (h *userAPIHandler) JingTongSignInByPhoneCode(ctx context.Context, in *JingTongSignInByPhoneCodeRequest, out *JingTongSignInByPhoneCodeResponse) error {
	return h.UserAPIHandler.JingTongSignInByPhoneCode(ctx, in, out)
}

func (h *userAPIHandler) JingTongSignInByWechatMiniProgram(ctx context.Context, in *JingTongSignInByWechatMiniProgramRequest, out *JingTongSignInByWechatMiniProgramResponse) error {
	return h.UserAPIHandler.JingTongSignInByWechatMiniProgram(ctx, in, out)
}

func (h *userAPIHandler) JingTongGetUserProfile(ctx context.Context, in *JingTongGetUserProfileRequest, out *JingTongGetUserProfileResponse) error {
	return h.UserAPIHandler.JingTongGetUserProfile(ctx, in, out)
}

func (h *userAPIHandler) JingTongUpdateUserProfile(ctx context.Context, in *JingTongUpdateUserProfileRequest, out *JingTongUpdateUserProfileResponse) error {
	return h.UserAPIHandler.JingTongUpdateUserProfile(ctx, in, out)
}

func (h *userAPIHandler) JingTongUpdatePhone(ctx context.Context, in *JingTongUpdatePhoneRequest, out *JingTongUpdatePhoneResponse) error {
	return h.UserAPIHandler.JingTongUpdatePhone(ctx, in, out)
}

func (h *userAPIHandler) JingTongBgLogin(ctx context.Context, in *JingTongBgLoginRequest, out *JingTongBgLoginResponse) error {
	return h.UserAPIHandler.JingTongBgLogin(ctx, in, out)
}
