// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: jthealth/biz/user/v1/user_api.proto

package userv1

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for UserAPI service

func NewUserAPIEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for UserAPI service

type UserAPIService interface {
	// SignInByPhoneCode 手机号验证码登录.
	SignInByPhoneCode(ctx context.Context, in *SignInByPhoneCodeRequest, opts ...client.CallOption) (*SignInByPhoneCodeResponse, error)
	//SignInByPassWord 账号密码登录
	SignInByPassWord(ctx context.Context, in *SignInByPassWordRequest, opts ...client.CallOption) (*SignInByPassWordResponse, error)
	//GetUserInfosById 获取用户信息
	GetUserInfosById(ctx context.Context, in *GetUserInfosByIdRequest, opts ...client.CallOption) (*GetUserInfosByIdResponse, error)
	//UpdateUserInfos  更改用户信息
	UpdateUserInfos(ctx context.Context, in *UpdateUserInfosRequest, opts ...client.CallOption) (*UpdateUserInfosResponse, error)
	//CreatedUserProfile 创建用户档案
	CreatedUserProfile(ctx context.Context, in *CreatedUserProfileRequest, opts ...client.CallOption) (*CreatedUserProfileResponse, error)
	//GetUserInfosList 获取用户信息列表
	GetUserInfosList(ctx context.Context, in *GetUserInfosListRequest, opts ...client.CallOption) (*GetUserInfosListResponse, error)
	//获取用户信息通过appKey
	GetUserInfosByAppKey(ctx context.Context, in *GetUserInfosByAppKeyRequest, opts ...client.CallOption) (*GetUserInfosByAppKeyResponse, error)
	//----------------------应用-------------------------------
	//应用申请
	ApplyApplication(ctx context.Context, in *ApplyApplicationRequest, opts ...client.CallOption) (*ApplyApplicationResponse, error)
	//获取应用列表
	GetApplicationInfo(ctx context.Context, in *GetApplicationInfoRequest, opts ...client.CallOption) (*GetApplicationInfoResponse, error)
	//重置app_secret
	RestAppSecretById(ctx context.Context, in *RestAppSecretByIdRequest, opts ...client.CallOption) (*RestAppSecretByIdResponse, error)
	//获取单个应用详情
	GetApplicationDetails(ctx context.Context, in *GetApplicationDetailsRequest, opts ...client.CallOption) (*GetApplicationDetailsResponse, error)
	//获取应用通过appid
	GetApplicationByAppId(ctx context.Context, in *GetApplicationByAppIdRequest, opts ...client.CallOption) (*GetApplicationByAppIdResponse, error)
	//应用功能申请
	ApplyFeatureAudit(ctx context.Context, in *ApplyFeatureAuditRequest, opts ...client.CallOption) (*ApplyFeatureAuditResponse, error)
	//获取审核列表
	GetFeatureAuditList(ctx context.Context, in *GetFeatureAuditListRequest, opts ...client.CallOption) (*GetFeatureAuditListResponse, error)
	//应用功能审核
	UpdateFeatureAudit(ctx context.Context, in *UpdateFeatureAuditRequest, opts ...client.CallOption) (*UpdateFeatureAuditResponse, error)
	//获取消息通知
	GetNotifyList(ctx context.Context, in *GetNotifyListRequest, opts ...client.CallOption) (*GetNotifyListResponse, error)
	//发送通知
	SendNotify(ctx context.Context, in *SendNotifyRequest, opts ...client.CallOption) (*SendNotifyResponse, error)
	//----------------用户档案---------------
	// GetUserProfile 获取用户档案.
	GetUserProfile(ctx context.Context, in *GetUserProfileRequest, opts ...client.CallOption) (*GetUserProfileResponse, error)
	// 提交用户档案
	SubmitUserProfile(ctx context.Context, in *SubmitUserProfileRequest, opts ...client.CallOption) (*SubmitUserProfileResponse, error)
	//---------------------经通天下------------------
	//手机号验证码登录
	JingTongSignInByPhoneCode(ctx context.Context, in *JingTongSignInByPhoneCodeRequest, opts ...client.CallOption) (*JingTongSignInByPhoneCodeResponse, error)
	//微信授权登录
	JingTongSignInByWechatMiniProgram(ctx context.Context, in *JingTongSignInByWechatMiniProgramRequest, opts ...client.CallOption) (*JingTongSignInByWechatMiniProgramResponse, error)
	//获取用户信息
	JingTongGetUserProfile(ctx context.Context, in *JingTongGetUserProfileRequest, opts ...client.CallOption) (*JingTongGetUserProfileResponse, error)
	//更新用户信息
	JingTongUpdateUserProfile(ctx context.Context, in *JingTongUpdateUserProfileRequest, opts ...client.CallOption) (*JingTongUpdateUserProfileResponse, error)
	//修改手机号
	JingTongUpdatePhone(ctx context.Context, in *JingTongUpdatePhoneRequest, opts ...client.CallOption) (*JingTongUpdatePhoneResponse, error)
	//后台用户登录
	JingTongBgLogin(ctx context.Context, in *JingTongBgLoginRequest, opts ...client.CallOption) (*JingTongBgLoginResponse, error)
}

type userAPIService struct {
	c    client.Client
	name string
}

func NewUserAPIService(name string, c client.Client) UserAPIService {
	return &userAPIService{
		c:    c,
		name: name,
	}
}

func (c *userAPIService) SignInByPhoneCode(ctx context.Context, in *SignInByPhoneCodeRequest, opts ...client.CallOption) (*SignInByPhoneCodeResponse, error) {
	req := c.c.NewRequest(c.name, "UserAPI.SignInByPhoneCode", in)
	out := new(SignInByPhoneCodeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIService) SignInByPassWord(ctx context.Context, in *SignInByPassWordRequest, opts ...client.CallOption) (*SignInByPassWordResponse, error) {
	req := c.c.NewRequest(c.name, "UserAPI.SignInByPassWord", in)
	out := new(SignInByPassWordResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIService) GetUserInfosById(ctx context.Context, in *GetUserInfosByIdRequest, opts ...client.CallOption) (*GetUserInfosByIdResponse, error) {
	req := c.c.NewRequest(c.name, "UserAPI.GetUserInfosById", in)
	out := new(GetUserInfosByIdResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIService) UpdateUserInfos(ctx context.Context, in *UpdateUserInfosRequest, opts ...client.CallOption) (*UpdateUserInfosResponse, error) {
	req := c.c.NewRequest(c.name, "UserAPI.UpdateUserInfos", in)
	out := new(UpdateUserInfosResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIService) CreatedUserProfile(ctx context.Context, in *CreatedUserProfileRequest, opts ...client.CallOption) (*CreatedUserProfileResponse, error) {
	req := c.c.NewRequest(c.name, "UserAPI.CreatedUserProfile", in)
	out := new(CreatedUserProfileResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIService) GetUserInfosList(ctx context.Context, in *GetUserInfosListRequest, opts ...client.CallOption) (*GetUserInfosListResponse, error) {
	req := c.c.NewRequest(c.name, "UserAPI.GetUserInfosList", in)
	out := new(GetUserInfosListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIService) GetUserInfosByAppKey(ctx context.Context, in *GetUserInfosByAppKeyRequest, opts ...client.CallOption) (*GetUserInfosByAppKeyResponse, error) {
	req := c.c.NewRequest(c.name, "UserAPI.GetUserInfosByAppKey", in)
	out := new(GetUserInfosByAppKeyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIService) ApplyApplication(ctx context.Context, in *ApplyApplicationRequest, opts ...client.CallOption) (*ApplyApplicationResponse, error) {
	req := c.c.NewRequest(c.name, "UserAPI.ApplyApplication", in)
	out := new(ApplyApplicationResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIService) GetApplicationInfo(ctx context.Context, in *GetApplicationInfoRequest, opts ...client.CallOption) (*GetApplicationInfoResponse, error) {
	req := c.c.NewRequest(c.name, "UserAPI.GetApplicationInfo", in)
	out := new(GetApplicationInfoResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIService) RestAppSecretById(ctx context.Context, in *RestAppSecretByIdRequest, opts ...client.CallOption) (*RestAppSecretByIdResponse, error) {
	req := c.c.NewRequest(c.name, "UserAPI.RestAppSecretById", in)
	out := new(RestAppSecretByIdResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIService) GetApplicationDetails(ctx context.Context, in *GetApplicationDetailsRequest, opts ...client.CallOption) (*GetApplicationDetailsResponse, error) {
	req := c.c.NewRequest(c.name, "UserAPI.GetApplicationDetails", in)
	out := new(GetApplicationDetailsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIService) GetApplicationByAppId(ctx context.Context, in *GetApplicationByAppIdRequest, opts ...client.CallOption) (*GetApplicationByAppIdResponse, error) {
	req := c.c.NewRequest(c.name, "UserAPI.GetApplicationByAppId", in)
	out := new(GetApplicationByAppIdResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIService) ApplyFeatureAudit(ctx context.Context, in *ApplyFeatureAuditRequest, opts ...client.CallOption) (*ApplyFeatureAuditResponse, error) {
	req := c.c.NewRequest(c.name, "UserAPI.ApplyFeatureAudit", in)
	out := new(ApplyFeatureAuditResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIService) GetFeatureAuditList(ctx context.Context, in *GetFeatureAuditListRequest, opts ...client.CallOption) (*GetFeatureAuditListResponse, error) {
	req := c.c.NewRequest(c.name, "UserAPI.GetFeatureAuditList", in)
	out := new(GetFeatureAuditListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIService) UpdateFeatureAudit(ctx context.Context, in *UpdateFeatureAuditRequest, opts ...client.CallOption) (*UpdateFeatureAuditResponse, error) {
	req := c.c.NewRequest(c.name, "UserAPI.UpdateFeatureAudit", in)
	out := new(UpdateFeatureAuditResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIService) GetNotifyList(ctx context.Context, in *GetNotifyListRequest, opts ...client.CallOption) (*GetNotifyListResponse, error) {
	req := c.c.NewRequest(c.name, "UserAPI.GetNotifyList", in)
	out := new(GetNotifyListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIService) SendNotify(ctx context.Context, in *SendNotifyRequest, opts ...client.CallOption) (*SendNotifyResponse, error) {
	req := c.c.NewRequest(c.name, "UserAPI.SendNotify", in)
	out := new(SendNotifyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIService) GetUserProfile(ctx context.Context, in *GetUserProfileRequest, opts ...client.CallOption) (*GetUserProfileResponse, error) {
	req := c.c.NewRequest(c.name, "UserAPI.GetUserProfile", in)
	out := new(GetUserProfileResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIService) SubmitUserProfile(ctx context.Context, in *SubmitUserProfileRequest, opts ...client.CallOption) (*SubmitUserProfileResponse, error) {
	req := c.c.NewRequest(c.name, "UserAPI.SubmitUserProfile", in)
	out := new(SubmitUserProfileResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIService) JingTongSignInByPhoneCode(ctx context.Context, in *JingTongSignInByPhoneCodeRequest, opts ...client.CallOption) (*JingTongSignInByPhoneCodeResponse, error) {
	req := c.c.NewRequest(c.name, "UserAPI.JingTongSignInByPhoneCode", in)
	out := new(JingTongSignInByPhoneCodeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIService) JingTongSignInByWechatMiniProgram(ctx context.Context, in *JingTongSignInByWechatMiniProgramRequest, opts ...client.CallOption) (*JingTongSignInByWechatMiniProgramResponse, error) {
	req := c.c.NewRequest(c.name, "UserAPI.JingTongSignInByWechatMiniProgram", in)
	out := new(JingTongSignInByWechatMiniProgramResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIService) JingTongGetUserProfile(ctx context.Context, in *JingTongGetUserProfileRequest, opts ...client.CallOption) (*JingTongGetUserProfileResponse, error) {
	req := c.c.NewRequest(c.name, "UserAPI.JingTongGetUserProfile", in)
	out := new(JingTongGetUserProfileResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIService) JingTongUpdateUserProfile(ctx context.Context, in *JingTongUpdateUserProfileRequest, opts ...client.CallOption) (*JingTongUpdateUserProfileResponse, error) {
	req := c.c.NewRequest(c.name, "UserAPI.JingTongUpdateUserProfile", in)
	out := new(JingTongUpdateUserProfileResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIService) JingTongUpdatePhone(ctx context.Context, in *JingTongUpdatePhoneRequest, opts ...client.CallOption) (*JingTongUpdatePhoneResponse, error) {
	req := c.c.NewRequest(c.name, "UserAPI.JingTongUpdatePhone", in)
	out := new(JingTongUpdatePhoneResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIService) JingTongBgLogin(ctx context.Context, in *JingTongBgLoginRequest, opts ...client.CallOption) (*JingTongBgLoginResponse, error) {
	req := c.c.NewRequest(c.name, "UserAPI.JingTongBgLogin", in)
	out := new(JingTongBgLoginResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserAPI service

type UserAPIHandler interface {
	// SignInByPhoneCode 手机号验证码登录.
	SignInByPhoneCode(context.Context, *SignInByPhoneCodeRequest, *SignInByPhoneCodeResponse) error
	//SignInByPassWord 账号密码登录
	SignInByPassWord(context.Context, *SignInByPassWordRequest, *SignInByPassWordResponse) error
	//GetUserInfosById 获取用户信息
	GetUserInfosById(context.Context, *GetUserInfosByIdRequest, *GetUserInfosByIdResponse) error
	//UpdateUserInfos  更改用户信息
	UpdateUserInfos(context.Context, *UpdateUserInfosRequest, *UpdateUserInfosResponse) error
	//CreatedUserProfile 创建用户档案
	CreatedUserProfile(context.Context, *CreatedUserProfileRequest, *CreatedUserProfileResponse) error
	//GetUserInfosList 获取用户信息列表
	GetUserInfosList(context.Context, *GetUserInfosListRequest, *GetUserInfosListResponse) error
	//获取用户信息通过appKey
	GetUserInfosByAppKey(context.Context, *GetUserInfosByAppKeyRequest, *GetUserInfosByAppKeyResponse) error
	//----------------------应用-------------------------------
	//应用申请
	ApplyApplication(context.Context, *ApplyApplicationRequest, *ApplyApplicationResponse) error
	//获取应用列表
	GetApplicationInfo(context.Context, *GetApplicationInfoRequest, *GetApplicationInfoResponse) error
	//重置app_secret
	RestAppSecretById(context.Context, *RestAppSecretByIdRequest, *RestAppSecretByIdResponse) error
	//获取单个应用详情
	GetApplicationDetails(context.Context, *GetApplicationDetailsRequest, *GetApplicationDetailsResponse) error
	//获取应用通过appid
	GetApplicationByAppId(context.Context, *GetApplicationByAppIdRequest, *GetApplicationByAppIdResponse) error
	//应用功能申请
	ApplyFeatureAudit(context.Context, *ApplyFeatureAuditRequest, *ApplyFeatureAuditResponse) error
	//获取审核列表
	GetFeatureAuditList(context.Context, *GetFeatureAuditListRequest, *GetFeatureAuditListResponse) error
	//应用功能审核
	UpdateFeatureAudit(context.Context, *UpdateFeatureAuditRequest, *UpdateFeatureAuditResponse) error
	//获取消息通知
	GetNotifyList(context.Context, *GetNotifyListRequest, *GetNotifyListResponse) error
	//发送通知
	SendNotify(context.Context, *SendNotifyRequest, *SendNotifyResponse) error
	//----------------用户档案---------------
	// GetUserProfile 获取用户档案.
	GetUserProfile(context.Context, *GetUserProfileRequest, *GetUserProfileResponse) error
	// 提交用户档案
	SubmitUserProfile(context.Context, *SubmitUserProfileRequest, *SubmitUserProfileResponse) error
	//---------------------经通天下------------------
	//手机号验证码登录
	JingTongSignInByPhoneCode(context.Context, *JingTongSignInByPhoneCodeRequest, *JingTongSignInByPhoneCodeResponse) error
	//微信授权登录
	JingTongSignInByWechatMiniProgram(context.Context, *JingTongSignInByWechatMiniProgramRequest, *JingTongSignInByWechatMiniProgramResponse) error
	//获取用户信息
	JingTongGetUserProfile(context.Context, *JingTongGetUserProfileRequest, *JingTongGetUserProfileResponse) error
	//更新用户信息
	JingTongUpdateUserProfile(context.Context, *JingTongUpdateUserProfileRequest, *JingTongUpdateUserProfileResponse) error
	//修改手机号
	JingTongUpdatePhone(context.Context, *JingTongUpdatePhoneRequest, *JingTongUpdatePhoneResponse) error
	//后台用户登录
	JingTongBgLogin(context.Context, *JingTongBgLoginRequest, *JingTongBgLoginResponse) error
}

func RegisterUserAPIHandler(s server.Server, hdlr UserAPIHandler, opts ...server.HandlerOption) error {
	type userAPI interface {
		SignInByPhoneCode(ctx context.Context, in *SignInByPhoneCodeRequest, out *SignInByPhoneCodeResponse) error
		SignInByPassWord(ctx context.Context, in *SignInByPassWordRequest, out *SignInByPassWordResponse) error
		GetUserInfosById(ctx context.Context, in *GetUserInfosByIdRequest, out *GetUserInfosByIdResponse) error
		UpdateUserInfos(ctx context.Context, in *UpdateUserInfosRequest, out *UpdateUserInfosResponse) error
		CreatedUserProfile(ctx context.Context, in *CreatedUserProfileRequest, out *CreatedUserProfileResponse) error
		GetUserInfosList(ctx context.Context, in *GetUserInfosListRequest, out *GetUserInfosListResponse) error
		GetUserInfosByAppKey(ctx context.Context, in *GetUserInfosByAppKeyRequest, out *GetUserInfosByAppKeyResponse) error
		ApplyApplication(ctx context.Context, in *ApplyApplicationRequest, out *ApplyApplicationResponse) error
		GetApplicationInfo(ctx context.Context, in *GetApplicationInfoRequest, out *GetApplicationInfoResponse) error
		RestAppSecretById(ctx context.Context, in *RestAppSecretByIdRequest, out *RestAppSecretByIdResponse) error
		GetApplicationDetails(ctx context.Context, in *GetApplicationDetailsRequest, out *GetApplicationDetailsResponse) error
		GetApplicationByAppId(ctx context.Context, in *GetApplicationByAppIdRequest, out *GetApplicationByAppIdResponse) error
		ApplyFeatureAudit(ctx context.Context, in *ApplyFeatureAuditRequest, out *ApplyFeatureAuditResponse) error
		GetFeatureAuditList(ctx context.Context, in *GetFeatureAuditListRequest, out *GetFeatureAuditListResponse) error
		UpdateFeatureAudit(ctx context.Context, in *UpdateFeatureAuditRequest, out *UpdateFeatureAuditResponse) error
		GetNotifyList(ctx context.Context, in *GetNotifyListRequest, out *GetNotifyListResponse) error
		SendNotify(ctx context.Context, in *SendNotifyRequest, out *SendNotifyResponse) error
		GetUserProfile(ctx context.Context, in *GetUserProfileRequest, out *GetUserProfileResponse) error
		SubmitUserProfile(ctx context.Context, in *SubmitUserProfileRequest, out *SubmitUserProfileResponse) error
		JingTongSignInByPhoneCode(ctx context.Context, in *JingTongSignInByPhoneCodeRequest, out *JingTongSignInByPhoneCodeResponse) error
		JingTongSignInByWechatMiniProgram(ctx context.Context, in *JingTongSignInByWechatMiniProgramRequest, out *JingTongSignInByWechatMiniProgramResponse) error
		JingTongGetUserProfile(ctx context.Context, in *JingTongGetUserProfileRequest, out *JingTongGetUserProfileResponse) error
		JingTongUpdateUserProfile(ctx context.Context, in *JingTongUpdateUserProfileRequest, out *JingTongUpdateUserProfileResponse) error
		JingTongUpdatePhone(ctx context.Context, in *JingTongUpdatePhoneRequest, out *JingTongUpdatePhoneResponse) error
		JingTongBgLogin(ctx context.Context, in *JingTongBgLoginRequest, out *JingTongBgLoginResponse) error
	}
	type UserAPI struct {
		userAPI
	}
	h := &userAPIHandler{hdlr}
	return s.Handle(s.NewHandler(&UserAPI{h}, opts...))
}

type userAPIHandler struct {
	UserAPIHandler
}

func (h *userAPIHandler) SignInByPhoneCode(ctx context.Context, in *SignInByPhoneCodeRequest, out *SignInByPhoneCodeResponse) error {
	return h.UserAPIHandler.SignInByPhoneCode(ctx, in, out)
}

func (h *userAPIHandler) SignInByPassWord(ctx context.Context, in *SignInByPassWordRequest, out *SignInByPassWordResponse) error {
	return h.UserAPIHandler.SignInByPassWord(ctx, in, out)
}

func (h *userAPIHandler) GetUserInfosById(ctx context.Context, in *GetUserInfosByIdRequest, out *GetUserInfosByIdResponse) error {
	return h.UserAPIHandler.GetUserInfosById(ctx, in, out)
}

func (h *userAPIHandler) UpdateUserInfos(ctx context.Context, in *UpdateUserInfosRequest, out *UpdateUserInfosResponse) error {
	return h.UserAPIHandler.UpdateUserInfos(ctx, in, out)
}

func (h *userAPIHandler) CreatedUserProfile(ctx context.Context, in *CreatedUserProfileRequest, out *CreatedUserProfileResponse) error {
	return h.UserAPIHandler.CreatedUserProfile(ctx, in, out)
}

func (h *userAPIHandler) GetUserInfosList(ctx context.Context, in *GetUserInfosListRequest, out *GetUserInfosListResponse) error {
	return h.UserAPIHandler.GetUserInfosList(ctx, in, out)
}

func (h *userAPIHandler) GetUserInfosByAppKey(ctx context.Context, in *GetUserInfosByAppKeyRequest, out *GetUserInfosByAppKeyResponse) error {
	return h.UserAPIHandler.GetUserInfosByAppKey(ctx, in, out)
}

func (h *userAPIHandler) ApplyApplication(ctx context.Context, in *ApplyApplicationRequest, out *ApplyApplicationResponse) error {
	return h.UserAPIHandler.ApplyApplication(ctx, in, out)
}

func (h *userAPIHandler) GetApplicationInfo(ctx context.Context, in *GetApplicationInfoRequest, out *GetApplicationInfoResponse) error {
	return h.UserAPIHandler.GetApplicationInfo(ctx, in, out)
}

func (h *userAPIHandler) RestAppSecretById(ctx context.Context, in *RestAppSecretByIdRequest, out *RestAppSecretByIdResponse) error {
	return h.UserAPIHandler.RestAppSecretById(ctx, in, out)
}

func (h *userAPIHandler) GetApplicationDetails(ctx context.Context, in *GetApplicationDetailsRequest, out *GetApplicationDetailsResponse) error {
	return h.UserAPIHandler.GetApplicationDetails(ctx, in, out)
}

func (h *userAPIHandler) GetApplicationByAppId(ctx context.Context, in *GetApplicationByAppIdRequest, out *GetApplicationByAppIdResponse) error {
	return h.UserAPIHandler.GetApplicationByAppId(ctx, in, out)
}

func (h *userAPIHandler) ApplyFeatureAudit(ctx context.Context, in *ApplyFeatureAuditRequest, out *ApplyFeatureAuditResponse) error {
	return h.UserAPIHandler.ApplyFeatureAudit(ctx, in, out)
}

func (h *userAPIHandler) GetFeatureAuditList(ctx context.Context, in *GetFeatureAuditListRequest, out *GetFeatureAuditListResponse) error {
	return h.UserAPIHandler.GetFeatureAuditList(ctx, in, out)
}

func (h *userAPIHandler) UpdateFeatureAudit(ctx context.Context, in *UpdateFeatureAuditRequest, out *UpdateFeatureAuditResponse) error {
	return h.UserAPIHandler.UpdateFeatureAudit(ctx, in, out)
}

func (h *userAPIHandler) GetNotifyList(ctx context.Context, in *GetNotifyListRequest, out *GetNotifyListResponse) error {
	return h.UserAPIHandler.GetNotifyList(ctx, in, out)
}

func (h *userAPIHandler) SendNotify(ctx context.Context, in *SendNotifyRequest, out *SendNotifyResponse) error {
	return h.UserAPIHandler.SendNotify(ctx, in, out)
}

func (h *userAPIHandler) GetUserProfile(ctx context.Context, in *GetUserProfileRequest, out *GetUserProfileResponse) error {
	return h.UserAPIHandler.GetUserProfile(ctx, in, out)
}

func (h *userAPIHandler) SubmitUserProfile(ctx context.Context, in *SubmitUserProfileRequest, out *SubmitUserProfileResponse) error {
	return h.UserAPIHandler.SubmitUserProfile(ctx, in, out)
}

func (h *userAPIHandler) JingTongSignInByPhoneCode(ctx context.Context, in *JingTongSignInByPhoneCodeRequest, out *JingTongSignInByPhoneCodeResponse) error {
	return h.UserAPIHandler.JingTongSignInByPhoneCode(ctx, in, out)
}

func (h *userAPIHandler) JingTongSignInByWechatMiniProgram(ctx context.Context, in *JingTongSignInByWechatMiniProgramRequest, out *JingTongSignInByWechatMiniProgramResponse) error {
	return h.UserAPIHandler.JingTongSignInByWechatMiniProgram(ctx, in, out)
}

func (h *userAPIHandler) JingTongGetUserProfile(ctx context.Context, in *JingTongGetUserProfileRequest, out *JingTongGetUserProfileResponse) error {
	return h.UserAPIHandler.JingTongGetUserProfile(ctx, in, out)
}

func (h *userAPIHandler) JingTongUpdateUserProfile(ctx context.Context, in *JingTongUpdateUserProfileRequest, out *JingTongUpdateUserProfileResponse) error {
	return h.UserAPIHandler.JingTongUpdateUserProfile(ctx, in, out)
}

func (h *userAPIHandler) JingTongUpdatePhone(ctx context.Context, in *JingTongUpdatePhoneRequest, out *JingTongUpdatePhoneResponse) error {
	return h.UserAPIHandler.JingTongUpdatePhone(ctx, in, out)
}

func (h *userAPIHandler) JingTongBgLogin(ctx context.Context, in *JingTongBgLoginRequest, out *JingTongBgLoginResponse) error {
	return h.UserAPIHandler.JingTongBgLogin(ctx, in, out)
}
