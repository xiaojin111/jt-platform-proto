// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package userv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// UserAPIClient is the client API for UserAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserAPIClient interface {
	// SignInByPhoneCode 手机号验证码登录.
	SignInByPhoneCode(ctx context.Context, in *SignInByPhoneCodeRequest, opts ...grpc.CallOption) (*SignInByPhoneCodeResponse, error)
	//SignInByPassWord 账号密码登录
	SignInByPassWord(ctx context.Context, in *SignInByPassWordRequest, opts ...grpc.CallOption) (*SignInByPassWordResponse, error)
	//GetUserInfosById 获取用户信息
	GetUserInfosById(ctx context.Context, in *GetUserInfosByIdRequest, opts ...grpc.CallOption) (*GetUserInfosByIdResponse, error)
	//UpdateUserInfos  更改用户信息
	UpdateUserInfos(ctx context.Context, in *UpdateUserInfosRequest, opts ...grpc.CallOption) (*UpdateUserInfosResponse, error)
	//CreatedUserProfile 创建用户档案
	CreatedUserProfile(ctx context.Context, in *CreatedUserProfileRequest, opts ...grpc.CallOption) (*CreatedUserProfileResponse, error)
	//GetUserInfosList 获取用户信息列表
	GetUserInfosList(ctx context.Context, in *GetUserInfosListRequest, opts ...grpc.CallOption) (*GetUserInfosListResponse, error)
	//获取用户信息通过appKey
	GetUserInfosByAppKey(ctx context.Context, in *GetUserInfosByAppKeyRequest, opts ...grpc.CallOption) (*GetUserInfosByAppKeyResponse, error)
	//----------------------应用-------------------------------
	//应用申请
	ApplyApplication(ctx context.Context, in *ApplyApplicationRequest, opts ...grpc.CallOption) (*ApplyApplicationResponse, error)
	//获取应用列表
	GetApplicationInfo(ctx context.Context, in *GetApplicationInfoRequest, opts ...grpc.CallOption) (*GetApplicationInfoResponse, error)
	//重置app_secret
	RestAppSecretById(ctx context.Context, in *RestAppSecretByIdRequest, opts ...grpc.CallOption) (*RestAppSecretByIdResponse, error)
	//获取单个应用详情
	GetApplicationDetails(ctx context.Context, in *GetApplicationDetailsRequest, opts ...grpc.CallOption) (*GetApplicationDetailsResponse, error)
	//获取应用通过appid
	GetApplicationByAppId(ctx context.Context, in *GetApplicationByAppIdRequest, opts ...grpc.CallOption) (*GetApplicationByAppIdResponse, error)
	//应用功能申请
	ApplyFeatureAudit(ctx context.Context, in *ApplyFeatureAuditRequest, opts ...grpc.CallOption) (*ApplyFeatureAuditResponse, error)
	//获取审核列表
	GetFeatureAuditList(ctx context.Context, in *GetFeatureAuditListRequest, opts ...grpc.CallOption) (*GetFeatureAuditListResponse, error)
	//应用功能审核
	UpdateFeatureAudit(ctx context.Context, in *UpdateFeatureAuditRequest, opts ...grpc.CallOption) (*UpdateFeatureAuditResponse, error)
	//获取消息通知
	GetNotifyList(ctx context.Context, in *GetNotifyListRequest, opts ...grpc.CallOption) (*GetNotifyListResponse, error)
	//发送通知
	SendNotify(ctx context.Context, in *SendNotifyRequest, opts ...grpc.CallOption) (*SendNotifyResponse, error)
	//----------------用户档案---------------
	// GetUserProfile 获取用户档案.
	GetUserProfile(ctx context.Context, in *GetUserProfileRequest, opts ...grpc.CallOption) (*GetUserProfileResponse, error)
	// 提交用户档案
	SubmitUserProfile(ctx context.Context, in *SubmitUserProfileRequest, opts ...grpc.CallOption) (*SubmitUserProfileResponse, error)
	//---------------------经通天下------------------
	//手机号验证码登录
	JingTongSignInByPhoneCode(ctx context.Context, in *JingTongSignInByPhoneCodeRequest, opts ...grpc.CallOption) (*JingTongSignInByPhoneCodeResponse, error)
	//微信授权登录
	JingTongSignInByWechatMiniProgram(ctx context.Context, in *JingTongSignInByWechatMiniProgramRequest, opts ...grpc.CallOption) (*JingTongSignInByWechatMiniProgramResponse, error)
	//获取用户信息
	JingTongGetUserProfile(ctx context.Context, in *JingTongGetUserProfileRequest, opts ...grpc.CallOption) (*JingTongGetUserProfileResponse, error)
}

type userAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewUserAPIClient(cc grpc.ClientConnInterface) UserAPIClient {
	return &userAPIClient{cc}
}

func (c *userAPIClient) SignInByPhoneCode(ctx context.Context, in *SignInByPhoneCodeRequest, opts ...grpc.CallOption) (*SignInByPhoneCodeResponse, error) {
	out := new(SignInByPhoneCodeResponse)
	err := c.cc.Invoke(ctx, "/jthealth.biz.user.v1.UserAPI/SignInByPhoneCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) SignInByPassWord(ctx context.Context, in *SignInByPassWordRequest, opts ...grpc.CallOption) (*SignInByPassWordResponse, error) {
	out := new(SignInByPassWordResponse)
	err := c.cc.Invoke(ctx, "/jthealth.biz.user.v1.UserAPI/SignInByPassWord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) GetUserInfosById(ctx context.Context, in *GetUserInfosByIdRequest, opts ...grpc.CallOption) (*GetUserInfosByIdResponse, error) {
	out := new(GetUserInfosByIdResponse)
	err := c.cc.Invoke(ctx, "/jthealth.biz.user.v1.UserAPI/GetUserInfosById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) UpdateUserInfos(ctx context.Context, in *UpdateUserInfosRequest, opts ...grpc.CallOption) (*UpdateUserInfosResponse, error) {
	out := new(UpdateUserInfosResponse)
	err := c.cc.Invoke(ctx, "/jthealth.biz.user.v1.UserAPI/UpdateUserInfos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) CreatedUserProfile(ctx context.Context, in *CreatedUserProfileRequest, opts ...grpc.CallOption) (*CreatedUserProfileResponse, error) {
	out := new(CreatedUserProfileResponse)
	err := c.cc.Invoke(ctx, "/jthealth.biz.user.v1.UserAPI/CreatedUserProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) GetUserInfosList(ctx context.Context, in *GetUserInfosListRequest, opts ...grpc.CallOption) (*GetUserInfosListResponse, error) {
	out := new(GetUserInfosListResponse)
	err := c.cc.Invoke(ctx, "/jthealth.biz.user.v1.UserAPI/GetUserInfosList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) GetUserInfosByAppKey(ctx context.Context, in *GetUserInfosByAppKeyRequest, opts ...grpc.CallOption) (*GetUserInfosByAppKeyResponse, error) {
	out := new(GetUserInfosByAppKeyResponse)
	err := c.cc.Invoke(ctx, "/jthealth.biz.user.v1.UserAPI/GetUserInfosByAppKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) ApplyApplication(ctx context.Context, in *ApplyApplicationRequest, opts ...grpc.CallOption) (*ApplyApplicationResponse, error) {
	out := new(ApplyApplicationResponse)
	err := c.cc.Invoke(ctx, "/jthealth.biz.user.v1.UserAPI/ApplyApplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) GetApplicationInfo(ctx context.Context, in *GetApplicationInfoRequest, opts ...grpc.CallOption) (*GetApplicationInfoResponse, error) {
	out := new(GetApplicationInfoResponse)
	err := c.cc.Invoke(ctx, "/jthealth.biz.user.v1.UserAPI/GetApplicationInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) RestAppSecretById(ctx context.Context, in *RestAppSecretByIdRequest, opts ...grpc.CallOption) (*RestAppSecretByIdResponse, error) {
	out := new(RestAppSecretByIdResponse)
	err := c.cc.Invoke(ctx, "/jthealth.biz.user.v1.UserAPI/RestAppSecretById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) GetApplicationDetails(ctx context.Context, in *GetApplicationDetailsRequest, opts ...grpc.CallOption) (*GetApplicationDetailsResponse, error) {
	out := new(GetApplicationDetailsResponse)
	err := c.cc.Invoke(ctx, "/jthealth.biz.user.v1.UserAPI/GetApplicationDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) GetApplicationByAppId(ctx context.Context, in *GetApplicationByAppIdRequest, opts ...grpc.CallOption) (*GetApplicationByAppIdResponse, error) {
	out := new(GetApplicationByAppIdResponse)
	err := c.cc.Invoke(ctx, "/jthealth.biz.user.v1.UserAPI/GetApplicationByAppId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) ApplyFeatureAudit(ctx context.Context, in *ApplyFeatureAuditRequest, opts ...grpc.CallOption) (*ApplyFeatureAuditResponse, error) {
	out := new(ApplyFeatureAuditResponse)
	err := c.cc.Invoke(ctx, "/jthealth.biz.user.v1.UserAPI/ApplyFeatureAudit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) GetFeatureAuditList(ctx context.Context, in *GetFeatureAuditListRequest, opts ...grpc.CallOption) (*GetFeatureAuditListResponse, error) {
	out := new(GetFeatureAuditListResponse)
	err := c.cc.Invoke(ctx, "/jthealth.biz.user.v1.UserAPI/GetFeatureAuditList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) UpdateFeatureAudit(ctx context.Context, in *UpdateFeatureAuditRequest, opts ...grpc.CallOption) (*UpdateFeatureAuditResponse, error) {
	out := new(UpdateFeatureAuditResponse)
	err := c.cc.Invoke(ctx, "/jthealth.biz.user.v1.UserAPI/UpdateFeatureAudit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) GetNotifyList(ctx context.Context, in *GetNotifyListRequest, opts ...grpc.CallOption) (*GetNotifyListResponse, error) {
	out := new(GetNotifyListResponse)
	err := c.cc.Invoke(ctx, "/jthealth.biz.user.v1.UserAPI/GetNotifyList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) SendNotify(ctx context.Context, in *SendNotifyRequest, opts ...grpc.CallOption) (*SendNotifyResponse, error) {
	out := new(SendNotifyResponse)
	err := c.cc.Invoke(ctx, "/jthealth.biz.user.v1.UserAPI/SendNotify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) GetUserProfile(ctx context.Context, in *GetUserProfileRequest, opts ...grpc.CallOption) (*GetUserProfileResponse, error) {
	out := new(GetUserProfileResponse)
	err := c.cc.Invoke(ctx, "/jthealth.biz.user.v1.UserAPI/GetUserProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) SubmitUserProfile(ctx context.Context, in *SubmitUserProfileRequest, opts ...grpc.CallOption) (*SubmitUserProfileResponse, error) {
	out := new(SubmitUserProfileResponse)
	err := c.cc.Invoke(ctx, "/jthealth.biz.user.v1.UserAPI/SubmitUserProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) JingTongSignInByPhoneCode(ctx context.Context, in *JingTongSignInByPhoneCodeRequest, opts ...grpc.CallOption) (*JingTongSignInByPhoneCodeResponse, error) {
	out := new(JingTongSignInByPhoneCodeResponse)
	err := c.cc.Invoke(ctx, "/jthealth.biz.user.v1.UserAPI/JingTongSignInByPhoneCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) JingTongSignInByWechatMiniProgram(ctx context.Context, in *JingTongSignInByWechatMiniProgramRequest, opts ...grpc.CallOption) (*JingTongSignInByWechatMiniProgramResponse, error) {
	out := new(JingTongSignInByWechatMiniProgramResponse)
	err := c.cc.Invoke(ctx, "/jthealth.biz.user.v1.UserAPI/JingTongSignInByWechatMiniProgram", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) JingTongGetUserProfile(ctx context.Context, in *JingTongGetUserProfileRequest, opts ...grpc.CallOption) (*JingTongGetUserProfileResponse, error) {
	out := new(JingTongGetUserProfileResponse)
	err := c.cc.Invoke(ctx, "/jthealth.biz.user.v1.UserAPI/JingTongGetUserProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserAPIServer is the server API for UserAPI service.
// All implementations must embed UnimplementedUserAPIServer
// for forward compatibility
type UserAPIServer interface {
	// SignInByPhoneCode 手机号验证码登录.
	SignInByPhoneCode(context.Context, *SignInByPhoneCodeRequest) (*SignInByPhoneCodeResponse, error)
	//SignInByPassWord 账号密码登录
	SignInByPassWord(context.Context, *SignInByPassWordRequest) (*SignInByPassWordResponse, error)
	//GetUserInfosById 获取用户信息
	GetUserInfosById(context.Context, *GetUserInfosByIdRequest) (*GetUserInfosByIdResponse, error)
	//UpdateUserInfos  更改用户信息
	UpdateUserInfos(context.Context, *UpdateUserInfosRequest) (*UpdateUserInfosResponse, error)
	//CreatedUserProfile 创建用户档案
	CreatedUserProfile(context.Context, *CreatedUserProfileRequest) (*CreatedUserProfileResponse, error)
	//GetUserInfosList 获取用户信息列表
	GetUserInfosList(context.Context, *GetUserInfosListRequest) (*GetUserInfosListResponse, error)
	//获取用户信息通过appKey
	GetUserInfosByAppKey(context.Context, *GetUserInfosByAppKeyRequest) (*GetUserInfosByAppKeyResponse, error)
	//----------------------应用-------------------------------
	//应用申请
	ApplyApplication(context.Context, *ApplyApplicationRequest) (*ApplyApplicationResponse, error)
	//获取应用列表
	GetApplicationInfo(context.Context, *GetApplicationInfoRequest) (*GetApplicationInfoResponse, error)
	//重置app_secret
	RestAppSecretById(context.Context, *RestAppSecretByIdRequest) (*RestAppSecretByIdResponse, error)
	//获取单个应用详情
	GetApplicationDetails(context.Context, *GetApplicationDetailsRequest) (*GetApplicationDetailsResponse, error)
	//获取应用通过appid
	GetApplicationByAppId(context.Context, *GetApplicationByAppIdRequest) (*GetApplicationByAppIdResponse, error)
	//应用功能申请
	ApplyFeatureAudit(context.Context, *ApplyFeatureAuditRequest) (*ApplyFeatureAuditResponse, error)
	//获取审核列表
	GetFeatureAuditList(context.Context, *GetFeatureAuditListRequest) (*GetFeatureAuditListResponse, error)
	//应用功能审核
	UpdateFeatureAudit(context.Context, *UpdateFeatureAuditRequest) (*UpdateFeatureAuditResponse, error)
	//获取消息通知
	GetNotifyList(context.Context, *GetNotifyListRequest) (*GetNotifyListResponse, error)
	//发送通知
	SendNotify(context.Context, *SendNotifyRequest) (*SendNotifyResponse, error)
	//----------------用户档案---------------
	// GetUserProfile 获取用户档案.
	GetUserProfile(context.Context, *GetUserProfileRequest) (*GetUserProfileResponse, error)
	// 提交用户档案
	SubmitUserProfile(context.Context, *SubmitUserProfileRequest) (*SubmitUserProfileResponse, error)
	//---------------------经通天下------------------
	//手机号验证码登录
	JingTongSignInByPhoneCode(context.Context, *JingTongSignInByPhoneCodeRequest) (*JingTongSignInByPhoneCodeResponse, error)
	//微信授权登录
	JingTongSignInByWechatMiniProgram(context.Context, *JingTongSignInByWechatMiniProgramRequest) (*JingTongSignInByWechatMiniProgramResponse, error)
	//获取用户信息
	JingTongGetUserProfile(context.Context, *JingTongGetUserProfileRequest) (*JingTongGetUserProfileResponse, error)
	mustEmbedUnimplementedUserAPIServer()
}

// UnimplementedUserAPIServer must be embedded to have forward compatible implementations.
type UnimplementedUserAPIServer struct {
}

func (UnimplementedUserAPIServer) SignInByPhoneCode(context.Context, *SignInByPhoneCodeRequest) (*SignInByPhoneCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignInByPhoneCode not implemented")
}
func (UnimplementedUserAPIServer) SignInByPassWord(context.Context, *SignInByPassWordRequest) (*SignInByPassWordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignInByPassWord not implemented")
}
func (UnimplementedUserAPIServer) GetUserInfosById(context.Context, *GetUserInfosByIdRequest) (*GetUserInfosByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfosById not implemented")
}
func (UnimplementedUserAPIServer) UpdateUserInfos(context.Context, *UpdateUserInfosRequest) (*UpdateUserInfosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserInfos not implemented")
}
func (UnimplementedUserAPIServer) CreatedUserProfile(context.Context, *CreatedUserProfileRequest) (*CreatedUserProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatedUserProfile not implemented")
}
func (UnimplementedUserAPIServer) GetUserInfosList(context.Context, *GetUserInfosListRequest) (*GetUserInfosListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfosList not implemented")
}
func (UnimplementedUserAPIServer) GetUserInfosByAppKey(context.Context, *GetUserInfosByAppKeyRequest) (*GetUserInfosByAppKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfosByAppKey not implemented")
}
func (UnimplementedUserAPIServer) ApplyApplication(context.Context, *ApplyApplicationRequest) (*ApplyApplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyApplication not implemented")
}
func (UnimplementedUserAPIServer) GetApplicationInfo(context.Context, *GetApplicationInfoRequest) (*GetApplicationInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApplicationInfo not implemented")
}
func (UnimplementedUserAPIServer) RestAppSecretById(context.Context, *RestAppSecretByIdRequest) (*RestAppSecretByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestAppSecretById not implemented")
}
func (UnimplementedUserAPIServer) GetApplicationDetails(context.Context, *GetApplicationDetailsRequest) (*GetApplicationDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApplicationDetails not implemented")
}
func (UnimplementedUserAPIServer) GetApplicationByAppId(context.Context, *GetApplicationByAppIdRequest) (*GetApplicationByAppIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApplicationByAppId not implemented")
}
func (UnimplementedUserAPIServer) ApplyFeatureAudit(context.Context, *ApplyFeatureAuditRequest) (*ApplyFeatureAuditResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyFeatureAudit not implemented")
}
func (UnimplementedUserAPIServer) GetFeatureAuditList(context.Context, *GetFeatureAuditListRequest) (*GetFeatureAuditListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeatureAuditList not implemented")
}
func (UnimplementedUserAPIServer) UpdateFeatureAudit(context.Context, *UpdateFeatureAuditRequest) (*UpdateFeatureAuditResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFeatureAudit not implemented")
}
func (UnimplementedUserAPIServer) GetNotifyList(context.Context, *GetNotifyListRequest) (*GetNotifyListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotifyList not implemented")
}
func (UnimplementedUserAPIServer) SendNotify(context.Context, *SendNotifyRequest) (*SendNotifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendNotify not implemented")
}
func (UnimplementedUserAPIServer) GetUserProfile(context.Context, *GetUserProfileRequest) (*GetUserProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserProfile not implemented")
}
func (UnimplementedUserAPIServer) SubmitUserProfile(context.Context, *SubmitUserProfileRequest) (*SubmitUserProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitUserProfile not implemented")
}
func (UnimplementedUserAPIServer) JingTongSignInByPhoneCode(context.Context, *JingTongSignInByPhoneCodeRequest) (*JingTongSignInByPhoneCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JingTongSignInByPhoneCode not implemented")
}
func (UnimplementedUserAPIServer) JingTongSignInByWechatMiniProgram(context.Context, *JingTongSignInByWechatMiniProgramRequest) (*JingTongSignInByWechatMiniProgramResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JingTongSignInByWechatMiniProgram not implemented")
}
func (UnimplementedUserAPIServer) JingTongGetUserProfile(context.Context, *JingTongGetUserProfileRequest) (*JingTongGetUserProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JingTongGetUserProfile not implemented")
}
func (UnimplementedUserAPIServer) mustEmbedUnimplementedUserAPIServer() {}

// UnsafeUserAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserAPIServer will
// result in compilation errors.
type UnsafeUserAPIServer interface {
	mustEmbedUnimplementedUserAPIServer()
}

func RegisterUserAPIServer(s *grpc.Server, srv UserAPIServer) {
	s.RegisterService(&_UserAPI_serviceDesc, srv)
}

func _UserAPI_SignInByPhoneCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignInByPhoneCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).SignInByPhoneCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jthealth.biz.user.v1.UserAPI/SignInByPhoneCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).SignInByPhoneCode(ctx, req.(*SignInByPhoneCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_SignInByPassWord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignInByPassWordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).SignInByPassWord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jthealth.biz.user.v1.UserAPI/SignInByPassWord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).SignInByPassWord(ctx, req.(*SignInByPassWordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_GetUserInfosById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInfosByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).GetUserInfosById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jthealth.biz.user.v1.UserAPI/GetUserInfosById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).GetUserInfosById(ctx, req.(*GetUserInfosByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_UpdateUserInfos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserInfosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).UpdateUserInfos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jthealth.biz.user.v1.UserAPI/UpdateUserInfos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).UpdateUserInfos(ctx, req.(*UpdateUserInfosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_CreatedUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatedUserProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).CreatedUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jthealth.biz.user.v1.UserAPI/CreatedUserProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).CreatedUserProfile(ctx, req.(*CreatedUserProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_GetUserInfosList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInfosListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).GetUserInfosList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jthealth.biz.user.v1.UserAPI/GetUserInfosList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).GetUserInfosList(ctx, req.(*GetUserInfosListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_GetUserInfosByAppKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInfosByAppKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).GetUserInfosByAppKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jthealth.biz.user.v1.UserAPI/GetUserInfosByAppKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).GetUserInfosByAppKey(ctx, req.(*GetUserInfosByAppKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_ApplyApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).ApplyApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jthealth.biz.user.v1.UserAPI/ApplyApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).ApplyApplication(ctx, req.(*ApplyApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_GetApplicationInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApplicationInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).GetApplicationInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jthealth.biz.user.v1.UserAPI/GetApplicationInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).GetApplicationInfo(ctx, req.(*GetApplicationInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_RestAppSecretById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestAppSecretByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).RestAppSecretById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jthealth.biz.user.v1.UserAPI/RestAppSecretById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).RestAppSecretById(ctx, req.(*RestAppSecretByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_GetApplicationDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApplicationDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).GetApplicationDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jthealth.biz.user.v1.UserAPI/GetApplicationDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).GetApplicationDetails(ctx, req.(*GetApplicationDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_GetApplicationByAppId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApplicationByAppIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).GetApplicationByAppId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jthealth.biz.user.v1.UserAPI/GetApplicationByAppId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).GetApplicationByAppId(ctx, req.(*GetApplicationByAppIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_ApplyFeatureAudit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyFeatureAuditRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).ApplyFeatureAudit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jthealth.biz.user.v1.UserAPI/ApplyFeatureAudit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).ApplyFeatureAudit(ctx, req.(*ApplyFeatureAuditRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_GetFeatureAuditList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFeatureAuditListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).GetFeatureAuditList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jthealth.biz.user.v1.UserAPI/GetFeatureAuditList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).GetFeatureAuditList(ctx, req.(*GetFeatureAuditListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_UpdateFeatureAudit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFeatureAuditRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).UpdateFeatureAudit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jthealth.biz.user.v1.UserAPI/UpdateFeatureAudit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).UpdateFeatureAudit(ctx, req.(*UpdateFeatureAuditRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_GetNotifyList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNotifyListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).GetNotifyList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jthealth.biz.user.v1.UserAPI/GetNotifyList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).GetNotifyList(ctx, req.(*GetNotifyListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_SendNotify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendNotifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).SendNotify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jthealth.biz.user.v1.UserAPI/SendNotify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).SendNotify(ctx, req.(*SendNotifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_GetUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).GetUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jthealth.biz.user.v1.UserAPI/GetUserProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).GetUserProfile(ctx, req.(*GetUserProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_SubmitUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitUserProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).SubmitUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jthealth.biz.user.v1.UserAPI/SubmitUserProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).SubmitUserProfile(ctx, req.(*SubmitUserProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_JingTongSignInByPhoneCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JingTongSignInByPhoneCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).JingTongSignInByPhoneCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jthealth.biz.user.v1.UserAPI/JingTongSignInByPhoneCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).JingTongSignInByPhoneCode(ctx, req.(*JingTongSignInByPhoneCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_JingTongSignInByWechatMiniProgram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JingTongSignInByWechatMiniProgramRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).JingTongSignInByWechatMiniProgram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jthealth.biz.user.v1.UserAPI/JingTongSignInByWechatMiniProgram",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).JingTongSignInByWechatMiniProgram(ctx, req.(*JingTongSignInByWechatMiniProgramRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_JingTongGetUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JingTongGetUserProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).JingTongGetUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jthealth.biz.user.v1.UserAPI/JingTongGetUserProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).JingTongGetUserProfile(ctx, req.(*JingTongGetUserProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "jthealth.biz.user.v1.UserAPI",
	HandlerType: (*UserAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SignInByPhoneCode",
			Handler:    _UserAPI_SignInByPhoneCode_Handler,
		},
		{
			MethodName: "SignInByPassWord",
			Handler:    _UserAPI_SignInByPassWord_Handler,
		},
		{
			MethodName: "GetUserInfosById",
			Handler:    _UserAPI_GetUserInfosById_Handler,
		},
		{
			MethodName: "UpdateUserInfos",
			Handler:    _UserAPI_UpdateUserInfos_Handler,
		},
		{
			MethodName: "CreatedUserProfile",
			Handler:    _UserAPI_CreatedUserProfile_Handler,
		},
		{
			MethodName: "GetUserInfosList",
			Handler:    _UserAPI_GetUserInfosList_Handler,
		},
		{
			MethodName: "GetUserInfosByAppKey",
			Handler:    _UserAPI_GetUserInfosByAppKey_Handler,
		},
		{
			MethodName: "ApplyApplication",
			Handler:    _UserAPI_ApplyApplication_Handler,
		},
		{
			MethodName: "GetApplicationInfo",
			Handler:    _UserAPI_GetApplicationInfo_Handler,
		},
		{
			MethodName: "RestAppSecretById",
			Handler:    _UserAPI_RestAppSecretById_Handler,
		},
		{
			MethodName: "GetApplicationDetails",
			Handler:    _UserAPI_GetApplicationDetails_Handler,
		},
		{
			MethodName: "GetApplicationByAppId",
			Handler:    _UserAPI_GetApplicationByAppId_Handler,
		},
		{
			MethodName: "ApplyFeatureAudit",
			Handler:    _UserAPI_ApplyFeatureAudit_Handler,
		},
		{
			MethodName: "GetFeatureAuditList",
			Handler:    _UserAPI_GetFeatureAuditList_Handler,
		},
		{
			MethodName: "UpdateFeatureAudit",
			Handler:    _UserAPI_UpdateFeatureAudit_Handler,
		},
		{
			MethodName: "GetNotifyList",
			Handler:    _UserAPI_GetNotifyList_Handler,
		},
		{
			MethodName: "SendNotify",
			Handler:    _UserAPI_SendNotify_Handler,
		},
		{
			MethodName: "GetUserProfile",
			Handler:    _UserAPI_GetUserProfile_Handler,
		},
		{
			MethodName: "SubmitUserProfile",
			Handler:    _UserAPI_SubmitUserProfile_Handler,
		},
		{
			MethodName: "JingTongSignInByPhoneCode",
			Handler:    _UserAPI_JingTongSignInByPhoneCode_Handler,
		},
		{
			MethodName: "JingTongSignInByWechatMiniProgram",
			Handler:    _UserAPI_JingTongSignInByWechatMiniProgram_Handler,
		},
		{
			MethodName: "JingTongGetUserProfile",
			Handler:    _UserAPI_JingTongGetUserProfile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "jthealth/biz/user/v1/user_api.proto",
}
