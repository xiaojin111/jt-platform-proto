// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package userv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AppletUserAPIClient is the client API for AppletUserAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppletUserAPIClient interface {
	// AppletUserSignInByPhoneCode 手机号验证码登录.
	AppletUserSignInByPhoneCode(ctx context.Context, in *AppletUserSignInByPhoneCodeRequest, opts ...grpc.CallOption) (*AppletUserSignInByPhoneCodeResponse, error)
	// SignInByWechat 通过微信小程序登录.
	SignInByWechatMiniProgram(ctx context.Context, in *SignInByWechatMiniProgramRequest, opts ...grpc.CallOption) (*SignInByWechatMiniProgramResponse, error)
	// GetWechatPhone 获取微信手机号.
	GetWechatPhone(ctx context.Context, in *GetWechatPhoneRequest, opts ...grpc.CallOption) (*GetWechatPhoneResponse, error)
	// BindWechatPhone 微信登录绑定手机号.
	BindWechatPhone(ctx context.Context, in *BindWechatPhoneRequest, opts ...grpc.CallOption) (*BindWechatPhoneResponse, error)
}

type appletUserAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewAppletUserAPIClient(cc grpc.ClientConnInterface) AppletUserAPIClient {
	return &appletUserAPIClient{cc}
}

func (c *appletUserAPIClient) AppletUserSignInByPhoneCode(ctx context.Context, in *AppletUserSignInByPhoneCodeRequest, opts ...grpc.CallOption) (*AppletUserSignInByPhoneCodeResponse, error) {
	out := new(AppletUserSignInByPhoneCodeResponse)
	err := c.cc.Invoke(ctx, "/jthealth.biz.user.v1.AppletUserAPI/AppletUserSignInByPhoneCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appletUserAPIClient) SignInByWechatMiniProgram(ctx context.Context, in *SignInByWechatMiniProgramRequest, opts ...grpc.CallOption) (*SignInByWechatMiniProgramResponse, error) {
	out := new(SignInByWechatMiniProgramResponse)
	err := c.cc.Invoke(ctx, "/jthealth.biz.user.v1.AppletUserAPI/SignInByWechatMiniProgram", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appletUserAPIClient) GetWechatPhone(ctx context.Context, in *GetWechatPhoneRequest, opts ...grpc.CallOption) (*GetWechatPhoneResponse, error) {
	out := new(GetWechatPhoneResponse)
	err := c.cc.Invoke(ctx, "/jthealth.biz.user.v1.AppletUserAPI/GetWechatPhone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appletUserAPIClient) BindWechatPhone(ctx context.Context, in *BindWechatPhoneRequest, opts ...grpc.CallOption) (*BindWechatPhoneResponse, error) {
	out := new(BindWechatPhoneResponse)
	err := c.cc.Invoke(ctx, "/jthealth.biz.user.v1.AppletUserAPI/BindWechatPhone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppletUserAPIServer is the server API for AppletUserAPI service.
// All implementations must embed UnimplementedAppletUserAPIServer
// for forward compatibility
type AppletUserAPIServer interface {
	// AppletUserSignInByPhoneCode 手机号验证码登录.
	AppletUserSignInByPhoneCode(context.Context, *AppletUserSignInByPhoneCodeRequest) (*AppletUserSignInByPhoneCodeResponse, error)
	// SignInByWechat 通过微信小程序登录.
	SignInByWechatMiniProgram(context.Context, *SignInByWechatMiniProgramRequest) (*SignInByWechatMiniProgramResponse, error)
	// GetWechatPhone 获取微信手机号.
	GetWechatPhone(context.Context, *GetWechatPhoneRequest) (*GetWechatPhoneResponse, error)
	// BindWechatPhone 微信登录绑定手机号.
	BindWechatPhone(context.Context, *BindWechatPhoneRequest) (*BindWechatPhoneResponse, error)
	mustEmbedUnimplementedAppletUserAPIServer()
}

// UnimplementedAppletUserAPIServer must be embedded to have forward compatible implementations.
type UnimplementedAppletUserAPIServer struct {
}

func (UnimplementedAppletUserAPIServer) AppletUserSignInByPhoneCode(context.Context, *AppletUserSignInByPhoneCodeRequest) (*AppletUserSignInByPhoneCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppletUserSignInByPhoneCode not implemented")
}
func (UnimplementedAppletUserAPIServer) SignInByWechatMiniProgram(context.Context, *SignInByWechatMiniProgramRequest) (*SignInByWechatMiniProgramResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignInByWechatMiniProgram not implemented")
}
func (UnimplementedAppletUserAPIServer) GetWechatPhone(context.Context, *GetWechatPhoneRequest) (*GetWechatPhoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWechatPhone not implemented")
}
func (UnimplementedAppletUserAPIServer) BindWechatPhone(context.Context, *BindWechatPhoneRequest) (*BindWechatPhoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BindWechatPhone not implemented")
}
func (UnimplementedAppletUserAPIServer) mustEmbedUnimplementedAppletUserAPIServer() {}

// UnsafeAppletUserAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppletUserAPIServer will
// result in compilation errors.
type UnsafeAppletUserAPIServer interface {
	mustEmbedUnimplementedAppletUserAPIServer()
}

func RegisterAppletUserAPIServer(s *grpc.Server, srv AppletUserAPIServer) {
	s.RegisterService(&_AppletUserAPI_serviceDesc, srv)
}

func _AppletUserAPI_AppletUserSignInByPhoneCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppletUserSignInByPhoneCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppletUserAPIServer).AppletUserSignInByPhoneCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jthealth.biz.user.v1.AppletUserAPI/AppletUserSignInByPhoneCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppletUserAPIServer).AppletUserSignInByPhoneCode(ctx, req.(*AppletUserSignInByPhoneCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppletUserAPI_SignInByWechatMiniProgram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignInByWechatMiniProgramRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppletUserAPIServer).SignInByWechatMiniProgram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jthealth.biz.user.v1.AppletUserAPI/SignInByWechatMiniProgram",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppletUserAPIServer).SignInByWechatMiniProgram(ctx, req.(*SignInByWechatMiniProgramRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppletUserAPI_GetWechatPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWechatPhoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppletUserAPIServer).GetWechatPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jthealth.biz.user.v1.AppletUserAPI/GetWechatPhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppletUserAPIServer).GetWechatPhone(ctx, req.(*GetWechatPhoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppletUserAPI_BindWechatPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BindWechatPhoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppletUserAPIServer).BindWechatPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jthealth.biz.user.v1.AppletUserAPI/BindWechatPhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppletUserAPIServer).BindWechatPhone(ctx, req.(*BindWechatPhoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AppletUserAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "jthealth.biz.user.v1.AppletUserAPI",
	HandlerType: (*AppletUserAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AppletUserSignInByPhoneCode",
			Handler:    _AppletUserAPI_AppletUserSignInByPhoneCode_Handler,
		},
		{
			MethodName: "SignInByWechatMiniProgram",
			Handler:    _AppletUserAPI_SignInByWechatMiniProgram_Handler,
		},
		{
			MethodName: "GetWechatPhone",
			Handler:    _AppletUserAPI_GetWechatPhone_Handler,
		},
		{
			MethodName: "BindWechatPhone",
			Handler:    _AppletUserAPI_BindWechatPhone_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "jthealth/biz/user/v1/applet_user_api.proto",
}
