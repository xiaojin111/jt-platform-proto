// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: jthealth/biz/report/v1/report_api.proto

package reportv1

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	_ "google.golang.org/protobuf/types/known/wrapperspb"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for ReportAPI service

func NewReportAPIEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for ReportAPI service

type ReportAPIService interface {
	// SubmitPulseTest 提交采样数据.
	SubmitPulseTest(ctx context.Context, in *SubmitPulseTestRequest, opts ...client.CallOption) (*SubmitPulseTestResponse, error)
	// GetReport 获取阶梯报告.
	GetReport(ctx context.Context, in *GetReportRequest, opts ...client.CallOption) (*GetReportResponse, error)
	//创建风险推荐商品
	CreateRiskCommodity(ctx context.Context, in *CreateRiskCommodityRequest, opts ...client.CallOption) (*CreateRiskCommodityResponse, error)
	//获取风险列表
	GetRiskList(ctx context.Context, in *emptypb.Empty, opts ...client.CallOption) (*GetRiskListResponse, error)
	//获取推荐商品列表
	GetRiskCommodityList(ctx context.Context, in *GetRiskCommodityListRequest, opts ...client.CallOption) (*GetRiskCommodityListResponse, error)
	//编辑报告显示内容
	EditReportShow(ctx context.Context, in *EditReportShowRequest, opts ...client.CallOption) (*EditReportShowResponse, error)
	//获取报告显示内容
	GetReportShow(ctx context.Context, in *GetReportShowRequest, opts ...client.CallOption) (*GetReportShowResponse, error)
	//编辑报告对比显示功能
	EditReportComparedShow(ctx context.Context, in *EditReportComparedShowRequest, opts ...client.CallOption) (*EditReportComparedShowResponse, error)
	//获取报告对比显示功能
	GetReportComparedShow(ctx context.Context, in *GetReportComparedShowRequest, opts ...client.CallOption) (*GetReportComparedShowResponse, error)
}

type reportAPIService struct {
	c    client.Client
	name string
}

func NewReportAPIService(name string, c client.Client) ReportAPIService {
	return &reportAPIService{
		c:    c,
		name: name,
	}
}

func (c *reportAPIService) SubmitPulseTest(ctx context.Context, in *SubmitPulseTestRequest, opts ...client.CallOption) (*SubmitPulseTestResponse, error) {
	req := c.c.NewRequest(c.name, "ReportAPI.SubmitPulseTest", in)
	out := new(SubmitPulseTestResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportAPIService) GetReport(ctx context.Context, in *GetReportRequest, opts ...client.CallOption) (*GetReportResponse, error) {
	req := c.c.NewRequest(c.name, "ReportAPI.GetReport", in)
	out := new(GetReportResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportAPIService) CreateRiskCommodity(ctx context.Context, in *CreateRiskCommodityRequest, opts ...client.CallOption) (*CreateRiskCommodityResponse, error) {
	req := c.c.NewRequest(c.name, "ReportAPI.CreateRiskCommodity", in)
	out := new(CreateRiskCommodityResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportAPIService) GetRiskList(ctx context.Context, in *emptypb.Empty, opts ...client.CallOption) (*GetRiskListResponse, error) {
	req := c.c.NewRequest(c.name, "ReportAPI.GetRiskList", in)
	out := new(GetRiskListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportAPIService) GetRiskCommodityList(ctx context.Context, in *GetRiskCommodityListRequest, opts ...client.CallOption) (*GetRiskCommodityListResponse, error) {
	req := c.c.NewRequest(c.name, "ReportAPI.GetRiskCommodityList", in)
	out := new(GetRiskCommodityListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportAPIService) EditReportShow(ctx context.Context, in *EditReportShowRequest, opts ...client.CallOption) (*EditReportShowResponse, error) {
	req := c.c.NewRequest(c.name, "ReportAPI.EditReportShow", in)
	out := new(EditReportShowResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportAPIService) GetReportShow(ctx context.Context, in *GetReportShowRequest, opts ...client.CallOption) (*GetReportShowResponse, error) {
	req := c.c.NewRequest(c.name, "ReportAPI.GetReportShow", in)
	out := new(GetReportShowResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportAPIService) EditReportComparedShow(ctx context.Context, in *EditReportComparedShowRequest, opts ...client.CallOption) (*EditReportComparedShowResponse, error) {
	req := c.c.NewRequest(c.name, "ReportAPI.EditReportComparedShow", in)
	out := new(EditReportComparedShowResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportAPIService) GetReportComparedShow(ctx context.Context, in *GetReportComparedShowRequest, opts ...client.CallOption) (*GetReportComparedShowResponse, error) {
	req := c.c.NewRequest(c.name, "ReportAPI.GetReportComparedShow", in)
	out := new(GetReportComparedShowResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ReportAPI service

type ReportAPIHandler interface {
	// SubmitPulseTest 提交采样数据.
	SubmitPulseTest(context.Context, *SubmitPulseTestRequest, *SubmitPulseTestResponse) error
	// GetReport 获取阶梯报告.
	GetReport(context.Context, *GetReportRequest, *GetReportResponse) error
	//创建风险推荐商品
	CreateRiskCommodity(context.Context, *CreateRiskCommodityRequest, *CreateRiskCommodityResponse) error
	//获取风险列表
	GetRiskList(context.Context, *emptypb.Empty, *GetRiskListResponse) error
	//获取推荐商品列表
	GetRiskCommodityList(context.Context, *GetRiskCommodityListRequest, *GetRiskCommodityListResponse) error
	//编辑报告显示内容
	EditReportShow(context.Context, *EditReportShowRequest, *EditReportShowResponse) error
	//获取报告显示内容
	GetReportShow(context.Context, *GetReportShowRequest, *GetReportShowResponse) error
	//编辑报告对比显示功能
	EditReportComparedShow(context.Context, *EditReportComparedShowRequest, *EditReportComparedShowResponse) error
	//获取报告对比显示功能
	GetReportComparedShow(context.Context, *GetReportComparedShowRequest, *GetReportComparedShowResponse) error
}

func RegisterReportAPIHandler(s server.Server, hdlr ReportAPIHandler, opts ...server.HandlerOption) error {
	type reportAPI interface {
		SubmitPulseTest(ctx context.Context, in *SubmitPulseTestRequest, out *SubmitPulseTestResponse) error
		GetReport(ctx context.Context, in *GetReportRequest, out *GetReportResponse) error
		CreateRiskCommodity(ctx context.Context, in *CreateRiskCommodityRequest, out *CreateRiskCommodityResponse) error
		GetRiskList(ctx context.Context, in *emptypb.Empty, out *GetRiskListResponse) error
		GetRiskCommodityList(ctx context.Context, in *GetRiskCommodityListRequest, out *GetRiskCommodityListResponse) error
		EditReportShow(ctx context.Context, in *EditReportShowRequest, out *EditReportShowResponse) error
		GetReportShow(ctx context.Context, in *GetReportShowRequest, out *GetReportShowResponse) error
		EditReportComparedShow(ctx context.Context, in *EditReportComparedShowRequest, out *EditReportComparedShowResponse) error
		GetReportComparedShow(ctx context.Context, in *GetReportComparedShowRequest, out *GetReportComparedShowResponse) error
	}
	type ReportAPI struct {
		reportAPI
	}
	h := &reportAPIHandler{hdlr}
	return s.Handle(s.NewHandler(&ReportAPI{h}, opts...))
}

type reportAPIHandler struct {
	ReportAPIHandler
}

func (h *reportAPIHandler) SubmitPulseTest(ctx context.Context, in *SubmitPulseTestRequest, out *SubmitPulseTestResponse) error {
	return h.ReportAPIHandler.SubmitPulseTest(ctx, in, out)
}

func (h *reportAPIHandler) GetReport(ctx context.Context, in *GetReportRequest, out *GetReportResponse) error {
	return h.ReportAPIHandler.GetReport(ctx, in, out)
}

func (h *reportAPIHandler) CreateRiskCommodity(ctx context.Context, in *CreateRiskCommodityRequest, out *CreateRiskCommodityResponse) error {
	return h.ReportAPIHandler.CreateRiskCommodity(ctx, in, out)
}

func (h *reportAPIHandler) GetRiskList(ctx context.Context, in *emptypb.Empty, out *GetRiskListResponse) error {
	return h.ReportAPIHandler.GetRiskList(ctx, in, out)
}

func (h *reportAPIHandler) GetRiskCommodityList(ctx context.Context, in *GetRiskCommodityListRequest, out *GetRiskCommodityListResponse) error {
	return h.ReportAPIHandler.GetRiskCommodityList(ctx, in, out)
}

func (h *reportAPIHandler) EditReportShow(ctx context.Context, in *EditReportShowRequest, out *EditReportShowResponse) error {
	return h.ReportAPIHandler.EditReportShow(ctx, in, out)
}

func (h *reportAPIHandler) GetReportShow(ctx context.Context, in *GetReportShowRequest, out *GetReportShowResponse) error {
	return h.ReportAPIHandler.GetReportShow(ctx, in, out)
}

func (h *reportAPIHandler) EditReportComparedShow(ctx context.Context, in *EditReportComparedShowRequest, out *EditReportComparedShowResponse) error {
	return h.ReportAPIHandler.EditReportComparedShow(ctx, in, out)
}

func (h *reportAPIHandler) GetReportComparedShow(ctx context.Context, in *GetReportComparedShowRequest, out *GetReportComparedShowResponse) error {
	return h.ReportAPIHandler.GetReportComparedShow(ctx, in, out)
}
