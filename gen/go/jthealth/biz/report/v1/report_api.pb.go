//
// 常州金姆健康科技有限公司. (c) 2019
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: jthealth/biz/report/v1/report_api.proto

package reportv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Gender 性别.
type Gender int32

const (
	// 无效的性别
	Gender_GENDER_INVALID Gender = 0
	// 未设置性别
	Gender_GENDER_UNSET Gender = 1
	// 男
	Gender_GENDER_MALE Gender = 2
	// 女
	Gender_GENDER_FEMALE Gender = 3
)

// Enum value maps for Gender.
var (
	Gender_name = map[int32]string{
		0: "GENDER_INVALID",
		1: "GENDER_UNSET",
		2: "GENDER_MALE",
		3: "GENDER_FEMALE",
	}
	Gender_value = map[string]int32{
		"GENDER_INVALID": 0,
		"GENDER_UNSET":   1,
		"GENDER_MALE":    2,
		"GENDER_FEMALE":  3,
	}
)

func (x Gender) Enum() *Gender {
	p := new(Gender)
	*p = x
	return p
}

func (x Gender) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Gender) Descriptor() protoreflect.EnumDescriptor {
	return file_jthealth_biz_report_v1_report_api_proto_enumTypes[0].Descriptor()
}

func (Gender) Type() protoreflect.EnumType {
	return &file_jthealth_biz_report_v1_report_api_proto_enumTypes[0]
}

func (x Gender) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Gender.Descriptor instead.
func (Gender) EnumDescriptor() ([]byte, []int) {
	return file_jthealth_biz_report_v1_report_api_proto_rawDescGZIP(), []int{0}
}

// Hand 测量手.
type Hand int32

const (
	// 无效的手
	Hand_HAND_INVALID Hand = 0
	// 未设置左右手
	Hand_HAND_UNSET Hand = 1
	// 左手
	Hand_HAND_LEFT Hand = 2
	// 右手
	Hand_HAND_RIGHT Hand = 3
)

// Enum value maps for Hand.
var (
	Hand_name = map[int32]string{
		0: "HAND_INVALID",
		1: "HAND_UNSET",
		2: "HAND_LEFT",
		3: "HAND_RIGHT",
	}
	Hand_value = map[string]int32{
		"HAND_INVALID": 0,
		"HAND_UNSET":   1,
		"HAND_LEFT":    2,
		"HAND_RIGHT":   3,
	}
)

func (x Hand) Enum() *Hand {
	p := new(Hand)
	*p = x
	return p
}

func (x Hand) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Hand) Descriptor() protoreflect.EnumDescriptor {
	return file_jthealth_biz_report_v1_report_api_proto_enumTypes[1].Descriptor()
}

func (Hand) Type() protoreflect.EnumType {
	return &file_jthealth_biz_report_v1_report_api_proto_enumTypes[1]
}

func (x Hand) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Hand.Descriptor instead.
func (Hand) EnumDescriptor() ([]byte, []int) {
	return file_jthealth_biz_report_v1_report_api_proto_rawDescGZIP(), []int{1}
}

// 提交一般形式的采样数据的请求
type SubmitPulseTestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 用户档案ID
	UserProfileId string `protobuf:"bytes,1,opt,name=user_profile_id,json=userProfileId,proto3" json:"user_profile_id,omitempty"`
	//用户信息
	UserProfileSnapshot *UserProfileSnapshot `protobuf:"bytes,2,opt,name=user_profile_snapshot,json=userProfileSnapshot,proto3" json:"user_profile_snapshot,omitempty"`
	// 单笔信号采样数据
	Payload *SamplePayload `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
	// 是否启用统计，启用统计会参与周报月报统计；
	EnableTrendingStatistics bool `protobuf:"varint,4,opt,name=enable_trending_statistics,json=enableTrendingStatistics,proto3" json:"enable_trending_statistics,omitempty"`
	//血氧
	BloodOxygen int32 `protobuf:"varint,5,opt,name=blood_oxygen,json=bloodOxygen,proto3" json:"blood_oxygen,omitempty"`
}

func (x *SubmitPulseTestRequest) Reset() {
	*x = SubmitPulseTestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jthealth_biz_report_v1_report_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitPulseTestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitPulseTestRequest) ProtoMessage() {}

func (x *SubmitPulseTestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jthealth_biz_report_v1_report_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitPulseTestRequest.ProtoReflect.Descriptor instead.
func (*SubmitPulseTestRequest) Descriptor() ([]byte, []int) {
	return file_jthealth_biz_report_v1_report_api_proto_rawDescGZIP(), []int{0}
}

func (x *SubmitPulseTestRequest) GetUserProfileId() string {
	if x != nil {
		return x.UserProfileId
	}
	return ""
}

func (x *SubmitPulseTestRequest) GetUserProfileSnapshot() *UserProfileSnapshot {
	if x != nil {
		return x.UserProfileSnapshot
	}
	return nil
}

func (x *SubmitPulseTestRequest) GetPayload() *SamplePayload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *SubmitPulseTestRequest) GetEnableTrendingStatistics() bool {
	if x != nil {
		return x.EnableTrendingStatistics
	}
	return false
}

func (x *SubmitPulseTestRequest) GetBloodOxygen() int32 {
	if x != nil {
		return x.BloodOxygen
	}
	return 0
}

// SamplePayload 一般形式的采样数据.
type SamplePayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 采样使用的手
	Hand Hand `protobuf:"varint,1,opt,name=hand,proto3,enum=jthealth.biz.report.v1.Hand" json:"hand,omitempty"`
	// 位置信息（可选）
	GeoLocation *GeoLocation `protobuf:"bytes,2,opt,name=geo_location,json=geoLocation,proto3" json:"geo_location,omitempty"`
	// 采样设备
	SampleDevice *SampleDevice `protobuf:"bytes,10,opt,name=sample_device,json=sampleDevice,proto3" json:"sample_device,omitempty"`
	// 采样数据
	SampleData *SampleData `protobuf:"bytes,11,opt,name=sample_data,json=sampleData,proto3" json:"sample_data,omitempty"`
	// 本次采样开始时间
	SamplingStartTime *timestamppb.Timestamp `protobuf:"bytes,20,opt,name=sampling_start_time,json=samplingStartTime,proto3" json:"sampling_start_time,omitempty"`
	// 本次采样结束时间
	SamplingStopTime *timestamppb.Timestamp `protobuf:"bytes,21,opt,name=sampling_stop_time,json=samplingStopTime,proto3" json:"sampling_stop_time,omitempty"`
}

func (x *SamplePayload) Reset() {
	*x = SamplePayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jthealth_biz_report_v1_report_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SamplePayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SamplePayload) ProtoMessage() {}

func (x *SamplePayload) ProtoReflect() protoreflect.Message {
	mi := &file_jthealth_biz_report_v1_report_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SamplePayload.ProtoReflect.Descriptor instead.
func (*SamplePayload) Descriptor() ([]byte, []int) {
	return file_jthealth_biz_report_v1_report_api_proto_rawDescGZIP(), []int{1}
}

func (x *SamplePayload) GetHand() Hand {
	if x != nil {
		return x.Hand
	}
	return Hand_HAND_INVALID
}

func (x *SamplePayload) GetGeoLocation() *GeoLocation {
	if x != nil {
		return x.GeoLocation
	}
	return nil
}

func (x *SamplePayload) GetSampleDevice() *SampleDevice {
	if x != nil {
		return x.SampleDevice
	}
	return nil
}

func (x *SamplePayload) GetSampleData() *SampleData {
	if x != nil {
		return x.SampleData
	}
	return nil
}

func (x *SamplePayload) GetSamplingStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.SamplingStartTime
	}
	return nil
}

func (x *SamplePayload) GetSamplingStopTime() *timestamppb.Timestamp {
	if x != nil {
		return x.SamplingStopTime
	}
	return nil
}

// 地理位置信息
type GeoLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// https://developer.mozilla.org/en-US/docs/Web/API/GeolocationCoordinates
	// 纬度: position's latitude in decimal degrees
	Latitude float64 `protobuf:"fixed64,1,opt,name=latitude,proto3" json:"latitude,omitempty"`
	// 经度: position's longitude in decimal degrees
	Longitude float64 `protobuf:"fixed64,2,opt,name=longitude,proto3" json:"longitude,omitempty"`
	// 海拔: position's altitude in meters, relative to sea level
	Altitude *wrapperspb.DoubleValue `protobuf:"bytes,3,opt,name=altitude,proto3" json:"altitude,omitempty"`
	// 经纬度的精度: accuracy of the latitude and longitude properties, expressed
	// in meters.
	Accuracy float64 `protobuf:"fixed64,4,opt,name=accuracy,proto3" json:"accuracy,omitempty"`
	// 海拔精度: accuracy of the altitude expressed in meters
	AltitudeAccuracy *wrapperspb.DoubleValue `protobuf:"bytes,5,opt,name=altitude_accuracy,json=altitudeAccuracy,proto3" json:"altitude_accuracy,omitempty"`
	// 方向:  direction in which the device is traveling
	Heading *wrapperspb.DoubleValue `protobuf:"bytes,6,opt,name=heading,proto3" json:"heading,omitempty"`
	// 设备运动的速度: velocity of the device in meters per second
	Speed *wrapperspb.DoubleValue `protobuf:"bytes,7,opt,name=speed,proto3" json:"speed,omitempty"`
}

func (x *GeoLocation) Reset() {
	*x = GeoLocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jthealth_biz_report_v1_report_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeoLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeoLocation) ProtoMessage() {}

func (x *GeoLocation) ProtoReflect() protoreflect.Message {
	mi := &file_jthealth_biz_report_v1_report_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeoLocation.ProtoReflect.Descriptor instead.
func (*GeoLocation) Descriptor() ([]byte, []int) {
	return file_jthealth_biz_report_v1_report_api_proto_rawDescGZIP(), []int{2}
}

func (x *GeoLocation) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *GeoLocation) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *GeoLocation) GetAltitude() *wrapperspb.DoubleValue {
	if x != nil {
		return x.Altitude
	}
	return nil
}

func (x *GeoLocation) GetAccuracy() float64 {
	if x != nil {
		return x.Accuracy
	}
	return 0
}

func (x *GeoLocation) GetAltitudeAccuracy() *wrapperspb.DoubleValue {
	if x != nil {
		return x.AltitudeAccuracy
	}
	return nil
}

func (x *GeoLocation) GetHeading() *wrapperspb.DoubleValue {
	if x != nil {
		return x.Heading
	}
	return nil
}

func (x *GeoLocation) GetSpeed() *wrapperspb.DoubleValue {
	if x != nil {
		return x.Speed
	}
	return nil
}

// 采样设备
type SampleDevice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 实际采样工作时的采样频率
	SampleRate uint32 `protobuf:"varint,1,opt,name=sample_rate,json=sampleRate,proto3" json:"sample_rate,omitempty"`
	// 设备的型号
	DeviceModel string `protobuf:"bytes,2,opt,name=device_model,json=deviceModel,proto3" json:"device_model,omitempty"`
	// 设备的 MAC 地址
	DeviceMac string `protobuf:"bytes,3,opt,name=device_mac,json=deviceMac,proto3" json:"device_mac,omitempty"`
	// 设备的 sn 号，可为空
	DeviceSn string `protobuf:"bytes,4,opt,name=device_sn,json=deviceSn,proto3" json:"device_sn,omitempty"`
	// 设备参数 KV（可选）
	// 可以包括 SDK返回的测量上下文信息，
	// 例如 OS 信息、手机型号、摄像头型号、摄像头参数…等等.
	// 不同的 DeviceType 此处内容不一样.
	DeviceParams map[string]string `protobuf:"bytes,5,rep,name=device_params,json=deviceParams,proto3" json:"device_params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SampleDevice) Reset() {
	*x = SampleDevice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jthealth_biz_report_v1_report_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SampleDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SampleDevice) ProtoMessage() {}

func (x *SampleDevice) ProtoReflect() protoreflect.Message {
	mi := &file_jthealth_biz_report_v1_report_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SampleDevice.ProtoReflect.Descriptor instead.
func (*SampleDevice) Descriptor() ([]byte, []int) {
	return file_jthealth_biz_report_v1_report_api_proto_rawDescGZIP(), []int{3}
}

func (x *SampleDevice) GetSampleRate() uint32 {
	if x != nil {
		return x.SampleRate
	}
	return 0
}

func (x *SampleDevice) GetDeviceModel() string {
	if x != nil {
		return x.DeviceModel
	}
	return ""
}

func (x *SampleDevice) GetDeviceMac() string {
	if x != nil {
		return x.DeviceMac
	}
	return ""
}

func (x *SampleDevice) GetDeviceSn() string {
	if x != nil {
		return x.DeviceSn
	}
	return ""
}

func (x *SampleDevice) GetDeviceParams() map[string]string {
	if x != nil {
		return x.DeviceParams
	}
	return nil
}

// 采样数据
type SampleData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 测量采样数据点的编解码器
	// 用户数据预处理或加解密算法识别.
	Codec string `protobuf:"bytes,1,opt,name=codec,proto3" json:"codec,omitempty"`
	// 测量采样数据点的编解码器的参数 KV（可选）
	CodecParams map[string]string `protobuf:"bytes,2,rep,name=codec_params,json=codecParams,proto3" json:"codec_params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 测量采样数据点的数据，字节流形式。
	// 需要将每个数据点转换为字节形式顺序排列。
	Data []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	// HMAC 签名
	Signature string `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *SampleData) Reset() {
	*x = SampleData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jthealth_biz_report_v1_report_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SampleData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SampleData) ProtoMessage() {}

func (x *SampleData) ProtoReflect() protoreflect.Message {
	mi := &file_jthealth_biz_report_v1_report_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SampleData.ProtoReflect.Descriptor instead.
func (*SampleData) Descriptor() ([]byte, []int) {
	return file_jthealth_biz_report_v1_report_api_proto_rawDescGZIP(), []int{4}
}

func (x *SampleData) GetCodec() string {
	if x != nil {
		return x.Codec
	}
	return ""
}

func (x *SampleData) GetCodecParams() map[string]string {
	if x != nil {
		return x.CodecParams
	}
	return nil
}

func (x *SampleData) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *SampleData) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

// 提交一般形式的采样数据的响应
type SubmitPulseTestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 分析报告 ID
	ReportId string `protobuf:"bytes,1,opt,name=report_id,json=reportId,proto3" json:"report_id,omitempty"`
	// 是否需要回答问题
	HasQuestions bool `protobuf:"varint,2,opt,name=has_questions,json=hasQuestions,proto3" json:"has_questions,omitempty"`
}

func (x *SubmitPulseTestResponse) Reset() {
	*x = SubmitPulseTestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jthealth_biz_report_v1_report_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitPulseTestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitPulseTestResponse) ProtoMessage() {}

func (x *SubmitPulseTestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jthealth_biz_report_v1_report_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitPulseTestResponse.ProtoReflect.Descriptor instead.
func (*SubmitPulseTestResponse) Descriptor() ([]byte, []int) {
	return file_jthealth_biz_report_v1_report_api_proto_rawDescGZIP(), []int{5}
}

func (x *SubmitPulseTestResponse) GetReportId() string {
	if x != nil {
		return x.ReportId
	}
	return ""
}

func (x *SubmitPulseTestResponse) GetHasQuestions() bool {
	if x != nil {
		return x.HasQuestions
	}
	return false
}

// 获取阶梯报告请求
type GetReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 报告ID
	ReportId string `protobuf:"bytes,1,opt,name=report_id,json=reportId,proto3" json:"report_id,omitempty"`
	// 回答的问题，是模块名到回答的问题的映射关系
	ModuleAnswers map[string]*AnswerList `protobuf:"bytes,3,rep,name=module_answers,json=moduleAnswers,proto3" json:"module_answers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetReportRequest) Reset() {
	*x = GetReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jthealth_biz_report_v1_report_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReportRequest) ProtoMessage() {}

func (x *GetReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jthealth_biz_report_v1_report_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReportRequest.ProtoReflect.Descriptor instead.
func (*GetReportRequest) Descriptor() ([]byte, []int) {
	return file_jthealth_biz_report_v1_report_api_proto_rawDescGZIP(), []int{6}
}

func (x *GetReportRequest) GetReportId() string {
	if x != nil {
		return x.ReportId
	}
	return ""
}

func (x *GetReportRequest) GetModuleAnswers() map[string]*AnswerList {
	if x != nil {
		return x.ModuleAnswers
	}
	return nil
}

// 一个模块的回答清单
type AnswerList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 回答的问题列表
	Answers []*Answer `protobuf:"bytes,1,rep,name=answers,proto3" json:"answers,omitempty"`
}

func (x *AnswerList) Reset() {
	*x = AnswerList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jthealth_biz_report_v1_report_api_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnswerList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnswerList) ProtoMessage() {}

func (x *AnswerList) ProtoReflect() protoreflect.Message {
	mi := &file_jthealth_biz_report_v1_report_api_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnswerList.ProtoReflect.Descriptor instead.
func (*AnswerList) Descriptor() ([]byte, []int) {
	return file_jthealth_biz_report_v1_report_api_proto_rawDescGZIP(), []int{7}
}

func (x *AnswerList) GetAnswers() []*Answer {
	if x != nil {
		return x.Answers
	}
	return nil
}

// Answer 单个问题的回答.
type Answer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 问题
	QuestionKey string `protobuf:"bytes,1,opt,name=question_key,json=questionKey,proto3" json:"question_key,omitempty"`
	// 答案
	AnswerKeys []string `protobuf:"bytes,2,rep,name=answer_keys,json=answerKeys,proto3" json:"answer_keys,omitempty"`
}

func (x *Answer) Reset() {
	*x = Answer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jthealth_biz_report_v1_report_api_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Answer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Answer) ProtoMessage() {}

func (x *Answer) ProtoReflect() protoreflect.Message {
	mi := &file_jthealth_biz_report_v1_report_api_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Answer.ProtoReflect.Descriptor instead.
func (*Answer) Descriptor() ([]byte, []int) {
	return file_jthealth_biz_report_v1_report_api_proto_rawDescGZIP(), []int{8}
}

func (x *Answer) GetQuestionKey() string {
	if x != nil {
		return x.QuestionKey
	}
	return ""
}

func (x *Answer) GetAnswerKeys() []string {
	if x != nil {
		return x.AnswerKeys
	}
	return nil
}

// 获取阶梯报告响应
type GetReportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 是否是完整的报告
	IsCompleteReport bool `protobuf:"varint,1,opt,name=is_complete_report,json=isCompleteReport,proto3" json:"is_complete_report,omitempty"`
	// 是否还需要回答问题
	HasQuestions bool `protobuf:"varint,2,opt,name=has_questions,json=hasQuestions,proto3" json:"has_questions,omitempty"`
	// 提问的问题，是模块名到提问的问题的映射关系
	ModuleQuestions map[string]*QuestionList `protobuf:"bytes,3,rep,name=module_questions,json=moduleQuestions,proto3" json:"module_questions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 报告内容
	Report *HealthReport `protobuf:"bytes,4,opt,name=report,proto3" json:"report,omitempty"`
}

func (x *GetReportResponse) Reset() {
	*x = GetReportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jthealth_biz_report_v1_report_api_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReportResponse) ProtoMessage() {}

func (x *GetReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jthealth_biz_report_v1_report_api_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReportResponse.ProtoReflect.Descriptor instead.
func (*GetReportResponse) Descriptor() ([]byte, []int) {
	return file_jthealth_biz_report_v1_report_api_proto_rawDescGZIP(), []int{9}
}

func (x *GetReportResponse) GetIsCompleteReport() bool {
	if x != nil {
		return x.IsCompleteReport
	}
	return false
}

func (x *GetReportResponse) GetHasQuestions() bool {
	if x != nil {
		return x.HasQuestions
	}
	return false
}

func (x *GetReportResponse) GetModuleQuestions() map[string]*QuestionList {
	if x != nil {
		return x.ModuleQuestions
	}
	return nil
}

func (x *GetReportResponse) GetReport() *HealthReport {
	if x != nil {
		return x.Report
	}
	return nil
}

// 一个模块提问的问题清单
type QuestionList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 提问的问题列表
	Questions []*Question `protobuf:"bytes,1,rep,name=questions,proto3" json:"questions,omitempty"`
}

func (x *QuestionList) Reset() {
	*x = QuestionList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jthealth_biz_report_v1_report_api_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionList) ProtoMessage() {}

func (x *QuestionList) ProtoReflect() protoreflect.Message {
	mi := &file_jthealth_biz_report_v1_report_api_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionList.ProtoReflect.Descriptor instead.
func (*QuestionList) Descriptor() ([]byte, []int) {
	return file_jthealth_biz_report_v1_report_api_proto_rawDescGZIP(), []int{10}
}

func (x *QuestionList) GetQuestions() []*Question {
	if x != nil {
		return x.Questions
	}
	return nil
}

// Question 问的问题.
type Question struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 问题的 key
	QuestionKey string `protobuf:"bytes,1,opt,name=question_key,json=questionKey,proto3" json:"question_key,omitempty"`
	// 内容
	Content string `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	// 类型
	Type string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	// 选项
	Choices []*QuestionChoice `protobuf:"bytes,4,rep,name=choices,proto3" json:"choices,omitempty"`
}

func (x *Question) Reset() {
	*x = Question{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jthealth_biz_report_v1_report_api_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Question) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Question) ProtoMessage() {}

func (x *Question) ProtoReflect() protoreflect.Message {
	mi := &file_jthealth_biz_report_v1_report_api_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Question.ProtoReflect.Descriptor instead.
func (*Question) Descriptor() ([]byte, []int) {
	return file_jthealth_biz_report_v1_report_api_proto_rawDescGZIP(), []int{11}
}

func (x *Question) GetQuestionKey() string {
	if x != nil {
		return x.QuestionKey
	}
	return ""
}

func (x *Question) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Question) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Question) GetChoices() []*QuestionChoice {
	if x != nil {
		return x.Choices
	}
	return nil
}

// QuestionChoice 选项.
type QuestionChoice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 选项的 key
	ChoiceKey string `protobuf:"bytes,1,opt,name=choice_key,json=choiceKey,proto3" json:"choice_key,omitempty"`
	// 内容
	Content string `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	// 冲突选项
	ConflictKeys []string `protobuf:"bytes,3,rep,name=conflict_keys,json=conflictKeys,proto3" json:"conflict_keys,omitempty"`
	// 是否默认选中
	Selected bool `protobuf:"varint,4,opt,name=selected,proto3" json:"selected,omitempty"`
}

func (x *QuestionChoice) Reset() {
	*x = QuestionChoice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jthealth_biz_report_v1_report_api_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionChoice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionChoice) ProtoMessage() {}

func (x *QuestionChoice) ProtoReflect() protoreflect.Message {
	mi := &file_jthealth_biz_report_v1_report_api_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionChoice.ProtoReflect.Descriptor instead.
func (*QuestionChoice) Descriptor() ([]byte, []int) {
	return file_jthealth_biz_report_v1_report_api_proto_rawDescGZIP(), []int{12}
}

func (x *QuestionChoice) GetChoiceKey() string {
	if x != nil {
		return x.ChoiceKey
	}
	return ""
}

func (x *QuestionChoice) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *QuestionChoice) GetConflictKeys() []string {
	if x != nil {
		return x.ConflictKeys
	}
	return nil
}

func (x *QuestionChoice) GetSelected() bool {
	if x != nil {
		return x.Selected
	}
	return false
}

// HealthReport 健康报告内容.
type HealthReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 分析报告ID
	HealthReportId string `protobuf:"bytes,1,opt,name=health_report_id,json=healthReportId,proto3" json:"health_report_id,omitempty"`
	// 报告创建时间
	CreateTime string `protobuf:"bytes,2,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// 综合风险指数
	HealthRiskIndex *RiskInfo `protobuf:"bytes,3,opt,name=health_risk_index,json=healthRiskIndex,proto3" json:"health_risk_index,omitempty"`
	// 报告总结
	ReportSummary string `protobuf:"bytes,4,opt,name=report_summary,json=reportSummary,proto3" json:"report_summary,omitempty"`
	// 体质类型说明
	PhysiqueExplain string `protobuf:"bytes,5,opt,name=physique_explain,json=physiqueExplain,proto3" json:"physique_explain,omitempty"`
	// 心率
	HeartRate int32 `protobuf:"varint,6,opt,name=heart_rate,json=heartRate,proto3" json:"heart_rate,omitempty"`
	//血氧
	BloodOxygen int32 `protobuf:"varint,20,opt,name=blood_oxygen,json=bloodOxygen,proto3" json:"blood_oxygen,omitempty"`
	// 18种疾病风险信息
	Risk []*RiskInfo `protobuf:"bytes,7,rep,name=risk,proto3" json:"risk,omitempty"`
	// 体质类型
	Physique string `protobuf:"bytes,8,opt,name=physique,proto3" json:"physique,omitempty"`
	// 膳食建议
	MealSuggestion string `protobuf:"bytes,9,opt,name=meal_suggestion,json=mealSuggestion,proto3" json:"meal_suggestion,omitempty"`
	// 膳食商品
	MealProducts []*MealProduct `protobuf:"bytes,10,rep,name=meal_products,json=mealProducts,proto3" json:"meal_products,omitempty"`
	// 是否参与分析,为true时不参与周报月报分析,和对比分析
	EnableStatistics bool `protobuf:"varint,11,opt,name=enable_statistics,json=enableStatistics,proto3" json:"enable_statistics,omitempty"`
	// 健康年龄
	HealthAge int32 `protobuf:"varint,12,opt,name=health_age,json=healthAge,proto3" json:"health_age,omitempty"`
	// 备注
	Remark string `protobuf:"bytes,13,opt,name=remark,proto3" json:"remark,omitempty"`
	//应急态说明
	EmergencyExplain string `protobuf:"bytes,23,opt,name=emergency_explain,json=emergencyExplain,proto3" json:"emergency_explain,omitempty"`
	// 波形图数据
	WaveData []uint32 `protobuf:"varint,14,rep,packed,name=wave_data,json=waveData,proto3" json:"wave_data,omitempty"`
	// 测量用户档案快照信息
	UserProfile *UserProfileSnapshot `protobuf:"bytes,15,opt,name=user_profile,json=userProfile,proto3" json:"user_profile,omitempty"`
	//辨证体质
	PhysicalDialecticsList []*PhysicalDialecticsMessage `protobuf:"bytes,19,rep,name=physical_dialectics_list,json=physicalDialecticsList,proto3" json:"physical_dialectics_list,omitempty"`
	//经络
	Meridians []*MeridianItems `protobuf:"bytes,22,rep,name=meridians,proto3" json:"meridians,omitempty"`
	//体质所占比例
	PhysicalDialecticsProportion float64 `protobuf:"fixed64,24,opt,name=physical_dialectics_proportion,json=physicalDialecticsProportion,proto3" json:"physical_dialectics_proportion,omitempty"`
	//上传渠道 1,app 2,小程序 3,一体机
	UploadChannel int32 `protobuf:"varint,25,opt,name=upload_channel,json=uploadChannel,proto3" json:"upload_channel,omitempty"`
	//报告备注
	ReportRemark []string `protobuf:"bytes,26,rep,name=report_remark,json=reportRemark,proto3" json:"report_remark,omitempty"`
	//健康年龄高于当前健康年龄的比例
	HealthyAgeHeightProportion float32 `protobuf:"fixed32,27,opt,name=healthy_age_height_proportion,json=healthyAgeHeightProportion,proto3" json:"healthy_age_height_proportion,omitempty"`
}

func (x *HealthReport) Reset() {
	*x = HealthReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jthealth_biz_report_v1_report_api_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthReport) ProtoMessage() {}

func (x *HealthReport) ProtoReflect() protoreflect.Message {
	mi := &file_jthealth_biz_report_v1_report_api_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthReport.ProtoReflect.Descriptor instead.
func (*HealthReport) Descriptor() ([]byte, []int) {
	return file_jthealth_biz_report_v1_report_api_proto_rawDescGZIP(), []int{13}
}

func (x *HealthReport) GetHealthReportId() string {
	if x != nil {
		return x.HealthReportId
	}
	return ""
}

func (x *HealthReport) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *HealthReport) GetHealthRiskIndex() *RiskInfo {
	if x != nil {
		return x.HealthRiskIndex
	}
	return nil
}

func (x *HealthReport) GetReportSummary() string {
	if x != nil {
		return x.ReportSummary
	}
	return ""
}

func (x *HealthReport) GetPhysiqueExplain() string {
	if x != nil {
		return x.PhysiqueExplain
	}
	return ""
}

func (x *HealthReport) GetHeartRate() int32 {
	if x != nil {
		return x.HeartRate
	}
	return 0
}

func (x *HealthReport) GetBloodOxygen() int32 {
	if x != nil {
		return x.BloodOxygen
	}
	return 0
}

func (x *HealthReport) GetRisk() []*RiskInfo {
	if x != nil {
		return x.Risk
	}
	return nil
}

func (x *HealthReport) GetPhysique() string {
	if x != nil {
		return x.Physique
	}
	return ""
}

func (x *HealthReport) GetMealSuggestion() string {
	if x != nil {
		return x.MealSuggestion
	}
	return ""
}

func (x *HealthReport) GetMealProducts() []*MealProduct {
	if x != nil {
		return x.MealProducts
	}
	return nil
}

func (x *HealthReport) GetEnableStatistics() bool {
	if x != nil {
		return x.EnableStatistics
	}
	return false
}

func (x *HealthReport) GetHealthAge() int32 {
	if x != nil {
		return x.HealthAge
	}
	return 0
}

func (x *HealthReport) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *HealthReport) GetEmergencyExplain() string {
	if x != nil {
		return x.EmergencyExplain
	}
	return ""
}

func (x *HealthReport) GetWaveData() []uint32 {
	if x != nil {
		return x.WaveData
	}
	return nil
}

func (x *HealthReport) GetUserProfile() *UserProfileSnapshot {
	if x != nil {
		return x.UserProfile
	}
	return nil
}

func (x *HealthReport) GetPhysicalDialecticsList() []*PhysicalDialecticsMessage {
	if x != nil {
		return x.PhysicalDialecticsList
	}
	return nil
}

func (x *HealthReport) GetMeridians() []*MeridianItems {
	if x != nil {
		return x.Meridians
	}
	return nil
}

func (x *HealthReport) GetPhysicalDialecticsProportion() float64 {
	if x != nil {
		return x.PhysicalDialecticsProportion
	}
	return 0
}

func (x *HealthReport) GetUploadChannel() int32 {
	if x != nil {
		return x.UploadChannel
	}
	return 0
}

func (x *HealthReport) GetReportRemark() []string {
	if x != nil {
		return x.ReportRemark
	}
	return nil
}

func (x *HealthReport) GetHealthyAgeHeightProportion() float32 {
	if x != nil {
		return x.HealthyAgeHeightProportion
	}
	return 0
}

//经络
type MeridianItems struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Date int32  `protobuf:"varint,2,opt,name=date,proto3" json:"date,omitempty"`
}

func (x *MeridianItems) Reset() {
	*x = MeridianItems{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jthealth_biz_report_v1_report_api_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeridianItems) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeridianItems) ProtoMessage() {}

func (x *MeridianItems) ProtoReflect() protoreflect.Message {
	mi := &file_jthealth_biz_report_v1_report_api_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeridianItems.ProtoReflect.Descriptor instead.
func (*MeridianItems) Descriptor() ([]byte, []int) {
	return file_jthealth_biz_report_v1_report_api_proto_rawDescGZIP(), []int{14}
}

func (x *MeridianItems) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MeridianItems) GetDate() int32 {
	if x != nil {
		return x.Date
	}
	return 0
}

// UserProfileSnapshot 测量用户档案快照信息
type UserProfileSnapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 档案ID
	UserProfileId string `protobuf:"bytes,1,opt,name=user_profile_id,json=userProfileId,proto3" json:"user_profile_id,omitempty"`
	// 昵称
	Nickname string `protobuf:"bytes,2,opt,name=nickname,proto3" json:"nickname,omitempty"`
	// 年龄
	Age int32 `protobuf:"varint,3,opt,name=age,proto3" json:"age,omitempty"`
	// 测量手
	Hand Hand `protobuf:"varint,4,opt,name=hand,proto3,enum=jthealth.biz.report.v1.Hand" json:"hand,omitempty"`
	// 用户性别
	Gender Gender `protobuf:"varint,5,opt,name=gender,proto3,enum=jthealth.biz.report.v1.Gender" json:"gender,omitempty"`
	// 身高
	Height int32 `protobuf:"varint,6,opt,name=height,proto3" json:"height,omitempty"`
	// 体重
	Weight int32 `protobuf:"varint,7,opt,name=weight,proto3" json:"weight,omitempty"`
	// 昵称首字母
	NicknameInitial string `protobuf:"bytes,8,opt,name=nickname_initial,json=nicknameInitial,proto3" json:"nickname_initial,omitempty"`
	// 区号
	NationCode string `protobuf:"bytes,9,opt,name=nation_code,json=nationCode,proto3" json:"nation_code,omitempty"`
	// 手机号
	Phone string `protobuf:"bytes,10,opt,name=phone,proto3" json:"phone,omitempty"`
}

func (x *UserProfileSnapshot) Reset() {
	*x = UserProfileSnapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jthealth_biz_report_v1_report_api_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserProfileSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserProfileSnapshot) ProtoMessage() {}

func (x *UserProfileSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_jthealth_biz_report_v1_report_api_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserProfileSnapshot.ProtoReflect.Descriptor instead.
func (*UserProfileSnapshot) Descriptor() ([]byte, []int) {
	return file_jthealth_biz_report_v1_report_api_proto_rawDescGZIP(), []int{15}
}

func (x *UserProfileSnapshot) GetUserProfileId() string {
	if x != nil {
		return x.UserProfileId
	}
	return ""
}

func (x *UserProfileSnapshot) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *UserProfileSnapshot) GetAge() int32 {
	if x != nil {
		return x.Age
	}
	return 0
}

func (x *UserProfileSnapshot) GetHand() Hand {
	if x != nil {
		return x.Hand
	}
	return Hand_HAND_INVALID
}

func (x *UserProfileSnapshot) GetGender() Gender {
	if x != nil {
		return x.Gender
	}
	return Gender_GENDER_INVALID
}

func (x *UserProfileSnapshot) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *UserProfileSnapshot) GetWeight() int32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *UserProfileSnapshot) GetNicknameInitial() string {
	if x != nil {
		return x.NicknameInitial
	}
	return ""
}

func (x *UserProfileSnapshot) GetNationCode() string {
	if x != nil {
		return x.NationCode
	}
	return ""
}

func (x *UserProfileSnapshot) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

// 通过体质获得膳食建议请求.
type GetMealSuggestionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 体质编号
	PhysiqueKey string `protobuf:"bytes,1,opt,name=physique_key,json=physiqueKey,proto3" json:"physique_key,omitempty"`
	// 语言
	LanguageCode string `protobuf:"bytes,2,opt,name=language_code,json=languageCode,proto3" json:"language_code,omitempty"`
}

func (x *GetMealSuggestionRequest) Reset() {
	*x = GetMealSuggestionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jthealth_biz_report_v1_report_api_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMealSuggestionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMealSuggestionRequest) ProtoMessage() {}

func (x *GetMealSuggestionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jthealth_biz_report_v1_report_api_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMealSuggestionRequest.ProtoReflect.Descriptor instead.
func (*GetMealSuggestionRequest) Descriptor() ([]byte, []int) {
	return file_jthealth_biz_report_v1_report_api_proto_rawDescGZIP(), []int{16}
}

func (x *GetMealSuggestionRequest) GetPhysiqueKey() string {
	if x != nil {
		return x.PhysiqueKey
	}
	return ""
}

func (x *GetMealSuggestionRequest) GetLanguageCode() string {
	if x != nil {
		return x.LanguageCode
	}
	return ""
}

// 通过体质获得膳食建议响应.
type GetMealSuggestionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 体质名称
	PhysiqueName string `protobuf:"bytes,1,opt,name=physique_name,json=physiqueName,proto3" json:"physique_name,omitempty"`
	// 膳食建议编号
	MealSuggestionKey string `protobuf:"bytes,2,opt,name=meal_suggestion_key,json=mealSuggestionKey,proto3" json:"meal_suggestion_key,omitempty"`
	// 膳食建议名称
	MealSuggestionName string `protobuf:"bytes,3,opt,name=meal_suggestion_name,json=mealSuggestionName,proto3" json:"meal_suggestion_name,omitempty"`
	// 膳食建议详情
	MealSuggestionDetail string `protobuf:"bytes,4,opt,name=meal_suggestion_detail,json=mealSuggestionDetail,proto3" json:"meal_suggestion_detail,omitempty"`
	// 膳食建议商品列表
	FoodSuggestions []*MealProduct `protobuf:"bytes,5,rep,name=food_suggestions,json=foodSuggestions,proto3" json:"food_suggestions,omitempty"`
}

func (x *GetMealSuggestionResponse) Reset() {
	*x = GetMealSuggestionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jthealth_biz_report_v1_report_api_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMealSuggestionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMealSuggestionResponse) ProtoMessage() {}

func (x *GetMealSuggestionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jthealth_biz_report_v1_report_api_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMealSuggestionResponse.ProtoReflect.Descriptor instead.
func (*GetMealSuggestionResponse) Descriptor() ([]byte, []int) {
	return file_jthealth_biz_report_v1_report_api_proto_rawDescGZIP(), []int{17}
}

func (x *GetMealSuggestionResponse) GetPhysiqueName() string {
	if x != nil {
		return x.PhysiqueName
	}
	return ""
}

func (x *GetMealSuggestionResponse) GetMealSuggestionKey() string {
	if x != nil {
		return x.MealSuggestionKey
	}
	return ""
}

func (x *GetMealSuggestionResponse) GetMealSuggestionName() string {
	if x != nil {
		return x.MealSuggestionName
	}
	return ""
}

func (x *GetMealSuggestionResponse) GetMealSuggestionDetail() string {
	if x != nil {
		return x.MealSuggestionDetail
	}
	return ""
}

func (x *GetMealSuggestionResponse) GetFoodSuggestions() []*MealProduct {
	if x != nil {
		return x.FoodSuggestions
	}
	return nil
}

type PhysicalDialecticsMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PhysicalDialecticsCateKey     string `protobuf:"bytes,19,opt,name=physical_dialectics_cate_key,json=physicalDialecticsCateKey,proto3" json:"physical_dialectics_cate_key,omitempty"`
	PhysicalDialecticsCateContent string `protobuf:"bytes,21,opt,name=physical_dialectics_cate_content,json=physicalDialecticsCateContent,proto3" json:"physical_dialectics_cate_content,omitempty"`
}

func (x *PhysicalDialecticsMessage) Reset() {
	*x = PhysicalDialecticsMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jthealth_biz_report_v1_report_api_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhysicalDialecticsMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhysicalDialecticsMessage) ProtoMessage() {}

func (x *PhysicalDialecticsMessage) ProtoReflect() protoreflect.Message {
	mi := &file_jthealth_biz_report_v1_report_api_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhysicalDialecticsMessage.ProtoReflect.Descriptor instead.
func (*PhysicalDialecticsMessage) Descriptor() ([]byte, []int) {
	return file_jthealth_biz_report_v1_report_api_proto_rawDescGZIP(), []int{18}
}

func (x *PhysicalDialecticsMessage) GetPhysicalDialecticsCateKey() string {
	if x != nil {
		return x.PhysicalDialecticsCateKey
	}
	return ""
}

func (x *PhysicalDialecticsMessage) GetPhysicalDialecticsCateContent() string {
	if x != nil {
		return x.PhysicalDialecticsCateContent
	}
	return ""
}

// RiskInfo 风险信息.
type RiskInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 风险名称
	RiskName string `protobuf:"bytes,1,opt,name=risk_name,json=riskName,proto3" json:"risk_name,omitempty"`
	// 风险指数
	IndexValue int32 `protobuf:"varint,2,opt,name=index_value,json=indexValue,proto3" json:"index_value,omitempty"`
}

func (x *RiskInfo) Reset() {
	*x = RiskInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jthealth_biz_report_v1_report_api_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RiskInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RiskInfo) ProtoMessage() {}

func (x *RiskInfo) ProtoReflect() protoreflect.Message {
	mi := &file_jthealth_biz_report_v1_report_api_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RiskInfo.ProtoReflect.Descriptor instead.
func (*RiskInfo) Descriptor() ([]byte, []int) {
	return file_jthealth_biz_report_v1_report_api_proto_rawDescGZIP(), []int{19}
}

func (x *RiskInfo) GetRiskName() string {
	if x != nil {
		return x.RiskName
	}
	return ""
}

func (x *RiskInfo) GetIndexValue() int32 {
	if x != nil {
		return x.IndexValue
	}
	return 0
}

// MealProduct 膳食商品.
type MealProduct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 膳食商品跳转链接
	ProductLink string `protobuf:"bytes,1,opt,name=product_link,json=productLink,proto3" json:"product_link,omitempty"`
	// 膳食标题
	ProductTitle string `protobuf:"bytes,2,opt,name=product_title,json=productTitle,proto3" json:"product_title,omitempty"`
	// 膳食商品图片
	Image *ImageResource `protobuf:"bytes,3,opt,name=image,proto3" json:"image,omitempty"`
}

func (x *MealProduct) Reset() {
	*x = MealProduct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jthealth_biz_report_v1_report_api_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MealProduct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MealProduct) ProtoMessage() {}

func (x *MealProduct) ProtoReflect() protoreflect.Message {
	mi := &file_jthealth_biz_report_v1_report_api_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MealProduct.ProtoReflect.Descriptor instead.
func (*MealProduct) Descriptor() ([]byte, []int) {
	return file_jthealth_biz_report_v1_report_api_proto_rawDescGZIP(), []int{20}
}

func (x *MealProduct) GetProductLink() string {
	if x != nil {
		return x.ProductLink
	}
	return ""
}

func (x *MealProduct) GetProductTitle() string {
	if x != nil {
		return x.ProductTitle
	}
	return ""
}

func (x *MealProduct) GetImage() *ImageResource {
	if x != nil {
		return x.Image
	}
	return nil
}

// ImageResource 静态图片资源.
type ImageResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 资源池图片ID
	ImageId string `protobuf:"bytes,1,opt,name=image_id,json=imageId,proto3" json:"image_id,omitempty"`
	// 页面关键字
	Key string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	// 图片格式
	Mime string `protobuf:"bytes,3,opt,name=mime,proto3" json:"mime,omitempty"`
	// 页面在S3保存路径
	StorePath string `protobuf:"bytes,4,opt,name=store_path,json=storePath,proto3" json:"store_path,omitempty"`
	// 公共访问路径
	PublicAccessUrl string `protobuf:"bytes,5,opt,name=public_access_url,json=publicAccessUrl,proto3" json:"public_access_url,omitempty"`
	// 发布者ID(系统用户)
	EditorId string `protobuf:"bytes,6,opt,name=editor_id,json=editorId,proto3" json:"editor_id,omitempty"`
	// 公开访问路径
	Title string `protobuf:"bytes,7,opt,name=title,proto3" json:"title,omitempty"`
	// 预览路径
	PreviewUrl string `protobuf:"bytes,8,opt,name=preview_url,json=previewUrl,proto3" json:"preview_url,omitempty"`
}

func (x *ImageResource) Reset() {
	*x = ImageResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jthealth_biz_report_v1_report_api_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageResource) ProtoMessage() {}

func (x *ImageResource) ProtoReflect() protoreflect.Message {
	mi := &file_jthealth_biz_report_v1_report_api_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageResource.ProtoReflect.Descriptor instead.
func (*ImageResource) Descriptor() ([]byte, []int) {
	return file_jthealth_biz_report_v1_report_api_proto_rawDescGZIP(), []int{21}
}

func (x *ImageResource) GetImageId() string {
	if x != nil {
		return x.ImageId
	}
	return ""
}

func (x *ImageResource) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *ImageResource) GetMime() string {
	if x != nil {
		return x.Mime
	}
	return ""
}

func (x *ImageResource) GetStorePath() string {
	if x != nil {
		return x.StorePath
	}
	return ""
}

func (x *ImageResource) GetPublicAccessUrl() string {
	if x != nil {
		return x.PublicAccessUrl
	}
	return ""
}

func (x *ImageResource) GetEditorId() string {
	if x != nil {
		return x.EditorId
	}
	return ""
}

func (x *ImageResource) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ImageResource) GetPreviewUrl() string {
	if x != nil {
		return x.PreviewUrl
	}
	return ""
}

//创建风险推荐商品请求
type CreateRiskCommodityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//商品id
	RiskCommodityId string `protobuf:"bytes,1,opt,name=risk_commodity_id,json=riskCommodityId,proto3" json:"risk_commodity_id,omitempty"`
	//应用id
	ApplicationId string `protobuf:"bytes,2,opt,name=application_id,json=applicationId,proto3" json:"application_id,omitempty"`
	//风险id
	RiskId string `protobuf:"bytes,3,opt,name=risk_id,json=riskId,proto3" json:"risk_id,omitempty"`
	//程度 1 低 2 中 3 高
	Degree int32 `protobuf:"varint,4,opt,name=degree,proto3" json:"degree,omitempty"`
	//商品图片
	Image string `protobuf:"bytes,5,opt,name=image,proto3" json:"image,omitempty"`
	//商品链接
	Url string `protobuf:"bytes,6,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *CreateRiskCommodityRequest) Reset() {
	*x = CreateRiskCommodityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jthealth_biz_report_v1_report_api_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRiskCommodityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRiskCommodityRequest) ProtoMessage() {}

func (x *CreateRiskCommodityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jthealth_biz_report_v1_report_api_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRiskCommodityRequest.ProtoReflect.Descriptor instead.
func (*CreateRiskCommodityRequest) Descriptor() ([]byte, []int) {
	return file_jthealth_biz_report_v1_report_api_proto_rawDescGZIP(), []int{22}
}

func (x *CreateRiskCommodityRequest) GetRiskCommodityId() string {
	if x != nil {
		return x.RiskCommodityId
	}
	return ""
}

func (x *CreateRiskCommodityRequest) GetApplicationId() string {
	if x != nil {
		return x.ApplicationId
	}
	return ""
}

func (x *CreateRiskCommodityRequest) GetRiskId() string {
	if x != nil {
		return x.RiskId
	}
	return ""
}

func (x *CreateRiskCommodityRequest) GetDegree() int32 {
	if x != nil {
		return x.Degree
	}
	return 0
}

func (x *CreateRiskCommodityRequest) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *CreateRiskCommodityRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

//创建风险推荐商品响应
type CreateRiskCommodityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//商品id
	RiskCommodityId string `protobuf:"bytes,1,opt,name=risk_commodity_id,json=riskCommodityId,proto3" json:"risk_commodity_id,omitempty"`
}

func (x *CreateRiskCommodityResponse) Reset() {
	*x = CreateRiskCommodityResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jthealth_biz_report_v1_report_api_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRiskCommodityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRiskCommodityResponse) ProtoMessage() {}

func (x *CreateRiskCommodityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jthealth_biz_report_v1_report_api_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRiskCommodityResponse.ProtoReflect.Descriptor instead.
func (*CreateRiskCommodityResponse) Descriptor() ([]byte, []int) {
	return file_jthealth_biz_report_v1_report_api_proto_rawDescGZIP(), []int{23}
}

func (x *CreateRiskCommodityResponse) GetRiskCommodityId() string {
	if x != nil {
		return x.RiskCommodityId
	}
	return ""
}

//获取风险列表请求
type GetRiskListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetRiskListRequest) Reset() {
	*x = GetRiskListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jthealth_biz_report_v1_report_api_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRiskListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRiskListRequest) ProtoMessage() {}

func (x *GetRiskListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jthealth_biz_report_v1_report_api_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRiskListRequest.ProtoReflect.Descriptor instead.
func (*GetRiskListRequest) Descriptor() ([]byte, []int) {
	return file_jthealth_biz_report_v1_report_api_proto_rawDescGZIP(), []int{24}
}

//获取风险列表响应
type GetRiskListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*RiskMsg `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *GetRiskListResponse) Reset() {
	*x = GetRiskListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jthealth_biz_report_v1_report_api_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRiskListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRiskListResponse) ProtoMessage() {}

func (x *GetRiskListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jthealth_biz_report_v1_report_api_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRiskListResponse.ProtoReflect.Descriptor instead.
func (*GetRiskListResponse) Descriptor() ([]byte, []int) {
	return file_jthealth_biz_report_v1_report_api_proto_rawDescGZIP(), []int{25}
}

func (x *GetRiskListResponse) GetList() []*RiskMsg {
	if x != nil {
		return x.List
	}
	return nil
}

type RiskMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//风险id
	RiskId string `protobuf:"bytes,1,opt,name=risk_id,json=riskId,proto3" json:"risk_id,omitempty"`
	//风险名称
	RiskName string `protobuf:"bytes,2,opt,name=risk_name,json=riskName,proto3" json:"risk_name,omitempty"`
}

func (x *RiskMsg) Reset() {
	*x = RiskMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jthealth_biz_report_v1_report_api_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RiskMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RiskMsg) ProtoMessage() {}

func (x *RiskMsg) ProtoReflect() protoreflect.Message {
	mi := &file_jthealth_biz_report_v1_report_api_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RiskMsg.ProtoReflect.Descriptor instead.
func (*RiskMsg) Descriptor() ([]byte, []int) {
	return file_jthealth_biz_report_v1_report_api_proto_rawDescGZIP(), []int{26}
}

func (x *RiskMsg) GetRiskId() string {
	if x != nil {
		return x.RiskId
	}
	return ""
}

func (x *RiskMsg) GetRiskName() string {
	if x != nil {
		return x.RiskName
	}
	return ""
}

//获取推荐商品列表请求
type GetRiskCommodityListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//风险id
	RiskId string `protobuf:"bytes,1,opt,name=risk_id,json=riskId,proto3" json:"risk_id,omitempty"`
	//应用id
	ApplicationId string `protobuf:"bytes,2,opt,name=application_id,json=applicationId,proto3" json:"application_id,omitempty"`
}

func (x *GetRiskCommodityListRequest) Reset() {
	*x = GetRiskCommodityListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jthealth_biz_report_v1_report_api_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRiskCommodityListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRiskCommodityListRequest) ProtoMessage() {}

func (x *GetRiskCommodityListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jthealth_biz_report_v1_report_api_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRiskCommodityListRequest.ProtoReflect.Descriptor instead.
func (*GetRiskCommodityListRequest) Descriptor() ([]byte, []int) {
	return file_jthealth_biz_report_v1_report_api_proto_rawDescGZIP(), []int{27}
}

func (x *GetRiskCommodityListRequest) GetRiskId() string {
	if x != nil {
		return x.RiskId
	}
	return ""
}

func (x *GetRiskCommodityListRequest) GetApplicationId() string {
	if x != nil {
		return x.ApplicationId
	}
	return ""
}

//获取推荐商品列表响应
type GetRiskCommodityListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*RiskCommodityMsg `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *GetRiskCommodityListResponse) Reset() {
	*x = GetRiskCommodityListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jthealth_biz_report_v1_report_api_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRiskCommodityListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRiskCommodityListResponse) ProtoMessage() {}

func (x *GetRiskCommodityListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jthealth_biz_report_v1_report_api_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRiskCommodityListResponse.ProtoReflect.Descriptor instead.
func (*GetRiskCommodityListResponse) Descriptor() ([]byte, []int) {
	return file_jthealth_biz_report_v1_report_api_proto_rawDescGZIP(), []int{28}
}

func (x *GetRiskCommodityListResponse) GetList() []*RiskCommodityMsg {
	if x != nil {
		return x.List
	}
	return nil
}

type RiskCommodityMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//商品id
	RiskCommodityId string `protobuf:"bytes,1,opt,name=risk_commodity_id,json=riskCommodityId,proto3" json:"risk_commodity_id,omitempty"`
	//风险id
	RiskId string `protobuf:"bytes,2,opt,name=risk_id,json=riskId,proto3" json:"risk_id,omitempty"`
	//风险名称
	RiskName string `protobuf:"bytes,3,opt,name=risk_name,json=riskName,proto3" json:"risk_name,omitempty"`
	//程度 1 低 2 中 3 高
	Degree int32 `protobuf:"varint,4,opt,name=degree,proto3" json:"degree,omitempty"`
	//商品图片
	Image string `protobuf:"bytes,5,opt,name=image,proto3" json:"image,omitempty"`
	//商品链接
	Url string `protobuf:"bytes,6,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *RiskCommodityMsg) Reset() {
	*x = RiskCommodityMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jthealth_biz_report_v1_report_api_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RiskCommodityMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RiskCommodityMsg) ProtoMessage() {}

func (x *RiskCommodityMsg) ProtoReflect() protoreflect.Message {
	mi := &file_jthealth_biz_report_v1_report_api_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RiskCommodityMsg.ProtoReflect.Descriptor instead.
func (*RiskCommodityMsg) Descriptor() ([]byte, []int) {
	return file_jthealth_biz_report_v1_report_api_proto_rawDescGZIP(), []int{29}
}

func (x *RiskCommodityMsg) GetRiskCommodityId() string {
	if x != nil {
		return x.RiskCommodityId
	}
	return ""
}

func (x *RiskCommodityMsg) GetRiskId() string {
	if x != nil {
		return x.RiskId
	}
	return ""
}

func (x *RiskCommodityMsg) GetRiskName() string {
	if x != nil {
		return x.RiskName
	}
	return ""
}

func (x *RiskCommodityMsg) GetDegree() int32 {
	if x != nil {
		return x.Degree
	}
	return 0
}

func (x *RiskCommodityMsg) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *RiskCommodityMsg) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

//编辑报告显示内容请求
type EditReportShowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//应用id
	ApplicationId string `protobuf:"bytes,1,opt,name=application_id,json=applicationId,proto3" json:"application_id,omitempty"`
	//身体状态 0 关闭 1 开启
	IsBodyCondition string `protobuf:"bytes,2,opt,name=is_body_condition,json=isBodyCondition,proto3" json:"is_body_condition,omitempty"`
	//心率 0 关闭 1 开启
	IsHeartRate string `protobuf:"bytes,3,opt,name=is_heart_rate,json=isHeartRate,proto3" json:"is_heart_rate,omitempty"`
	//血氧 0 关闭 1 开启
	IsBloodOxygen string `protobuf:"bytes,4,opt,name=is_blood_oxygen,json=isBloodOxygen,proto3" json:"is_blood_oxygen,omitempty"`
	//综合风险 0 关闭 1 开启
	IsComprehensiveRisk string `protobuf:"bytes,5,opt,name=is_comprehensive_risk,json=isComprehensiveRisk,proto3" json:"is_comprehensive_risk,omitempty"`
	//综合点评 0 关闭 1 开启
	IsComprehensiveReviews string `protobuf:"bytes,6,opt,name=is_comprehensive_reviews,json=isComprehensiveReviews,proto3" json:"is_comprehensive_reviews,omitempty"`
	//波形图 0 关闭 1 开启
	IsWave string `protobuf:"bytes,7,opt,name=is_wave,json=isWave,proto3" json:"is_wave,omitempty"`
	//血压风险 0 关闭 1 开启
	IsRisk_1 string `protobuf:"bytes,8,opt,name=is_risk_1,json=isRisk1,proto3" json:"is_risk_1,omitempty"`
	//血脂风险 0 关闭 1 开启
	IsRisk_2 string `protobuf:"bytes,9,opt,name=is_risk_2,json=isRisk2,proto3" json:"is_risk_2,omitempty"`
	//血糖风险 0 关闭 1 开启
	IsRisk_3 string `protobuf:"bytes,10,opt,name=is_risk_3,json=isRisk3,proto3" json:"is_risk_3,omitempty"`
	//心血管风险 0 关闭 1 开启
	IsRisk_4 string `protobuf:"bytes,11,opt,name=is_risk_4,json=isRisk4,proto3" json:"is_risk_4,omitempty"`
	//脑血管风险 0 关闭 1 开启
	IsRisk_5 string `protobuf:"bytes,12,opt,name=is_risk_5,json=isRisk5,proto3" json:"is_risk_5,omitempty"`
	//肝负担风险 0 关闭 1 开启
	IsRisk_6 string `protobuf:"bytes,13,opt,name=is_risk_6,json=isRisk6,proto3" json:"is_risk_6,omitempty"`
	//肾负担风险 0 关闭 1 开启
	IsRisk_7 string `protobuf:"bytes,14,opt,name=is_risk_7,json=isRisk7,proto3" json:"is_risk_7,omitempty"`
	//消化力 0 关闭 1 开启
	IsRisk_8 string `protobuf:"bytes,15,opt,name=is_risk_8,json=isRisk8,proto3" json:"is_risk_8,omitempty"`
	//胃食道逆流风险 0 关闭 1 开启
	IsRisk_9 string `protobuf:"bytes,16,opt,name=is_risk_9,json=isRisk9,proto3" json:"is_risk_9,omitempty"`
	//免疫力 0 关闭 1 开启
	IsRisk_10 string `protobuf:"bytes,17,opt,name=is_risk_10,json=isRisk10,proto3" json:"is_risk_10,omitempty"`
	//缺钙风险 0 关闭 1 开启
	IsRisk_11 string `protobuf:"bytes,18,opt,name=is_risk_11,json=isRisk11,proto3" json:"is_risk_11,omitempty"`
	//压力 0 关闭 1 开启
	IsRisk_12 string `protobuf:"bytes,19,opt,name=is_risk_12,json=isRisk12,proto3" json:"is_risk_12,omitempty"`
	//疲劳 0 关闭 1 开启
	IsRisk_13 string `protobuf:"bytes,20,opt,name=is_risk_13,json=isRisk13,proto3" json:"is_risk_13,omitempty"`
	//睡眠质量 0 关闭 1 开启
	IsRisk_14 string `protobuf:"bytes,21,opt,name=is_risk_14,json=isRisk14,proto3" json:"is_risk_14,omitempty"`
	//内分泌风险 0 关闭 1 开启
	IsRisk_15 string `protobuf:"bytes,22,opt,name=is_risk_15,json=isRisk15,proto3" json:"is_risk_15,omitempty"`
	//过敏风险 0 关闭 1 开启
	IsRisk_16 string `protobuf:"bytes,23,opt,name=is_risk_16,json=isRisk16,proto3" json:"is_risk_16,omitempty"`
	//感染风险 0 关闭 1 开启
	IsRisk_17 string `protobuf:"bytes,24,opt,name=is_risk_17,json=isRisk17,proto3" json:"is_risk_17,omitempty"`
	//胃酸过多风险 0 关闭 1 开启
	IsRisk_18 string `protobuf:"bytes,25,opt,name=is_risk_18,json=isRisk18,proto3" json:"is_risk_18,omitempty"`
	//改善建议 0 关闭 1 开启
	IsSuggest string `protobuf:"bytes,26,opt,name=is_suggest,json=isSuggest,proto3" json:"is_suggest,omitempty"`
}

func (x *EditReportShowRequest) Reset() {
	*x = EditReportShowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jthealth_biz_report_v1_report_api_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EditReportShowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditReportShowRequest) ProtoMessage() {}

func (x *EditReportShowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jthealth_biz_report_v1_report_api_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditReportShowRequest.ProtoReflect.Descriptor instead.
func (*EditReportShowRequest) Descriptor() ([]byte, []int) {
	return file_jthealth_biz_report_v1_report_api_proto_rawDescGZIP(), []int{30}
}

func (x *EditReportShowRequest) GetApplicationId() string {
	if x != nil {
		return x.ApplicationId
	}
	return ""
}

func (x *EditReportShowRequest) GetIsBodyCondition() string {
	if x != nil {
		return x.IsBodyCondition
	}
	return ""
}

func (x *EditReportShowRequest) GetIsHeartRate() string {
	if x != nil {
		return x.IsHeartRate
	}
	return ""
}

func (x *EditReportShowRequest) GetIsBloodOxygen() string {
	if x != nil {
		return x.IsBloodOxygen
	}
	return ""
}

func (x *EditReportShowRequest) GetIsComprehensiveRisk() string {
	if x != nil {
		return x.IsComprehensiveRisk
	}
	return ""
}

func (x *EditReportShowRequest) GetIsComprehensiveReviews() string {
	if x != nil {
		return x.IsComprehensiveReviews
	}
	return ""
}

func (x *EditReportShowRequest) GetIsWave() string {
	if x != nil {
		return x.IsWave
	}
	return ""
}

func (x *EditReportShowRequest) GetIsRisk_1() string {
	if x != nil {
		return x.IsRisk_1
	}
	return ""
}

func (x *EditReportShowRequest) GetIsRisk_2() string {
	if x != nil {
		return x.IsRisk_2
	}
	return ""
}

func (x *EditReportShowRequest) GetIsRisk_3() string {
	if x != nil {
		return x.IsRisk_3
	}
	return ""
}

func (x *EditReportShowRequest) GetIsRisk_4() string {
	if x != nil {
		return x.IsRisk_4
	}
	return ""
}

func (x *EditReportShowRequest) GetIsRisk_5() string {
	if x != nil {
		return x.IsRisk_5
	}
	return ""
}

func (x *EditReportShowRequest) GetIsRisk_6() string {
	if x != nil {
		return x.IsRisk_6
	}
	return ""
}

func (x *EditReportShowRequest) GetIsRisk_7() string {
	if x != nil {
		return x.IsRisk_7
	}
	return ""
}

func (x *EditReportShowRequest) GetIsRisk_8() string {
	if x != nil {
		return x.IsRisk_8
	}
	return ""
}

func (x *EditReportShowRequest) GetIsRisk_9() string {
	if x != nil {
		return x.IsRisk_9
	}
	return ""
}

func (x *EditReportShowRequest) GetIsRisk_10() string {
	if x != nil {
		return x.IsRisk_10
	}
	return ""
}

func (x *EditReportShowRequest) GetIsRisk_11() string {
	if x != nil {
		return x.IsRisk_11
	}
	return ""
}

func (x *EditReportShowRequest) GetIsRisk_12() string {
	if x != nil {
		return x.IsRisk_12
	}
	return ""
}

func (x *EditReportShowRequest) GetIsRisk_13() string {
	if x != nil {
		return x.IsRisk_13
	}
	return ""
}

func (x *EditReportShowRequest) GetIsRisk_14() string {
	if x != nil {
		return x.IsRisk_14
	}
	return ""
}

func (x *EditReportShowRequest) GetIsRisk_15() string {
	if x != nil {
		return x.IsRisk_15
	}
	return ""
}

func (x *EditReportShowRequest) GetIsRisk_16() string {
	if x != nil {
		return x.IsRisk_16
	}
	return ""
}

func (x *EditReportShowRequest) GetIsRisk_17() string {
	if x != nil {
		return x.IsRisk_17
	}
	return ""
}

func (x *EditReportShowRequest) GetIsRisk_18() string {
	if x != nil {
		return x.IsRisk_18
	}
	return ""
}

func (x *EditReportShowRequest) GetIsSuggest() string {
	if x != nil {
		return x.IsSuggest
	}
	return ""
}

//编辑报告显示内容响应
type EditReportShowResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//应用id
	ApplicationId string `protobuf:"bytes,1,opt,name=application_id,json=applicationId,proto3" json:"application_id,omitempty"`
}

func (x *EditReportShowResponse) Reset() {
	*x = EditReportShowResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jthealth_biz_report_v1_report_api_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EditReportShowResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditReportShowResponse) ProtoMessage() {}

func (x *EditReportShowResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jthealth_biz_report_v1_report_api_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditReportShowResponse.ProtoReflect.Descriptor instead.
func (*EditReportShowResponse) Descriptor() ([]byte, []int) {
	return file_jthealth_biz_report_v1_report_api_proto_rawDescGZIP(), []int{31}
}

func (x *EditReportShowResponse) GetApplicationId() string {
	if x != nil {
		return x.ApplicationId
	}
	return ""
}

//获取报告显示内容请求
type GetReportShowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//应用id
	ApplicationId string `protobuf:"bytes,1,opt,name=application_id,json=applicationId,proto3" json:"application_id,omitempty"`
}

func (x *GetReportShowRequest) Reset() {
	*x = GetReportShowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jthealth_biz_report_v1_report_api_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReportShowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReportShowRequest) ProtoMessage() {}

func (x *GetReportShowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jthealth_biz_report_v1_report_api_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReportShowRequest.ProtoReflect.Descriptor instead.
func (*GetReportShowRequest) Descriptor() ([]byte, []int) {
	return file_jthealth_biz_report_v1_report_api_proto_rawDescGZIP(), []int{32}
}

func (x *GetReportShowRequest) GetApplicationId() string {
	if x != nil {
		return x.ApplicationId
	}
	return ""
}

//获取报告显示内容响应
type GetReportShowResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//应用id
	ApplicationId string `protobuf:"bytes,1,opt,name=application_id,json=applicationId,proto3" json:"application_id,omitempty"`
	//身体状态 0 关闭 1 开启
	IsBodyCondition string `protobuf:"bytes,2,opt,name=is_body_condition,json=isBodyCondition,proto3" json:"is_body_condition,omitempty"`
	//心率 0 关闭 1 开启
	IsHeartRate string `protobuf:"bytes,3,opt,name=is_heart_rate,json=isHeartRate,proto3" json:"is_heart_rate,omitempty"`
	//血氧 0 关闭 1 开启
	IsBloodOxygen string `protobuf:"bytes,4,opt,name=is_blood_oxygen,json=isBloodOxygen,proto3" json:"is_blood_oxygen,omitempty"`
	//综合风险 0 关闭 1 开启
	IsComprehensiveRisk string `protobuf:"bytes,5,opt,name=is_comprehensive_risk,json=isComprehensiveRisk,proto3" json:"is_comprehensive_risk,omitempty"`
	//综合点评 0 关闭 1 开启
	IsComprehensiveReviews string `protobuf:"bytes,6,opt,name=is_comprehensive_reviews,json=isComprehensiveReviews,proto3" json:"is_comprehensive_reviews,omitempty"`
	//波形图 0 关闭 1 开启
	IsWave string `protobuf:"bytes,7,opt,name=is_wave,json=isWave,proto3" json:"is_wave,omitempty"`
	//血压风险 0 关闭 1 开启
	IsRisk_1 string `protobuf:"bytes,8,opt,name=is_risk_1,json=isRisk1,proto3" json:"is_risk_1,omitempty"`
	//血脂风险 0 关闭 1 开启
	IsRisk_2 string `protobuf:"bytes,9,opt,name=is_risk_2,json=isRisk2,proto3" json:"is_risk_2,omitempty"`
	//血糖风险 0 关闭 1 开启
	IsRisk_3 string `protobuf:"bytes,10,opt,name=is_risk_3,json=isRisk3,proto3" json:"is_risk_3,omitempty"`
	//心血管风险 0 关闭 1 开启
	IsRisk_4 string `protobuf:"bytes,11,opt,name=is_risk_4,json=isRisk4,proto3" json:"is_risk_4,omitempty"`
	//脑血管风险 0 关闭 1 开启
	IsRisk_5 string `protobuf:"bytes,12,opt,name=is_risk_5,json=isRisk5,proto3" json:"is_risk_5,omitempty"`
	//肝负担风险 0 关闭 1 开启
	IsRisk_6 string `protobuf:"bytes,13,opt,name=is_risk_6,json=isRisk6,proto3" json:"is_risk_6,omitempty"`
	//肾负担风险 0 关闭 1 开启
	IsRisk_7 string `protobuf:"bytes,14,opt,name=is_risk_7,json=isRisk7,proto3" json:"is_risk_7,omitempty"`
	//消化力 0 关闭 1 开启
	IsRisk_8 string `protobuf:"bytes,15,opt,name=is_risk_8,json=isRisk8,proto3" json:"is_risk_8,omitempty"`
	//胃食道逆流风险 0 关闭 1 开启
	IsRisk_9 string `protobuf:"bytes,16,opt,name=is_risk_9,json=isRisk9,proto3" json:"is_risk_9,omitempty"`
	//免疫力 0 关闭 1 开启
	IsRisk_10 string `protobuf:"bytes,17,opt,name=is_risk_10,json=isRisk10,proto3" json:"is_risk_10,omitempty"`
	//缺钙风险 0 关闭 1 开启
	IsRisk_11 string `protobuf:"bytes,18,opt,name=is_risk_11,json=isRisk11,proto3" json:"is_risk_11,omitempty"`
	//压力 0 关闭 1 开启
	IsRisk_12 string `protobuf:"bytes,19,opt,name=is_risk_12,json=isRisk12,proto3" json:"is_risk_12,omitempty"`
	//疲劳 0 关闭 1 开启
	IsRisk_13 string `protobuf:"bytes,20,opt,name=is_risk_13,json=isRisk13,proto3" json:"is_risk_13,omitempty"`
	//睡眠质量 0 关闭 1 开启
	IsRisk_14 string `protobuf:"bytes,21,opt,name=is_risk_14,json=isRisk14,proto3" json:"is_risk_14,omitempty"`
	//内分泌风险 0 关闭 1 开启
	IsRisk_15 string `protobuf:"bytes,22,opt,name=is_risk_15,json=isRisk15,proto3" json:"is_risk_15,omitempty"`
	//过敏风险 0 关闭 1 开启
	IsRisk_16 string `protobuf:"bytes,23,opt,name=is_risk_16,json=isRisk16,proto3" json:"is_risk_16,omitempty"`
	//感染风险 0 关闭 1 开启
	IsRisk_17 string `protobuf:"bytes,24,opt,name=is_risk_17,json=isRisk17,proto3" json:"is_risk_17,omitempty"`
	//胃酸过多风险 0 关闭 1 开启
	IsRisk_18 string `protobuf:"bytes,25,opt,name=is_risk_18,json=isRisk18,proto3" json:"is_risk_18,omitempty"`
	//改善建议 0 关闭 1 开启
	IsSuggest string `protobuf:"bytes,26,opt,name=is_suggest,json=isSuggest,proto3" json:"is_suggest,omitempty"`
}

func (x *GetReportShowResponse) Reset() {
	*x = GetReportShowResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jthealth_biz_report_v1_report_api_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReportShowResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReportShowResponse) ProtoMessage() {}

func (x *GetReportShowResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jthealth_biz_report_v1_report_api_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReportShowResponse.ProtoReflect.Descriptor instead.
func (*GetReportShowResponse) Descriptor() ([]byte, []int) {
	return file_jthealth_biz_report_v1_report_api_proto_rawDescGZIP(), []int{33}
}

func (x *GetReportShowResponse) GetApplicationId() string {
	if x != nil {
		return x.ApplicationId
	}
	return ""
}

func (x *GetReportShowResponse) GetIsBodyCondition() string {
	if x != nil {
		return x.IsBodyCondition
	}
	return ""
}

func (x *GetReportShowResponse) GetIsHeartRate() string {
	if x != nil {
		return x.IsHeartRate
	}
	return ""
}

func (x *GetReportShowResponse) GetIsBloodOxygen() string {
	if x != nil {
		return x.IsBloodOxygen
	}
	return ""
}

func (x *GetReportShowResponse) GetIsComprehensiveRisk() string {
	if x != nil {
		return x.IsComprehensiveRisk
	}
	return ""
}

func (x *GetReportShowResponse) GetIsComprehensiveReviews() string {
	if x != nil {
		return x.IsComprehensiveReviews
	}
	return ""
}

func (x *GetReportShowResponse) GetIsWave() string {
	if x != nil {
		return x.IsWave
	}
	return ""
}

func (x *GetReportShowResponse) GetIsRisk_1() string {
	if x != nil {
		return x.IsRisk_1
	}
	return ""
}

func (x *GetReportShowResponse) GetIsRisk_2() string {
	if x != nil {
		return x.IsRisk_2
	}
	return ""
}

func (x *GetReportShowResponse) GetIsRisk_3() string {
	if x != nil {
		return x.IsRisk_3
	}
	return ""
}

func (x *GetReportShowResponse) GetIsRisk_4() string {
	if x != nil {
		return x.IsRisk_4
	}
	return ""
}

func (x *GetReportShowResponse) GetIsRisk_5() string {
	if x != nil {
		return x.IsRisk_5
	}
	return ""
}

func (x *GetReportShowResponse) GetIsRisk_6() string {
	if x != nil {
		return x.IsRisk_6
	}
	return ""
}

func (x *GetReportShowResponse) GetIsRisk_7() string {
	if x != nil {
		return x.IsRisk_7
	}
	return ""
}

func (x *GetReportShowResponse) GetIsRisk_8() string {
	if x != nil {
		return x.IsRisk_8
	}
	return ""
}

func (x *GetReportShowResponse) GetIsRisk_9() string {
	if x != nil {
		return x.IsRisk_9
	}
	return ""
}

func (x *GetReportShowResponse) GetIsRisk_10() string {
	if x != nil {
		return x.IsRisk_10
	}
	return ""
}

func (x *GetReportShowResponse) GetIsRisk_11() string {
	if x != nil {
		return x.IsRisk_11
	}
	return ""
}

func (x *GetReportShowResponse) GetIsRisk_12() string {
	if x != nil {
		return x.IsRisk_12
	}
	return ""
}

func (x *GetReportShowResponse) GetIsRisk_13() string {
	if x != nil {
		return x.IsRisk_13
	}
	return ""
}

func (x *GetReportShowResponse) GetIsRisk_14() string {
	if x != nil {
		return x.IsRisk_14
	}
	return ""
}

func (x *GetReportShowResponse) GetIsRisk_15() string {
	if x != nil {
		return x.IsRisk_15
	}
	return ""
}

func (x *GetReportShowResponse) GetIsRisk_16() string {
	if x != nil {
		return x.IsRisk_16
	}
	return ""
}

func (x *GetReportShowResponse) GetIsRisk_17() string {
	if x != nil {
		return x.IsRisk_17
	}
	return ""
}

func (x *GetReportShowResponse) GetIsRisk_18() string {
	if x != nil {
		return x.IsRisk_18
	}
	return ""
}

func (x *GetReportShowResponse) GetIsSuggest() string {
	if x != nil {
		return x.IsSuggest
	}
	return ""
}

//编辑报告对比显示功能请求
type EditReportComparedShowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//应用id
	ApplicationId string `protobuf:"bytes,1,opt,name=application_id,json=applicationId,proto3" json:"application_id,omitempty"`
	//近两天对比 0 关闭 1 开启
	IsRecent string `protobuf:"bytes,2,opt,name=is_recent,json=isRecent,proto3" json:"is_recent,omitempty"`
	//周对比 0 关闭 1 开启
	IsWeek string `protobuf:"bytes,3,opt,name=is_week,json=isWeek,proto3" json:"is_week,omitempty"`
}

func (x *EditReportComparedShowRequest) Reset() {
	*x = EditReportComparedShowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jthealth_biz_report_v1_report_api_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EditReportComparedShowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditReportComparedShowRequest) ProtoMessage() {}

func (x *EditReportComparedShowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jthealth_biz_report_v1_report_api_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditReportComparedShowRequest.ProtoReflect.Descriptor instead.
func (*EditReportComparedShowRequest) Descriptor() ([]byte, []int) {
	return file_jthealth_biz_report_v1_report_api_proto_rawDescGZIP(), []int{34}
}

func (x *EditReportComparedShowRequest) GetApplicationId() string {
	if x != nil {
		return x.ApplicationId
	}
	return ""
}

func (x *EditReportComparedShowRequest) GetIsRecent() string {
	if x != nil {
		return x.IsRecent
	}
	return ""
}

func (x *EditReportComparedShowRequest) GetIsWeek() string {
	if x != nil {
		return x.IsWeek
	}
	return ""
}

//编辑报告对比显示功能响应
type EditReportComparedShowResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//应用id
	ApplicationId string `protobuf:"bytes,1,opt,name=application_id,json=applicationId,proto3" json:"application_id,omitempty"`
}

func (x *EditReportComparedShowResponse) Reset() {
	*x = EditReportComparedShowResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jthealth_biz_report_v1_report_api_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EditReportComparedShowResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditReportComparedShowResponse) ProtoMessage() {}

func (x *EditReportComparedShowResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jthealth_biz_report_v1_report_api_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditReportComparedShowResponse.ProtoReflect.Descriptor instead.
func (*EditReportComparedShowResponse) Descriptor() ([]byte, []int) {
	return file_jthealth_biz_report_v1_report_api_proto_rawDescGZIP(), []int{35}
}

func (x *EditReportComparedShowResponse) GetApplicationId() string {
	if x != nil {
		return x.ApplicationId
	}
	return ""
}

//获取报告对比显示功能请求
type GetReportComparedShowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//应用id
	ApplicationId string `protobuf:"bytes,1,opt,name=application_id,json=applicationId,proto3" json:"application_id,omitempty"`
}

func (x *GetReportComparedShowRequest) Reset() {
	*x = GetReportComparedShowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jthealth_biz_report_v1_report_api_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReportComparedShowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReportComparedShowRequest) ProtoMessage() {}

func (x *GetReportComparedShowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jthealth_biz_report_v1_report_api_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReportComparedShowRequest.ProtoReflect.Descriptor instead.
func (*GetReportComparedShowRequest) Descriptor() ([]byte, []int) {
	return file_jthealth_biz_report_v1_report_api_proto_rawDescGZIP(), []int{36}
}

func (x *GetReportComparedShowRequest) GetApplicationId() string {
	if x != nil {
		return x.ApplicationId
	}
	return ""
}

//获取报告对比显示功能响应
type GetReportComparedShowResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//应用id
	ApplicationId string `protobuf:"bytes,1,opt,name=application_id,json=applicationId,proto3" json:"application_id,omitempty"`
	//近两天对比 0 关闭 1 开启
	IsRecent string `protobuf:"bytes,2,opt,name=is_recent,json=isRecent,proto3" json:"is_recent,omitempty"`
	//周对比 0 关闭 1 开启
	IsWeek string `protobuf:"bytes,3,opt,name=is_week,json=isWeek,proto3" json:"is_week,omitempty"`
}

func (x *GetReportComparedShowResponse) Reset() {
	*x = GetReportComparedShowResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jthealth_biz_report_v1_report_api_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReportComparedShowResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReportComparedShowResponse) ProtoMessage() {}

func (x *GetReportComparedShowResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jthealth_biz_report_v1_report_api_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReportComparedShowResponse.ProtoReflect.Descriptor instead.
func (*GetReportComparedShowResponse) Descriptor() ([]byte, []int) {
	return file_jthealth_biz_report_v1_report_api_proto_rawDescGZIP(), []int{37}
}

func (x *GetReportComparedShowResponse) GetApplicationId() string {
	if x != nil {
		return x.ApplicationId
	}
	return ""
}

func (x *GetReportComparedShowResponse) GetIsRecent() string {
	if x != nil {
		return x.IsRecent
	}
	return ""
}

func (x *GetReportComparedShowResponse) GetIsWeek() string {
	if x != nil {
		return x.IsWeek
	}
	return ""
}

var File_jthealth_biz_report_v1_report_api_proto protoreflect.FileDescriptor

var file_jthealth_biz_report_v1_report_api_proto_rawDesc = []byte{
	0x0a, 0x27, 0x6a, 0x74, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2f, 0x62, 0x69, 0x7a, 0x2f, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x6a, 0x74, 0x68, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76,
	0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xc3, 0x02, 0x0a, 0x16, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x50, 0x75, 0x6c, 0x73, 0x65, 0x54,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x49, 0x64, 0x12, 0x5f, 0x0a, 0x15, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x6a, 0x74, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x62, 0x69, 0x7a,
	0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x13,
	0x75, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x12, 0x3f, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6a, 0x74, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e,
	0x62, 0x69, 0x7a, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x07, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x12, 0x3c, 0x0a, 0x1a, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74,
	0x72, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x54, 0x72, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x6f, 0x78, 0x79, 0x67,
	0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x6f, 0x64, 0x4f,
	0x78, 0x79, 0x67, 0x65, 0x6e, 0x22, 0xaf, 0x03, 0x0a, 0x0d, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x68, 0x61, 0x6e, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x6a, 0x74, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x48,
	0x61, 0x6e, 0x64, 0x52, 0x04, 0x68, 0x61, 0x6e, 0x64, 0x12, 0x46, 0x0a, 0x0c, 0x67, 0x65, 0x6f,
	0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x6a, 0x74, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6f, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x67, 0x65, 0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x49, 0x0a, 0x0d, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6a, 0x74, 0x68, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x0c,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x43, 0x0a, 0x0b,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x6a, 0x74, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x62, 0x69, 0x7a,
	0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x4a, 0x0a, 0x13, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x11, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x48, 0x0a,
	0x12, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x53,
	0x74, 0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xd4, 0x02, 0x0a, 0x0b, 0x47, 0x65, 0x6f, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74,
	0x75, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74,
	0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x12, 0x38, 0x0a, 0x08, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x08, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61,
	0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x61,
	0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x12, 0x49, 0x0a, 0x11, 0x61, 0x6c, 0x74, 0x69, 0x74,
	0x75, 0x64, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x10, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x41, 0x63, 0x63, 0x75, 0x72, 0x61,
	0x63, 0x79, 0x12, 0x36, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x32, 0x0a, 0x05, 0x73, 0x70,
	0x65, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x22, 0xac,
	0x02, 0x0a, 0x0c, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x61, 0x74, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6d, 0x61,
	0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d,
	0x61, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x6e, 0x12,
	0x5b, 0x0a, 0x0d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6a, 0x74, 0x68, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x3f, 0x0a, 0x11,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xec, 0x01,
	0x0a, 0x0a, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6f, 0x64, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x64,
	0x65, 0x63, 0x12, 0x56, 0x0a, 0x0c, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x5f, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6a, 0x74, 0x68, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x63, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x63,
	0x6f, 0x64, 0x65, 0x63, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x1a, 0x3e, 0x0a, 0x10,
	0x43, 0x6f, 0x64, 0x65, 0x63, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x5b, 0x0a, 0x17,
	0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x50, 0x75, 0x6c, 0x73, 0x65, 0x54, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x68, 0x61, 0x73, 0x5f, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x68, 0x61, 0x73,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xf9, 0x01, 0x0a, 0x10, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x62, 0x0a, 0x0e, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x6a, 0x74, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x62,
	0x69, 0x7a, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x1a,
	0x64, 0x0a, 0x12, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x38, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6a, 0x74, 0x68, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x46, 0x0a, 0x0a, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x07, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6a, 0x74, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e,
	0x62, 0x69, 0x7a, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6e,
	0x73, 0x77, 0x65, 0x72, 0x52, 0x07, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x22, 0x4c, 0x0a,
	0x06, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x6e,
	0x73, 0x77, 0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0a, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x73, 0x22, 0xf9, 0x02, 0x0a, 0x11,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69,
	0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x23, 0x0a, 0x0d, 0x68, 0x61, 0x73, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x68, 0x61, 0x73, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x69, 0x0a, 0x10, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e,
	0x2e, 0x6a, 0x74, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x3c, 0x0a, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x6a, 0x74, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x1a, 0x68, 0x0a,
	0x14, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6a, 0x74, 0x68, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x4e, 0x0a, 0x0c, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x09, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6a, 0x74, 0x68,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x9d, 0x01, 0x0a, 0x08, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x40, 0x0a, 0x07, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6a, 0x74, 0x68, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x07,
	0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x22, 0x8a, 0x01, 0x0a, 0x0e, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x5f,
	0x6b, 0x65, 0x79, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x66,
	0x6c, 0x69, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x22, 0x85, 0x09, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x4c, 0x0a, 0x11, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6a, 0x74,
	0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x69, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x68,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x69, 0x73, 0x6b, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x25,
	0x0a, 0x0e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x68, 0x79, 0x73, 0x69, 0x71, 0x75,
	0x65, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x70, 0x68, 0x79, 0x73, 0x69, 0x71, 0x75, 0x65, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e,
	0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x65, 0x61, 0x72, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x68, 0x65, 0x61, 0x72, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x6f, 0x78, 0x79, 0x67, 0x65, 0x6e, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x6f, 0x64, 0x4f, 0x78, 0x79, 0x67,
	0x65, 0x6e, 0x12, 0x34, 0x0a, 0x04, 0x72, 0x69, 0x73, 0x6b, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x6a, 0x74, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x62, 0x69, 0x7a, 0x2e,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x69, 0x73, 0x6b, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x04, 0x72, 0x69, 0x73, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x68, 0x79, 0x73,
	0x69, 0x71, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x68, 0x79, 0x73,
	0x69, 0x71, 0x75, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x65, 0x61, 0x6c, 0x5f, 0x73, 0x75, 0x67,
	0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d,
	0x65, 0x61, 0x6c, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a,
	0x0d, 0x6d, 0x65, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6a, 0x74, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e,
	0x62, 0x69, 0x7a, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65,
	0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x0c, 0x6d, 0x65, 0x61, 0x6c, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x10, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x61,
	0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x41, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x2b, 0x0a, 0x11, 0x65,
	0x6d, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x65, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63,
	0x79, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x61, 0x76, 0x65,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x77, 0x61, 0x76,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x4e, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6a, 0x74,
	0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x6b, 0x0a, 0x18, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61,
	0x6c, 0x5f, 0x64, 0x69, 0x61, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6a, 0x74, 0x68, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x69, 0x61, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x63, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x16, 0x70, 0x68, 0x79, 0x73,
	0x69, 0x63, 0x61, 0x6c, 0x44, 0x69, 0x61, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x63, 0x73, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x43, 0x0a, 0x09, 0x6d, 0x65, 0x72, 0x69, 0x64, 0x69, 0x61, 0x6e, 0x73, 0x18,
	0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6a, 0x74, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x65, 0x72, 0x69, 0x64, 0x69, 0x61, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x09, 0x6d, 0x65,
	0x72, 0x69, 0x64, 0x69, 0x61, 0x6e, 0x73, 0x12, 0x44, 0x0a, 0x1e, 0x70, 0x68, 0x79, 0x73, 0x69,
	0x63, 0x61, 0x6c, 0x5f, 0x64, 0x69, 0x61, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x70,
	0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x1c, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x69, 0x61, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x63, 0x73, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a,
	0x0e, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x72,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x41, 0x0a, 0x1d, 0x68, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x79, 0x5f, 0x61, 0x67, 0x65, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f,
	0x70, 0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x1a, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x41, 0x67, 0x65, 0x48, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x37, 0x0a, 0x0d,
	0x4d, 0x65, 0x72, 0x69, 0x64, 0x69, 0x61, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x65, 0x22, 0xe7, 0x02, 0x0a, 0x13, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x26, 0x0a,
	0x0f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x61, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x68, 0x61, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1c, 0x2e, 0x6a, 0x74, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x62, 0x69, 0x7a,
	0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x52,
	0x04, 0x68, 0x61, 0x6e, 0x64, 0x12, 0x36, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6a, 0x74, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a,
	0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x29, 0x0a,
	0x10, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d,
	0x65, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x22,
	0x62, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x61, 0x6c, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x70,
	0x68, 0x79, 0x73, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x70, 0x68, 0x79, 0x73, 0x69, 0x71, 0x75, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x23,
	0x0a, 0x0d, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x22, 0xa8, 0x02, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x61, 0x6c, 0x53,
	0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x68, 0x79, 0x73, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x68, 0x79, 0x73, 0x69, 0x71,
	0x75, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x65, 0x61, 0x6c, 0x5f, 0x73,
	0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x6d, 0x65, 0x61, 0x6c, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x14, 0x6d, 0x65, 0x61, 0x6c, 0x5f, 0x73,
	0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6d, 0x65, 0x61, 0x6c, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x6d, 0x65, 0x61, 0x6c,
	0x5f, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6d, 0x65, 0x61, 0x6c, 0x53, 0x75,
	0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x4e,
	0x0a, 0x10, 0x66, 0x6f, 0x6f, 0x64, 0x5f, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6a, 0x74, 0x68, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x0f, 0x66,
	0x6f, 0x6f, 0x64, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xa5,
	0x01, 0x0a, 0x19, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x69, 0x61, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x63, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3f, 0x0a, 0x1c,
	0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x64, 0x69, 0x61, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x63, 0x73, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x19, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x69, 0x61, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x63, 0x73, 0x43, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x47, 0x0a,
	0x20, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x64, 0x69, 0x61, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x63, 0x73, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1d, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61,
	0x6c, 0x44, 0x69, 0x61, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x63, 0x73, 0x43, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x48, 0x0a, 0x08, 0x52, 0x69, 0x73, 0x6b, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x69, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x92, 0x01, 0x0a, 0x0b, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x6b,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c,
	0x69, 0x6e, 0x6b, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x3b, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6a, 0x74, 0x68, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x05,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x22, 0xef, 0x01, 0x0a, 0x0d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6d, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x55, 0x72, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x55, 0x72, 0x6c, 0x22, 0xc8, 0x01, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x69, 0x73, 0x6b, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x72, 0x69, 0x73, 0x6b, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79,
	0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x69, 0x73,
	0x6b, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x69, 0x73, 0x6b,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x67, 0x72, 0x65, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x64, 0x65, 0x67, 0x72, 0x65, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75,
	0x72, 0x6c, 0x22, 0x49, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x69, 0x73, 0x6b,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64,
	0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x69,
	0x73, 0x6b, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x49, 0x64, 0x22, 0x14, 0x0a,
	0x12, 0x47, 0x65, 0x74, 0x52, 0x69, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x4a, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x52, 0x69, 0x73, 0x6b, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6a, 0x74, 0x68, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x69, 0x73, 0x6b, 0x4d, 0x73, 0x67, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22,
	0x3f, 0x0a, 0x07, 0x52, 0x69, 0x73, 0x6b, 0x4d, 0x73, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x69,
	0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x69, 0x73,
	0x6b, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x69, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x5d, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x52, 0x69, 0x73, 0x6b, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x64, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22,
	0x5c, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x52, 0x69, 0x73, 0x6b, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64,
	0x69, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3c, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x6a, 0x74, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x69, 0x73, 0x6b, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x64, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xb4, 0x01,
	0x0a, 0x10, 0x52, 0x69, 0x73, 0x6b, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x4d,
	0x73, 0x67, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x64, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72,
	0x69, 0x73, 0x6b, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x69, 0x73, 0x6b, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x69, 0x73, 0x6b,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x67, 0x72, 0x65, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x64, 0x65, 0x67, 0x72, 0x65, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x72, 0x6c, 0x22, 0xe6, 0x06, 0x0a, 0x15, 0x45, 0x64, 0x69, 0x74, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x53, 0x68, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25,
	0x0a, 0x0e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x62, 0x6f, 0x64, 0x79,
	0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x69, 0x73, 0x42, 0x6f, 0x64, 0x79, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x68, 0x65, 0x61, 0x72, 0x74, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x73, 0x48, 0x65, 0x61, 0x72,
	0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x62, 0x6c, 0x6f, 0x6f,
	0x64, 0x5f, 0x6f, 0x78, 0x79, 0x67, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x69, 0x73, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x4f, 0x78, 0x79, 0x67, 0x65, 0x6e, 0x12, 0x32, 0x0a,
	0x15, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x68, 0x65, 0x6e, 0x73, 0x69, 0x76,
	0x65, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x69, 0x73,
	0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x68, 0x65, 0x6e, 0x73, 0x69, 0x76, 0x65, 0x52, 0x69, 0x73,
	0x6b, 0x12, 0x38, 0x0a, 0x18, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x68, 0x65,
	0x6e, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x16, 0x69, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x68, 0x65, 0x6e,
	0x73, 0x69, 0x76, 0x65, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x69,
	0x73, 0x5f, 0x77, 0x61, 0x76, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x73,
	0x57, 0x61, 0x76, 0x65, 0x12, 0x1a, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x5f,
	0x31, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x73, 0x52, 0x69, 0x73, 0x6b, 0x31,
	0x12, 0x1a, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x32, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x73, 0x52, 0x69, 0x73, 0x6b, 0x32, 0x12, 0x1a, 0x0a, 0x09,
	0x69, 0x73, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x33, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x69, 0x73, 0x52, 0x69, 0x73, 0x6b, 0x33, 0x12, 0x1a, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x72,
	0x69, 0x73, 0x6b, 0x5f, 0x34, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x73, 0x52,
	0x69, 0x73, 0x6b, 0x34, 0x12, 0x1a, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x5f,
	0x35, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x73, 0x52, 0x69, 0x73, 0x6b, 0x35,
	0x12, 0x1a, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x36, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x73, 0x52, 0x69, 0x73, 0x6b, 0x36, 0x12, 0x1a, 0x0a, 0x09,
	0x69, 0x73, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x37, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x69, 0x73, 0x52, 0x69, 0x73, 0x6b, 0x37, 0x12, 0x1a, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x72,
	0x69, 0x73, 0x6b, 0x5f, 0x38, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x73, 0x52,
	0x69, 0x73, 0x6b, 0x38, 0x12, 0x1a, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x5f,
	0x39, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x73, 0x52, 0x69, 0x73, 0x6b, 0x39,
	0x12, 0x1c, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x31, 0x30, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x73, 0x52, 0x69, 0x73, 0x6b, 0x31, 0x30, 0x12, 0x1c,
	0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x31, 0x31, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x69, 0x73, 0x52, 0x69, 0x73, 0x6b, 0x31, 0x31, 0x12, 0x1c, 0x0a, 0x0a,
	0x69, 0x73, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x31, 0x32, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x69, 0x73, 0x52, 0x69, 0x73, 0x6b, 0x31, 0x32, 0x12, 0x1c, 0x0a, 0x0a, 0x69, 0x73,
	0x5f, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x31, 0x33, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x69, 0x73, 0x52, 0x69, 0x73, 0x6b, 0x31, 0x33, 0x12, 0x1c, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x72,
	0x69, 0x73, 0x6b, 0x5f, 0x31, 0x34, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x73,
	0x52, 0x69, 0x73, 0x6b, 0x31, 0x34, 0x12, 0x1c, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x72, 0x69, 0x73,
	0x6b, 0x5f, 0x31, 0x35, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x73, 0x52, 0x69,
	0x73, 0x6b, 0x31, 0x35, 0x12, 0x1c, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x5f,
	0x31, 0x36, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x73, 0x52, 0x69, 0x73, 0x6b,
	0x31, 0x36, 0x12, 0x1c, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x31, 0x37,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x73, 0x52, 0x69, 0x73, 0x6b, 0x31, 0x37,
	0x12, 0x1c, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x31, 0x38, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x73, 0x52, 0x69, 0x73, 0x6b, 0x31, 0x38, 0x12, 0x1d,
	0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x69, 0x73, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x22, 0x3f, 0x0a,
	0x16, 0x45, 0x64, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x68, 0x6f, 0x77, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x3d,
	0x0a, 0x14, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x68, 0x6f, 0x77, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xe6, 0x06,
	0x0a, 0x15, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x68, 0x6f, 0x77, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2a,
	0x0a, 0x11, 0x69, 0x73, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x73, 0x42, 0x6f, 0x64,
	0x79, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73,
	0x5f, 0x68, 0x65, 0x61, 0x72, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x69, 0x73, 0x48, 0x65, 0x61, 0x72, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x26,
	0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x62, 0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x6f, 0x78, 0x79, 0x67, 0x65,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x73, 0x42, 0x6c, 0x6f, 0x6f, 0x64,
	0x4f, 0x78, 0x79, 0x67, 0x65, 0x6e, 0x12, 0x32, 0x0a, 0x15, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6d,
	0x70, 0x72, 0x65, 0x68, 0x65, 0x6e, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x69, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x68,
	0x65, 0x6e, 0x73, 0x69, 0x76, 0x65, 0x52, 0x69, 0x73, 0x6b, 0x12, 0x38, 0x0a, 0x18, 0x69, 0x73,
	0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x68, 0x65, 0x6e, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x69, 0x73,
	0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x68, 0x65, 0x6e, 0x73, 0x69, 0x76, 0x65, 0x52, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x77, 0x61, 0x76, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x73, 0x57, 0x61, 0x76, 0x65, 0x12, 0x1a, 0x0a,
	0x09, 0x69, 0x73, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x31, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x69, 0x73, 0x52, 0x69, 0x73, 0x6b, 0x31, 0x12, 0x1a, 0x0a, 0x09, 0x69, 0x73, 0x5f,
	0x72, 0x69, 0x73, 0x6b, 0x5f, 0x32, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x73,
	0x52, 0x69, 0x73, 0x6b, 0x32, 0x12, 0x1a, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x72, 0x69, 0x73, 0x6b,
	0x5f, 0x33, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x73, 0x52, 0x69, 0x73, 0x6b,
	0x33, 0x12, 0x1a, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x34, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x73, 0x52, 0x69, 0x73, 0x6b, 0x34, 0x12, 0x1a, 0x0a,
	0x09, 0x69, 0x73, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x35, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x69, 0x73, 0x52, 0x69, 0x73, 0x6b, 0x35, 0x12, 0x1a, 0x0a, 0x09, 0x69, 0x73, 0x5f,
	0x72, 0x69, 0x73, 0x6b, 0x5f, 0x36, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x73,
	0x52, 0x69, 0x73, 0x6b, 0x36, 0x12, 0x1a, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x72, 0x69, 0x73, 0x6b,
	0x5f, 0x37, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x73, 0x52, 0x69, 0x73, 0x6b,
	0x37, 0x12, 0x1a, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x38, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x73, 0x52, 0x69, 0x73, 0x6b, 0x38, 0x12, 0x1a, 0x0a,
	0x09, 0x69, 0x73, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x39, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x69, 0x73, 0x52, 0x69, 0x73, 0x6b, 0x39, 0x12, 0x1c, 0x0a, 0x0a, 0x69, 0x73, 0x5f,
	0x72, 0x69, 0x73, 0x6b, 0x5f, 0x31, 0x30, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69,
	0x73, 0x52, 0x69, 0x73, 0x6b, 0x31, 0x30, 0x12, 0x1c, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x72, 0x69,
	0x73, 0x6b, 0x5f, 0x31, 0x31, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x73, 0x52,
	0x69, 0x73, 0x6b, 0x31, 0x31, 0x12, 0x1c, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x72, 0x69, 0x73, 0x6b,
	0x5f, 0x31, 0x32, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x73, 0x52, 0x69, 0x73,
	0x6b, 0x31, 0x32, 0x12, 0x1c, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x31,
	0x33, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x73, 0x52, 0x69, 0x73, 0x6b, 0x31,
	0x33, 0x12, 0x1c, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x31, 0x34, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x73, 0x52, 0x69, 0x73, 0x6b, 0x31, 0x34, 0x12,
	0x1c, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x31, 0x35, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x73, 0x52, 0x69, 0x73, 0x6b, 0x31, 0x35, 0x12, 0x1c, 0x0a,
	0x0a, 0x69, 0x73, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x31, 0x36, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x69, 0x73, 0x52, 0x69, 0x73, 0x6b, 0x31, 0x36, 0x12, 0x1c, 0x0a, 0x0a, 0x69,
	0x73, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x31, 0x37, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x69, 0x73, 0x52, 0x69, 0x73, 0x6b, 0x31, 0x37, 0x12, 0x1c, 0x0a, 0x0a, 0x69, 0x73, 0x5f,
	0x72, 0x69, 0x73, 0x6b, 0x5f, 0x31, 0x38, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69,
	0x73, 0x52, 0x69, 0x73, 0x6b, 0x31, 0x38, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x73, 0x75,
	0x67, 0x67, 0x65, 0x73, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x73, 0x53,
	0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x22, 0x7c, 0x0a, 0x1d, 0x45, 0x64, 0x69, 0x74, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x64, 0x53, 0x68, 0x6f, 0x77,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x69, 0x73, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x69,
	0x73, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x73,
	0x57, 0x65, 0x65, 0x6b, 0x22, 0x47, 0x0a, 0x1e, 0x45, 0x64, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x64, 0x53, 0x68, 0x6f, 0x77, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x45, 0x0a,
	0x1c, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72,
	0x65, 0x64, 0x53, 0x68, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a,
	0x0e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x22, 0x7c, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x64, 0x53, 0x68, 0x6f, 0x77, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x69, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x69, 0x73, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f,
	0x77, 0x65, 0x65, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x73, 0x57, 0x65,
	0x65, 0x6b, 0x2a, 0x52, 0x0a, 0x06, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x0e,
	0x47, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00,
	0x12, 0x10, 0x0a, 0x0c, 0x47, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54,
	0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x47, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x4d, 0x41, 0x4c,
	0x45, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x47, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x46, 0x45,
	0x4d, 0x41, 0x4c, 0x45, 0x10, 0x03, 0x2a, 0x47, 0x0a, 0x04, 0x48, 0x61, 0x6e, 0x64, 0x12, 0x10,
	0x0a, 0x0c, 0x48, 0x41, 0x4e, 0x44, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00,
	0x12, 0x0e, 0x0a, 0x0a, 0x48, 0x41, 0x4e, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x01,
	0x12, 0x0d, 0x0a, 0x09, 0x48, 0x41, 0x4e, 0x44, 0x5f, 0x4c, 0x45, 0x46, 0x54, 0x10, 0x02, 0x12,
	0x0e, 0x0a, 0x0a, 0x48, 0x41, 0x4e, 0x44, 0x5f, 0x52, 0x49, 0x47, 0x48, 0x54, 0x10, 0x03, 0x32,
	0xa3, 0x09, 0x0a, 0x09, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x50, 0x49, 0x12, 0x72, 0x0a,
	0x0f, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x50, 0x75, 0x6c, 0x73, 0x65, 0x54, 0x65, 0x73, 0x74,
	0x12, 0x2e, 0x2e, 0x6a, 0x74, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x62, 0x69, 0x7a, 0x2e,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x50, 0x75, 0x6c, 0x73, 0x65, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2f, 0x2e, 0x6a, 0x74, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x62, 0x69, 0x7a, 0x2e,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x50, 0x75, 0x6c, 0x73, 0x65, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x60, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x28,
	0x2e, 0x6a, 0x74, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6a, 0x74, 0x68, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x78, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x61, 0x6c, 0x53, 0x75,
	0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x2e, 0x6a, 0x74, 0x68, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x61, 0x6c, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6a, 0x74, 0x68,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x61, 0x6c, 0x53, 0x75, 0x67, 0x67, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7e, 0x0a,
	0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x69, 0x73, 0x6b, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x64, 0x69, 0x74, 0x79, 0x12, 0x32, 0x2e, 0x6a, 0x74, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e,
	0x62, 0x69, 0x7a, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x69, 0x73, 0x6b, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x6a, 0x74, 0x68, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x69, 0x73, 0x6b, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x64, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a,
	0x0b, 0x47, 0x65, 0x74, 0x52, 0x69, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x2b, 0x2e, 0x6a, 0x74, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e,
	0x62, 0x69, 0x7a, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x52, 0x69, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x81, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x52, 0x69, 0x73, 0x6b, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x33, 0x2e, 0x6a, 0x74, 0x68,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x69, 0x73, 0x6b, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x64, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x34, 0x2e, 0x6a, 0x74, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x69, 0x73, 0x6b,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6f, 0x0a, 0x0e, 0x45, 0x64, 0x69, 0x74, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x53, 0x68, 0x6f, 0x77, 0x12, 0x2d, 0x2e, 0x6a, 0x74, 0x68, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x64, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x68, 0x6f, 0x77, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6a, 0x74, 0x68, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x64, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x68, 0x6f, 0x77, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6c, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x53, 0x68, 0x6f, 0x77, 0x12, 0x2c, 0x2e, 0x6a, 0x74, 0x68, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x68, 0x6f, 0x77, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6a, 0x74, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x68, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x87, 0x01, 0x0a, 0x16, 0x45, 0x64, 0x69, 0x74, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x64, 0x53, 0x68, 0x6f, 0x77, 0x12,
	0x35, 0x2e, 0x6a, 0x74, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x64, 0x53, 0x68, 0x6f, 0x77, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x6a, 0x74, 0x68, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x64, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72,
	0x65, 0x64, 0x53, 0x68, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x84,
	0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x72, 0x65, 0x64, 0x53, 0x68, 0x6f, 0x77, 0x12, 0x34, 0x2e, 0x6a, 0x74, 0x68, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x72, 0x65, 0x64, 0x53, 0x68, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35,
	0x2e, 0x6a, 0x74, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x64, 0x53, 0x68, 0x6f, 0x77, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0xac, 0x01, 0x0a, 0x1a, 0x63, 0x6f, 0x6d, 0x2e, 0x6a, 0x74,
	0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x2e, 0x76, 0x31, 0x42, 0x0e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x70, 0x69, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x44, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x6a, 0x69, 0x6e, 0x6d, 0x75, 0x6b, 0x65, 0x6a, 0x69, 0x2f, 0x6a, 0x74, 0x2d,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x6a, 0x74, 0x68,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x2f, 0x62, 0x69, 0x7a, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x2f, 0x76, 0x31, 0x3b, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x4a,
	0x42, 0x52, 0xaa, 0x02, 0x16, 0x4a, 0x74, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x42, 0x69,
	0x7a, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x16, 0x4a, 0x74,
	0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5c, 0x42, 0x69, 0x7a, 0x5c, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x5c, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_jthealth_biz_report_v1_report_api_proto_rawDescOnce sync.Once
	file_jthealth_biz_report_v1_report_api_proto_rawDescData = file_jthealth_biz_report_v1_report_api_proto_rawDesc
)

func file_jthealth_biz_report_v1_report_api_proto_rawDescGZIP() []byte {
	file_jthealth_biz_report_v1_report_api_proto_rawDescOnce.Do(func() {
		file_jthealth_biz_report_v1_report_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_jthealth_biz_report_v1_report_api_proto_rawDescData)
	})
	return file_jthealth_biz_report_v1_report_api_proto_rawDescData
}

var file_jthealth_biz_report_v1_report_api_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_jthealth_biz_report_v1_report_api_proto_msgTypes = make([]protoimpl.MessageInfo, 42)
var file_jthealth_biz_report_v1_report_api_proto_goTypes = []interface{}{
	(Gender)(0),                            // 0: jthealth.biz.report.v1.Gender
	(Hand)(0),                              // 1: jthealth.biz.report.v1.Hand
	(*SubmitPulseTestRequest)(nil),         // 2: jthealth.biz.report.v1.SubmitPulseTestRequest
	(*SamplePayload)(nil),                  // 3: jthealth.biz.report.v1.SamplePayload
	(*GeoLocation)(nil),                    // 4: jthealth.biz.report.v1.GeoLocation
	(*SampleDevice)(nil),                   // 5: jthealth.biz.report.v1.SampleDevice
	(*SampleData)(nil),                     // 6: jthealth.biz.report.v1.SampleData
	(*SubmitPulseTestResponse)(nil),        // 7: jthealth.biz.report.v1.SubmitPulseTestResponse
	(*GetReportRequest)(nil),               // 8: jthealth.biz.report.v1.GetReportRequest
	(*AnswerList)(nil),                     // 9: jthealth.biz.report.v1.AnswerList
	(*Answer)(nil),                         // 10: jthealth.biz.report.v1.Answer
	(*GetReportResponse)(nil),              // 11: jthealth.biz.report.v1.GetReportResponse
	(*QuestionList)(nil),                   // 12: jthealth.biz.report.v1.QuestionList
	(*Question)(nil),                       // 13: jthealth.biz.report.v1.Question
	(*QuestionChoice)(nil),                 // 14: jthealth.biz.report.v1.QuestionChoice
	(*HealthReport)(nil),                   // 15: jthealth.biz.report.v1.HealthReport
	(*MeridianItems)(nil),                  // 16: jthealth.biz.report.v1.MeridianItems
	(*UserProfileSnapshot)(nil),            // 17: jthealth.biz.report.v1.UserProfileSnapshot
	(*GetMealSuggestionRequest)(nil),       // 18: jthealth.biz.report.v1.GetMealSuggestionRequest
	(*GetMealSuggestionResponse)(nil),      // 19: jthealth.biz.report.v1.GetMealSuggestionResponse
	(*PhysicalDialecticsMessage)(nil),      // 20: jthealth.biz.report.v1.PhysicalDialecticsMessage
	(*RiskInfo)(nil),                       // 21: jthealth.biz.report.v1.RiskInfo
	(*MealProduct)(nil),                    // 22: jthealth.biz.report.v1.MealProduct
	(*ImageResource)(nil),                  // 23: jthealth.biz.report.v1.ImageResource
	(*CreateRiskCommodityRequest)(nil),     // 24: jthealth.biz.report.v1.CreateRiskCommodityRequest
	(*CreateRiskCommodityResponse)(nil),    // 25: jthealth.biz.report.v1.CreateRiskCommodityResponse
	(*GetRiskListRequest)(nil),             // 26: jthealth.biz.report.v1.GetRiskListRequest
	(*GetRiskListResponse)(nil),            // 27: jthealth.biz.report.v1.GetRiskListResponse
	(*RiskMsg)(nil),                        // 28: jthealth.biz.report.v1.RiskMsg
	(*GetRiskCommodityListRequest)(nil),    // 29: jthealth.biz.report.v1.GetRiskCommodityListRequest
	(*GetRiskCommodityListResponse)(nil),   // 30: jthealth.biz.report.v1.GetRiskCommodityListResponse
	(*RiskCommodityMsg)(nil),               // 31: jthealth.biz.report.v1.RiskCommodityMsg
	(*EditReportShowRequest)(nil),          // 32: jthealth.biz.report.v1.EditReportShowRequest
	(*EditReportShowResponse)(nil),         // 33: jthealth.biz.report.v1.EditReportShowResponse
	(*GetReportShowRequest)(nil),           // 34: jthealth.biz.report.v1.GetReportShowRequest
	(*GetReportShowResponse)(nil),          // 35: jthealth.biz.report.v1.GetReportShowResponse
	(*EditReportComparedShowRequest)(nil),  // 36: jthealth.biz.report.v1.EditReportComparedShowRequest
	(*EditReportComparedShowResponse)(nil), // 37: jthealth.biz.report.v1.EditReportComparedShowResponse
	(*GetReportComparedShowRequest)(nil),   // 38: jthealth.biz.report.v1.GetReportComparedShowRequest
	(*GetReportComparedShowResponse)(nil),  // 39: jthealth.biz.report.v1.GetReportComparedShowResponse
	nil,                                    // 40: jthealth.biz.report.v1.SampleDevice.DeviceParamsEntry
	nil,                                    // 41: jthealth.biz.report.v1.SampleData.CodecParamsEntry
	nil,                                    // 42: jthealth.biz.report.v1.GetReportRequest.ModuleAnswersEntry
	nil,                                    // 43: jthealth.biz.report.v1.GetReportResponse.ModuleQuestionsEntry
	(*timestamppb.Timestamp)(nil),          // 44: google.protobuf.Timestamp
	(*wrapperspb.DoubleValue)(nil),         // 45: google.protobuf.DoubleValue
	(*emptypb.Empty)(nil),                  // 46: google.protobuf.Empty
}
var file_jthealth_biz_report_v1_report_api_proto_depIdxs = []int32{
	17, // 0: jthealth.biz.report.v1.SubmitPulseTestRequest.user_profile_snapshot:type_name -> jthealth.biz.report.v1.UserProfileSnapshot
	3,  // 1: jthealth.biz.report.v1.SubmitPulseTestRequest.payload:type_name -> jthealth.biz.report.v1.SamplePayload
	1,  // 2: jthealth.biz.report.v1.SamplePayload.hand:type_name -> jthealth.biz.report.v1.Hand
	4,  // 3: jthealth.biz.report.v1.SamplePayload.geo_location:type_name -> jthealth.biz.report.v1.GeoLocation
	5,  // 4: jthealth.biz.report.v1.SamplePayload.sample_device:type_name -> jthealth.biz.report.v1.SampleDevice
	6,  // 5: jthealth.biz.report.v1.SamplePayload.sample_data:type_name -> jthealth.biz.report.v1.SampleData
	44, // 6: jthealth.biz.report.v1.SamplePayload.sampling_start_time:type_name -> google.protobuf.Timestamp
	44, // 7: jthealth.biz.report.v1.SamplePayload.sampling_stop_time:type_name -> google.protobuf.Timestamp
	45, // 8: jthealth.biz.report.v1.GeoLocation.altitude:type_name -> google.protobuf.DoubleValue
	45, // 9: jthealth.biz.report.v1.GeoLocation.altitude_accuracy:type_name -> google.protobuf.DoubleValue
	45, // 10: jthealth.biz.report.v1.GeoLocation.heading:type_name -> google.protobuf.DoubleValue
	45, // 11: jthealth.biz.report.v1.GeoLocation.speed:type_name -> google.protobuf.DoubleValue
	40, // 12: jthealth.biz.report.v1.SampleDevice.device_params:type_name -> jthealth.biz.report.v1.SampleDevice.DeviceParamsEntry
	41, // 13: jthealth.biz.report.v1.SampleData.codec_params:type_name -> jthealth.biz.report.v1.SampleData.CodecParamsEntry
	42, // 14: jthealth.biz.report.v1.GetReportRequest.module_answers:type_name -> jthealth.biz.report.v1.GetReportRequest.ModuleAnswersEntry
	10, // 15: jthealth.biz.report.v1.AnswerList.answers:type_name -> jthealth.biz.report.v1.Answer
	43, // 16: jthealth.biz.report.v1.GetReportResponse.module_questions:type_name -> jthealth.biz.report.v1.GetReportResponse.ModuleQuestionsEntry
	15, // 17: jthealth.biz.report.v1.GetReportResponse.report:type_name -> jthealth.biz.report.v1.HealthReport
	13, // 18: jthealth.biz.report.v1.QuestionList.questions:type_name -> jthealth.biz.report.v1.Question
	14, // 19: jthealth.biz.report.v1.Question.choices:type_name -> jthealth.biz.report.v1.QuestionChoice
	21, // 20: jthealth.biz.report.v1.HealthReport.health_risk_index:type_name -> jthealth.biz.report.v1.RiskInfo
	21, // 21: jthealth.biz.report.v1.HealthReport.risk:type_name -> jthealth.biz.report.v1.RiskInfo
	22, // 22: jthealth.biz.report.v1.HealthReport.meal_products:type_name -> jthealth.biz.report.v1.MealProduct
	17, // 23: jthealth.biz.report.v1.HealthReport.user_profile:type_name -> jthealth.biz.report.v1.UserProfileSnapshot
	20, // 24: jthealth.biz.report.v1.HealthReport.physical_dialectics_list:type_name -> jthealth.biz.report.v1.PhysicalDialecticsMessage
	16, // 25: jthealth.biz.report.v1.HealthReport.meridians:type_name -> jthealth.biz.report.v1.MeridianItems
	1,  // 26: jthealth.biz.report.v1.UserProfileSnapshot.hand:type_name -> jthealth.biz.report.v1.Hand
	0,  // 27: jthealth.biz.report.v1.UserProfileSnapshot.gender:type_name -> jthealth.biz.report.v1.Gender
	22, // 28: jthealth.biz.report.v1.GetMealSuggestionResponse.food_suggestions:type_name -> jthealth.biz.report.v1.MealProduct
	23, // 29: jthealth.biz.report.v1.MealProduct.image:type_name -> jthealth.biz.report.v1.ImageResource
	28, // 30: jthealth.biz.report.v1.GetRiskListResponse.list:type_name -> jthealth.biz.report.v1.RiskMsg
	31, // 31: jthealth.biz.report.v1.GetRiskCommodityListResponse.list:type_name -> jthealth.biz.report.v1.RiskCommodityMsg
	9,  // 32: jthealth.biz.report.v1.GetReportRequest.ModuleAnswersEntry.value:type_name -> jthealth.biz.report.v1.AnswerList
	12, // 33: jthealth.biz.report.v1.GetReportResponse.ModuleQuestionsEntry.value:type_name -> jthealth.biz.report.v1.QuestionList
	2,  // 34: jthealth.biz.report.v1.ReportAPI.SubmitPulseTest:input_type -> jthealth.biz.report.v1.SubmitPulseTestRequest
	8,  // 35: jthealth.biz.report.v1.ReportAPI.GetReport:input_type -> jthealth.biz.report.v1.GetReportRequest
	18, // 36: jthealth.biz.report.v1.ReportAPI.GetMealSuggestion:input_type -> jthealth.biz.report.v1.GetMealSuggestionRequest
	24, // 37: jthealth.biz.report.v1.ReportAPI.CreateRiskCommodity:input_type -> jthealth.biz.report.v1.CreateRiskCommodityRequest
	46, // 38: jthealth.biz.report.v1.ReportAPI.GetRiskList:input_type -> google.protobuf.Empty
	29, // 39: jthealth.biz.report.v1.ReportAPI.GetRiskCommodityList:input_type -> jthealth.biz.report.v1.GetRiskCommodityListRequest
	32, // 40: jthealth.biz.report.v1.ReportAPI.EditReportShow:input_type -> jthealth.biz.report.v1.EditReportShowRequest
	34, // 41: jthealth.biz.report.v1.ReportAPI.GetReportShow:input_type -> jthealth.biz.report.v1.GetReportShowRequest
	36, // 42: jthealth.biz.report.v1.ReportAPI.EditReportComparedShow:input_type -> jthealth.biz.report.v1.EditReportComparedShowRequest
	38, // 43: jthealth.biz.report.v1.ReportAPI.GetReportComparedShow:input_type -> jthealth.biz.report.v1.GetReportComparedShowRequest
	7,  // 44: jthealth.biz.report.v1.ReportAPI.SubmitPulseTest:output_type -> jthealth.biz.report.v1.SubmitPulseTestResponse
	11, // 45: jthealth.biz.report.v1.ReportAPI.GetReport:output_type -> jthealth.biz.report.v1.GetReportResponse
	19, // 46: jthealth.biz.report.v1.ReportAPI.GetMealSuggestion:output_type -> jthealth.biz.report.v1.GetMealSuggestionResponse
	25, // 47: jthealth.biz.report.v1.ReportAPI.CreateRiskCommodity:output_type -> jthealth.biz.report.v1.CreateRiskCommodityResponse
	27, // 48: jthealth.biz.report.v1.ReportAPI.GetRiskList:output_type -> jthealth.biz.report.v1.GetRiskListResponse
	30, // 49: jthealth.biz.report.v1.ReportAPI.GetRiskCommodityList:output_type -> jthealth.biz.report.v1.GetRiskCommodityListResponse
	33, // 50: jthealth.biz.report.v1.ReportAPI.EditReportShow:output_type -> jthealth.biz.report.v1.EditReportShowResponse
	35, // 51: jthealth.biz.report.v1.ReportAPI.GetReportShow:output_type -> jthealth.biz.report.v1.GetReportShowResponse
	37, // 52: jthealth.biz.report.v1.ReportAPI.EditReportComparedShow:output_type -> jthealth.biz.report.v1.EditReportComparedShowResponse
	39, // 53: jthealth.biz.report.v1.ReportAPI.GetReportComparedShow:output_type -> jthealth.biz.report.v1.GetReportComparedShowResponse
	44, // [44:54] is the sub-list for method output_type
	34, // [34:44] is the sub-list for method input_type
	34, // [34:34] is the sub-list for extension type_name
	34, // [34:34] is the sub-list for extension extendee
	0,  // [0:34] is the sub-list for field type_name
}

func init() { file_jthealth_biz_report_v1_report_api_proto_init() }
func file_jthealth_biz_report_v1_report_api_proto_init() {
	if File_jthealth_biz_report_v1_report_api_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_jthealth_biz_report_v1_report_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitPulseTestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jthealth_biz_report_v1_report_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SamplePayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jthealth_biz_report_v1_report_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeoLocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jthealth_biz_report_v1_report_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SampleDevice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jthealth_biz_report_v1_report_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SampleData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jthealth_biz_report_v1_report_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitPulseTestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jthealth_biz_report_v1_report_api_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jthealth_biz_report_v1_report_api_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnswerList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jthealth_biz_report_v1_report_api_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Answer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jthealth_biz_report_v1_report_api_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jthealth_biz_report_v1_report_api_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jthealth_biz_report_v1_report_api_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Question); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jthealth_biz_report_v1_report_api_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionChoice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jthealth_biz_report_v1_report_api_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jthealth_biz_report_v1_report_api_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeridianItems); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jthealth_biz_report_v1_report_api_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserProfileSnapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jthealth_biz_report_v1_report_api_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMealSuggestionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jthealth_biz_report_v1_report_api_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMealSuggestionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jthealth_biz_report_v1_report_api_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhysicalDialecticsMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jthealth_biz_report_v1_report_api_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RiskInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jthealth_biz_report_v1_report_api_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MealProduct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jthealth_biz_report_v1_report_api_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jthealth_biz_report_v1_report_api_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRiskCommodityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jthealth_biz_report_v1_report_api_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRiskCommodityResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jthealth_biz_report_v1_report_api_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRiskListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jthealth_biz_report_v1_report_api_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRiskListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jthealth_biz_report_v1_report_api_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RiskMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jthealth_biz_report_v1_report_api_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRiskCommodityListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jthealth_biz_report_v1_report_api_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRiskCommodityListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jthealth_biz_report_v1_report_api_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RiskCommodityMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jthealth_biz_report_v1_report_api_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EditReportShowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jthealth_biz_report_v1_report_api_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EditReportShowResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jthealth_biz_report_v1_report_api_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReportShowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jthealth_biz_report_v1_report_api_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReportShowResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jthealth_biz_report_v1_report_api_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EditReportComparedShowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jthealth_biz_report_v1_report_api_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EditReportComparedShowResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jthealth_biz_report_v1_report_api_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReportComparedShowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jthealth_biz_report_v1_report_api_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReportComparedShowResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_jthealth_biz_report_v1_report_api_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   42,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_jthealth_biz_report_v1_report_api_proto_goTypes,
		DependencyIndexes: file_jthealth_biz_report_v1_report_api_proto_depIdxs,
		EnumInfos:         file_jthealth_biz_report_v1_report_api_proto_enumTypes,
		MessageInfos:      file_jthealth_biz_report_v1_report_api_proto_msgTypes,
	}.Build()
	File_jthealth_biz_report_v1_report_api_proto = out.File
	file_jthealth_biz_report_v1_report_api_proto_rawDesc = nil
	file_jthealth_biz_report_v1_report_api_proto_goTypes = nil
	file_jthealth_biz_report_v1_report_api_proto_depIdxs = nil
}
