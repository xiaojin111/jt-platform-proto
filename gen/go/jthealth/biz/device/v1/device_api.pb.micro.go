// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: jthealth/biz/device/v1/device_api.proto

package devicev1

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for DeviceAPI service

func NewDeviceAPIEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for DeviceAPI service

type DeviceAPIService interface {
	//创建设备组
	CreateDeviceGroup(ctx context.Context, in *CreateDeviceGroupRequest, opts ...client.CallOption) (*CreateDeviceGroupResponse, error)
	//获取设备组列表
	GetDeviceGroupList(ctx context.Context, in *GetDeviceGroupListRequest, opts ...client.CallOption) (*GetDeviceGroupListResponse, error)
	//导入设备列表
	ImportDeviceList(ctx context.Context, in *ImportDeviceListRequest, opts ...client.CallOption) (*ImportDeviceListResponse, error)
	//获取设备列表
	GetDeviceList(ctx context.Context, in *GetDeviceListRequest, opts ...client.CallOption) (*GetDeviceListResponse, error)
	// GetDeviceBySnOrMac 通过sn或mac获取设备.
	GetDeviceBySnOrMac(ctx context.Context, in *GetDeviceBySnOrMacRequest, opts ...client.CallOption) (*GetDeviceBySnOrMacResponse, error)
}

type deviceAPIService struct {
	c    client.Client
	name string
}

func NewDeviceAPIService(name string, c client.Client) DeviceAPIService {
	return &deviceAPIService{
		c:    c,
		name: name,
	}
}

func (c *deviceAPIService) CreateDeviceGroup(ctx context.Context, in *CreateDeviceGroupRequest, opts ...client.CallOption) (*CreateDeviceGroupResponse, error) {
	req := c.c.NewRequest(c.name, "DeviceAPI.CreateDeviceGroup", in)
	out := new(CreateDeviceGroupResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceAPIService) GetDeviceGroupList(ctx context.Context, in *GetDeviceGroupListRequest, opts ...client.CallOption) (*GetDeviceGroupListResponse, error) {
	req := c.c.NewRequest(c.name, "DeviceAPI.GetDeviceGroupList", in)
	out := new(GetDeviceGroupListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceAPIService) ImportDeviceList(ctx context.Context, in *ImportDeviceListRequest, opts ...client.CallOption) (*ImportDeviceListResponse, error) {
	req := c.c.NewRequest(c.name, "DeviceAPI.ImportDeviceList", in)
	out := new(ImportDeviceListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceAPIService) GetDeviceList(ctx context.Context, in *GetDeviceListRequest, opts ...client.CallOption) (*GetDeviceListResponse, error) {
	req := c.c.NewRequest(c.name, "DeviceAPI.GetDeviceList", in)
	out := new(GetDeviceListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceAPIService) GetDeviceBySnOrMac(ctx context.Context, in *GetDeviceBySnOrMacRequest, opts ...client.CallOption) (*GetDeviceBySnOrMacResponse, error) {
	req := c.c.NewRequest(c.name, "DeviceAPI.GetDeviceBySnOrMac", in)
	out := new(GetDeviceBySnOrMacResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DeviceAPI service

type DeviceAPIHandler interface {
	//创建设备组
	CreateDeviceGroup(context.Context, *CreateDeviceGroupRequest, *CreateDeviceGroupResponse) error
	//获取设备组列表
	GetDeviceGroupList(context.Context, *GetDeviceGroupListRequest, *GetDeviceGroupListResponse) error
	//导入设备列表
	ImportDeviceList(context.Context, *ImportDeviceListRequest, *ImportDeviceListResponse) error
	//获取设备列表
	GetDeviceList(context.Context, *GetDeviceListRequest, *GetDeviceListResponse) error
	// GetDeviceBySnOrMac 通过sn或mac获取设备.
	GetDeviceBySnOrMac(context.Context, *GetDeviceBySnOrMacRequest, *GetDeviceBySnOrMacResponse) error
}

func RegisterDeviceAPIHandler(s server.Server, hdlr DeviceAPIHandler, opts ...server.HandlerOption) error {
	type deviceAPI interface {
		CreateDeviceGroup(ctx context.Context, in *CreateDeviceGroupRequest, out *CreateDeviceGroupResponse) error
		GetDeviceGroupList(ctx context.Context, in *GetDeviceGroupListRequest, out *GetDeviceGroupListResponse) error
		ImportDeviceList(ctx context.Context, in *ImportDeviceListRequest, out *ImportDeviceListResponse) error
		GetDeviceList(ctx context.Context, in *GetDeviceListRequest, out *GetDeviceListResponse) error
		GetDeviceBySnOrMac(ctx context.Context, in *GetDeviceBySnOrMacRequest, out *GetDeviceBySnOrMacResponse) error
	}
	type DeviceAPI struct {
		deviceAPI
	}
	h := &deviceAPIHandler{hdlr}
	return s.Handle(s.NewHandler(&DeviceAPI{h}, opts...))
}

type deviceAPIHandler struct {
	DeviceAPIHandler
}

func (h *deviceAPIHandler) CreateDeviceGroup(ctx context.Context, in *CreateDeviceGroupRequest, out *CreateDeviceGroupResponse) error {
	return h.DeviceAPIHandler.CreateDeviceGroup(ctx, in, out)
}

func (h *deviceAPIHandler) GetDeviceGroupList(ctx context.Context, in *GetDeviceGroupListRequest, out *GetDeviceGroupListResponse) error {
	return h.DeviceAPIHandler.GetDeviceGroupList(ctx, in, out)
}

func (h *deviceAPIHandler) ImportDeviceList(ctx context.Context, in *ImportDeviceListRequest, out *ImportDeviceListResponse) error {
	return h.DeviceAPIHandler.ImportDeviceList(ctx, in, out)
}

func (h *deviceAPIHandler) GetDeviceList(ctx context.Context, in *GetDeviceListRequest, out *GetDeviceListResponse) error {
	return h.DeviceAPIHandler.GetDeviceList(ctx, in, out)
}

func (h *deviceAPIHandler) GetDeviceBySnOrMac(ctx context.Context, in *GetDeviceBySnOrMacRequest, out *GetDeviceBySnOrMacResponse) error {
	return h.DeviceAPIHandler.GetDeviceBySnOrMac(ctx, in, out)
}
