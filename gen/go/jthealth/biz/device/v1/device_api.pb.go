//
// 常州金姆健康科技有限公司. (c) 2019
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: jthealth/biz/device/v1/device_api.proto

package devicev1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// DeviceUsage 设备类型.
type DeviceUsage int32

const (
	// 无效的设备
	DeviceUsage_DEVICE_USAGE_INVALID DeviceUsage = 0
	// 未设置的设备
	DeviceUsage_DEVICE_USAGE_UNSET DeviceUsage = 1
	// 未定义类型
	DeviceUsage_DEVICE_USAGE_UNDEFINED DeviceUsage = 2
	// 试用机
	DeviceUsage_DEVICE_USAGE_TRIAL DeviceUsage = 3
	// 正式机
	DeviceUsage_DEVICE_USAGE_NORMAL DeviceUsage = 4
)

// Enum value maps for DeviceUsage.
var (
	DeviceUsage_name = map[int32]string{
		0: "DEVICE_USAGE_INVALID",
		1: "DEVICE_USAGE_UNSET",
		2: "DEVICE_USAGE_UNDEFINED",
		3: "DEVICE_USAGE_TRIAL",
		4: "DEVICE_USAGE_NORMAL",
	}
	DeviceUsage_value = map[string]int32{
		"DEVICE_USAGE_INVALID":   0,
		"DEVICE_USAGE_UNSET":     1,
		"DEVICE_USAGE_UNDEFINED": 2,
		"DEVICE_USAGE_TRIAL":     3,
		"DEVICE_USAGE_NORMAL":    4,
	}
)

func (x DeviceUsage) Enum() *DeviceUsage {
	p := new(DeviceUsage)
	*p = x
	return p
}

func (x DeviceUsage) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceUsage) Descriptor() protoreflect.EnumDescriptor {
	return file_jthealth_biz_device_v1_device_api_proto_enumTypes[0].Descriptor()
}

func (DeviceUsage) Type() protoreflect.EnumType {
	return &file_jthealth_biz_device_v1_device_api_proto_enumTypes[0]
}

func (x DeviceUsage) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeviceUsage.Descriptor instead.
func (DeviceUsage) EnumDescriptor() ([]byte, []int) {
	return file_jthealth_biz_device_v1_device_api_proto_rawDescGZIP(), []int{0}
}

// 判断试用设备是否可用请求
type CheckDeviceIsUsableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 设备mac地址
	Mac string `protobuf:"bytes,1,opt,name=mac,proto3" json:"mac,omitempty"`
	// 设备序列号
	Sn string `protobuf:"bytes,2,opt,name=sn,proto3" json:"sn,omitempty"`
	// 用户ID
	UserId string `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *CheckDeviceIsUsableRequest) Reset() {
	*x = CheckDeviceIsUsableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jthealth_biz_device_v1_device_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckDeviceIsUsableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckDeviceIsUsableRequest) ProtoMessage() {}

func (x *CheckDeviceIsUsableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jthealth_biz_device_v1_device_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckDeviceIsUsableRequest.ProtoReflect.Descriptor instead.
func (*CheckDeviceIsUsableRequest) Descriptor() ([]byte, []int) {
	return file_jthealth_biz_device_v1_device_api_proto_rawDescGZIP(), []int{0}
}

func (x *CheckDeviceIsUsableRequest) GetMac() string {
	if x != nil {
		return x.Mac
	}
	return ""
}

func (x *CheckDeviceIsUsableRequest) GetSn() string {
	if x != nil {
		return x.Sn
	}
	return ""
}

func (x *CheckDeviceIsUsableRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

// 判断试用设备是否可用响应
type CheckDeviceIsUsableResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 设备ID
	DeviceId string `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	// 是否可用
	IsUsable bool `protobuf:"varint,2,opt,name=is_usable,json=isUsable,proto3" json:"is_usable,omitempty"`
	// 不可用原因
	Reason string `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *CheckDeviceIsUsableResponse) Reset() {
	*x = CheckDeviceIsUsableResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jthealth_biz_device_v1_device_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckDeviceIsUsableResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckDeviceIsUsableResponse) ProtoMessage() {}

func (x *CheckDeviceIsUsableResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jthealth_biz_device_v1_device_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckDeviceIsUsableResponse.ProtoReflect.Descriptor instead.
func (*CheckDeviceIsUsableResponse) Descriptor() ([]byte, []int) {
	return file_jthealth_biz_device_v1_device_api_proto_rawDescGZIP(), []int{1}
}

func (x *CheckDeviceIsUsableResponse) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *CheckDeviceIsUsableResponse) GetIsUsable() bool {
	if x != nil {
		return x.IsUsable
	}
	return false
}

func (x *CheckDeviceIsUsableResponse) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

// 试用版硬件清单请求
type ListTrialDevicesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 分页
	PageNum  int32  `protobuf:"varint,1,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`
	PageSize int32  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Mac      string `protobuf:"bytes,4,opt,name=mac,proto3" json:"mac,omitempty"` //Pagination pagination = 1;
}

func (x *ListTrialDevicesRequest) Reset() {
	*x = ListTrialDevicesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jthealth_biz_device_v1_device_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTrialDevicesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTrialDevicesRequest) ProtoMessage() {}

func (x *ListTrialDevicesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jthealth_biz_device_v1_device_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTrialDevicesRequest.ProtoReflect.Descriptor instead.
func (*ListTrialDevicesRequest) Descriptor() ([]byte, []int) {
	return file_jthealth_biz_device_v1_device_api_proto_rawDescGZIP(), []int{2}
}

func (x *ListTrialDevicesRequest) GetPageNum() int32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *ListTrialDevicesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListTrialDevicesRequest) GetMac() string {
	if x != nil {
		return x.Mac
	}
	return ""
}

// 试用版硬件清单响应
type ListTrialDevicesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 试用版设备信息清单.
	PageNum      int32     `protobuf:"varint,1,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`
	PageSize     int32     `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Total        int32     `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	TrialDevices []*Device `protobuf:"bytes,4,rep,name=trial_devices,json=trialDevices,proto3" json:"trial_devices,omitempty"`
}

func (x *ListTrialDevicesResponse) Reset() {
	*x = ListTrialDevicesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jthealth_biz_device_v1_device_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTrialDevicesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTrialDevicesResponse) ProtoMessage() {}

func (x *ListTrialDevicesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jthealth_biz_device_v1_device_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTrialDevicesResponse.ProtoReflect.Descriptor instead.
func (*ListTrialDevicesResponse) Descriptor() ([]byte, []int) {
	return file_jthealth_biz_device_v1_device_api_proto_rawDescGZIP(), []int{3}
}

func (x *ListTrialDevicesResponse) GetPageNum() int32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *ListTrialDevicesResponse) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListTrialDevicesResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListTrialDevicesResponse) GetTrialDevices() []*Device {
	if x != nil {
		return x.TrialDevices
	}
	return nil
}

// 添加试用版设备请求
type CreateTrialDeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// sn号
	Sn string `protobuf:"bytes,1,opt,name=sn,proto3" json:"sn,omitempty"`
	// mac地址
	Mac string `protobuf:"bytes,2,opt,name=mac,proto3" json:"mac,omitempty"`
}

func (x *CreateTrialDeviceRequest) Reset() {
	*x = CreateTrialDeviceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jthealth_biz_device_v1_device_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTrialDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTrialDeviceRequest) ProtoMessage() {}

func (x *CreateTrialDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jthealth_biz_device_v1_device_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTrialDeviceRequest.ProtoReflect.Descriptor instead.
func (*CreateTrialDeviceRequest) Descriptor() ([]byte, []int) {
	return file_jthealth_biz_device_v1_device_api_proto_rawDescGZIP(), []int{4}
}

func (x *CreateTrialDeviceRequest) GetSn() string {
	if x != nil {
		return x.Sn
	}
	return ""
}

func (x *CreateTrialDeviceRequest) GetMac() string {
	if x != nil {
		return x.Mac
	}
	return ""
}

// 添加试用版设备响应
type CreateTrialDeviceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 设备信息
	TrialDevice *Device `protobuf:"bytes,1,opt,name=trial_device,json=trialDevice,proto3" json:"trial_device,omitempty"`
}

func (x *CreateTrialDeviceResponse) Reset() {
	*x = CreateTrialDeviceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jthealth_biz_device_v1_device_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTrialDeviceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTrialDeviceResponse) ProtoMessage() {}

func (x *CreateTrialDeviceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jthealth_biz_device_v1_device_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTrialDeviceResponse.ProtoReflect.Descriptor instead.
func (*CreateTrialDeviceResponse) Descriptor() ([]byte, []int) {
	return file_jthealth_biz_device_v1_device_api_proto_rawDescGZIP(), []int{5}
}

func (x *CreateTrialDeviceResponse) GetTrialDevice() *Device {
	if x != nil {
		return x.TrialDevice
	}
	return nil
}

// 删除试用版设备请求
type DeleteTrialDeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 设备ID
	DeviceId string `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
}

func (x *DeleteTrialDeviceRequest) Reset() {
	*x = DeleteTrialDeviceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jthealth_biz_device_v1_device_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTrialDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTrialDeviceRequest) ProtoMessage() {}

func (x *DeleteTrialDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jthealth_biz_device_v1_device_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTrialDeviceRequest.ProtoReflect.Descriptor instead.
func (*DeleteTrialDeviceRequest) Descriptor() ([]byte, []int) {
	return file_jthealth_biz_device_v1_device_api_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteTrialDeviceRequest) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

// 删除试用版设备响应
type DeleteTrialDeviceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteTrialDeviceResponse) Reset() {
	*x = DeleteTrialDeviceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jthealth_biz_device_v1_device_api_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTrialDeviceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTrialDeviceResponse) ProtoMessage() {}

func (x *DeleteTrialDeviceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jthealth_biz_device_v1_device_api_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTrialDeviceResponse.ProtoReflect.Descriptor instead.
func (*DeleteTrialDeviceResponse) Descriptor() ([]byte, []int) {
	return file_jthealth_biz_device_v1_device_api_proto_rawDescGZIP(), []int{7}
}

// 升级试用版设备请求
type UpgradeTrialDeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 设备ID
	DeviceId string `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
}

func (x *UpgradeTrialDeviceRequest) Reset() {
	*x = UpgradeTrialDeviceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jthealth_biz_device_v1_device_api_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpgradeTrialDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradeTrialDeviceRequest) ProtoMessage() {}

func (x *UpgradeTrialDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jthealth_biz_device_v1_device_api_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradeTrialDeviceRequest.ProtoReflect.Descriptor instead.
func (*UpgradeTrialDeviceRequest) Descriptor() ([]byte, []int) {
	return file_jthealth_biz_device_v1_device_api_proto_rawDescGZIP(), []int{8}
}

func (x *UpgradeTrialDeviceRequest) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

// 升级试用版设备响应
type UpgradeTrialDeviceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpgradeTrialDeviceResponse) Reset() {
	*x = UpgradeTrialDeviceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jthealth_biz_device_v1_device_api_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpgradeTrialDeviceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradeTrialDeviceResponse) ProtoMessage() {}

func (x *UpgradeTrialDeviceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jthealth_biz_device_v1_device_api_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradeTrialDeviceResponse.ProtoReflect.Descriptor instead.
func (*UpgradeTrialDeviceResponse) Descriptor() ([]byte, []int) {
	return file_jthealth_biz_device_v1_device_api_proto_rawDescGZIP(), []int{9}
}

// 通过设备ID获取设备信息请求
type GetDeviceByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 设备ID
	DeviceId string `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
}

func (x *GetDeviceByIDRequest) Reset() {
	*x = GetDeviceByIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jthealth_biz_device_v1_device_api_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeviceByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeviceByIDRequest) ProtoMessage() {}

func (x *GetDeviceByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jthealth_biz_device_v1_device_api_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeviceByIDRequest.ProtoReflect.Descriptor instead.
func (*GetDeviceByIDRequest) Descriptor() ([]byte, []int) {
	return file_jthealth_biz_device_v1_device_api_proto_rawDescGZIP(), []int{10}
}

func (x *GetDeviceByIDRequest) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

// 通过设备ID获取设备信息响应
type GetDeviceByIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 设备信息
	Device *Device `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
}

func (x *GetDeviceByIDResponse) Reset() {
	*x = GetDeviceByIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jthealth_biz_device_v1_device_api_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeviceByIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeviceByIDResponse) ProtoMessage() {}

func (x *GetDeviceByIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jthealth_biz_device_v1_device_api_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeviceByIDResponse.ProtoReflect.Descriptor instead.
func (*GetDeviceByIDResponse) Descriptor() ([]byte, []int) {
	return file_jthealth_biz_device_v1_device_api_proto_rawDescGZIP(), []int{11}
}

func (x *GetDeviceByIDResponse) GetDevice() *Device {
	if x != nil {
		return x.Device
	}
	return nil
}

// 通过sn或mac获取设备请求
type GetDeviceBySnOrMacRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 设备的mac地址
	Mac string `protobuf:"bytes,1,opt,name=mac,proto3" json:"mac,omitempty"`
	// 设备的sn号
	Sn string `protobuf:"bytes,2,opt,name=sn,proto3" json:"sn,omitempty"`
}

func (x *GetDeviceBySnOrMacRequest) Reset() {
	*x = GetDeviceBySnOrMacRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jthealth_biz_device_v1_device_api_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeviceBySnOrMacRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeviceBySnOrMacRequest) ProtoMessage() {}

func (x *GetDeviceBySnOrMacRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jthealth_biz_device_v1_device_api_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeviceBySnOrMacRequest.ProtoReflect.Descriptor instead.
func (*GetDeviceBySnOrMacRequest) Descriptor() ([]byte, []int) {
	return file_jthealth_biz_device_v1_device_api_proto_rawDescGZIP(), []int{12}
}

func (x *GetDeviceBySnOrMacRequest) GetMac() string {
	if x != nil {
		return x.Mac
	}
	return ""
}

func (x *GetDeviceBySnOrMacRequest) GetSn() string {
	if x != nil {
		return x.Sn
	}
	return ""
}

// 通过sn或mac获取设备响应
type GetDeviceBySnOrMacResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 设备信息
	Device *Device `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
}

func (x *GetDeviceBySnOrMacResponse) Reset() {
	*x = GetDeviceBySnOrMacResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jthealth_biz_device_v1_device_api_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeviceBySnOrMacResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeviceBySnOrMacResponse) ProtoMessage() {}

func (x *GetDeviceBySnOrMacResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jthealth_biz_device_v1_device_api_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeviceBySnOrMacResponse.ProtoReflect.Descriptor instead.
func (*GetDeviceBySnOrMacResponse) Descriptor() ([]byte, []int) {
	return file_jthealth_biz_device_v1_device_api_proto_rawDescGZIP(), []int{13}
}

func (x *GetDeviceBySnOrMacResponse) GetDevice() *Device {
	if x != nil {
		return x.Device
	}
	return nil
}

//增加设备
type AddDeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 设备mac地址
	Mac string `protobuf:"bytes,2,opt,name=mac,proto3" json:"mac,omitempty"`
	// 设备sn号
	Sn string `protobuf:"bytes,3,opt,name=sn,proto3" json:"sn,omitempty"`
	// 设备型号
	Model string `protobuf:"bytes,4,opt,name=model,proto3" json:"model,omitempty"`
	// 设备类型
	DeviceUsage DeviceUsage `protobuf:"varint,5,opt,name=device_usage,json=deviceUsage,proto3,enum=jthealth.biz.device.v1.DeviceUsage" json:"device_usage,omitempty"`
	// 设备备注
	Remark string `protobuf:"bytes,6,opt,name=remark,proto3" json:"remark,omitempty"`
}

func (x *AddDeviceRequest) Reset() {
	*x = AddDeviceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jthealth_biz_device_v1_device_api_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddDeviceRequest) ProtoMessage() {}

func (x *AddDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jthealth_biz_device_v1_device_api_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddDeviceRequest.ProtoReflect.Descriptor instead.
func (*AddDeviceRequest) Descriptor() ([]byte, []int) {
	return file_jthealth_biz_device_v1_device_api_proto_rawDescGZIP(), []int{14}
}

func (x *AddDeviceRequest) GetMac() string {
	if x != nil {
		return x.Mac
	}
	return ""
}

func (x *AddDeviceRequest) GetSn() string {
	if x != nil {
		return x.Sn
	}
	return ""
}

func (x *AddDeviceRequest) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *AddDeviceRequest) GetDeviceUsage() DeviceUsage {
	if x != nil {
		return x.DeviceUsage
	}
	return DeviceUsage_DEVICE_USAGE_INVALID
}

func (x *AddDeviceRequest) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

type AddDeviceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 设备ID
	DeviceId  string                 `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *AddDeviceResponse) Reset() {
	*x = AddDeviceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jthealth_biz_device_v1_device_api_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddDeviceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddDeviceResponse) ProtoMessage() {}

func (x *AddDeviceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jthealth_biz_device_v1_device_api_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddDeviceResponse.ProtoReflect.Descriptor instead.
func (*AddDeviceResponse) Descriptor() ([]byte, []int) {
	return file_jthealth_biz_device_v1_device_api_proto_rawDescGZIP(), []int{15}
}

func (x *AddDeviceResponse) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *AddDeviceResponse) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

//删除设备
type DeleteDeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId string `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
}

func (x *DeleteDeviceRequest) Reset() {
	*x = DeleteDeviceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jthealth_biz_device_v1_device_api_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDeviceRequest) ProtoMessage() {}

func (x *DeleteDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jthealth_biz_device_v1_device_api_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDeviceRequest.ProtoReflect.Descriptor instead.
func (*DeleteDeviceRequest) Descriptor() ([]byte, []int) {
	return file_jthealth_biz_device_v1_device_api_proto_rawDescGZIP(), []int{16}
}

func (x *DeleteDeviceRequest) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

type DeleteDeviceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId  string                 `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	DeletedAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
}

func (x *DeleteDeviceResponse) Reset() {
	*x = DeleteDeviceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jthealth_biz_device_v1_device_api_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDeviceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDeviceResponse) ProtoMessage() {}

func (x *DeleteDeviceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jthealth_biz_device_v1_device_api_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDeviceResponse.ProtoReflect.Descriptor instead.
func (*DeleteDeviceResponse) Descriptor() ([]byte, []int) {
	return file_jthealth_biz_device_v1_device_api_proto_rawDescGZIP(), []int{17}
}

func (x *DeleteDeviceResponse) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *DeleteDeviceResponse) GetDeletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

//更新设备
type UpdateDeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device *Device `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
}

func (x *UpdateDeviceRequest) Reset() {
	*x = UpdateDeviceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jthealth_biz_device_v1_device_api_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDeviceRequest) ProtoMessage() {}

func (x *UpdateDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jthealth_biz_device_v1_device_api_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDeviceRequest.ProtoReflect.Descriptor instead.
func (*UpdateDeviceRequest) Descriptor() ([]byte, []int) {
	return file_jthealth_biz_device_v1_device_api_proto_rawDescGZIP(), []int{18}
}

func (x *UpdateDeviceRequest) GetDevice() *Device {
	if x != nil {
		return x.Device
	}
	return nil
}

type UpdateDeviceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device *Device `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"` //  google.protobuf.Timestamp updated_at=2;
}

func (x *UpdateDeviceResponse) Reset() {
	*x = UpdateDeviceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jthealth_biz_device_v1_device_api_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDeviceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDeviceResponse) ProtoMessage() {}

func (x *UpdateDeviceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jthealth_biz_device_v1_device_api_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDeviceResponse.ProtoReflect.Descriptor instead.
func (*UpdateDeviceResponse) Descriptor() ([]byte, []int) {
	return file_jthealth_biz_device_v1_device_api_proto_rawDescGZIP(), []int{19}
}

func (x *UpdateDeviceResponse) GetDevice() *Device {
	if x != nil {
		return x.Device
	}
	return nil
}

//*表格对象
type UploadExl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//媒体类型
	Mime string `protobuf:"bytes,1,opt,name=mime,proto3" json:"mime,omitempty"`
	//二进制文件
	Excel []byte `protobuf:"bytes,2,opt,name=excel,proto3" json:"excel,omitempty"`
	//名称
	FileName string `protobuf:"bytes,3,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
}

func (x *UploadExl) Reset() {
	*x = UploadExl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jthealth_biz_device_v1_device_api_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadExl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadExl) ProtoMessage() {}

func (x *UploadExl) ProtoReflect() protoreflect.Message {
	mi := &file_jthealth_biz_device_v1_device_api_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadExl.ProtoReflect.Descriptor instead.
func (*UploadExl) Descriptor() ([]byte, []int) {
	return file_jthealth_biz_device_v1_device_api_proto_rawDescGZIP(), []int{20}
}

func (x *UploadExl) GetMime() string {
	if x != nil {
		return x.Mime
	}
	return ""
}

func (x *UploadExl) GetExcel() []byte {
	if x != nil {
		return x.Excel
	}
	return nil
}

func (x *UploadExl) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

type UploadExcelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UploadExcel *UploadExl `protobuf:"bytes,1,opt,name=uploadExcel,proto3" json:"uploadExcel,omitempty"`
}

func (x *UploadExcelRequest) Reset() {
	*x = UploadExcelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jthealth_biz_device_v1_device_api_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadExcelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadExcelRequest) ProtoMessage() {}

func (x *UploadExcelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jthealth_biz_device_v1_device_api_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadExcelRequest.ProtoReflect.Descriptor instead.
func (*UploadExcelRequest) Descriptor() ([]byte, []int) {
	return file_jthealth_biz_device_v1_device_api_proto_rawDescGZIP(), []int{21}
}

func (x *UploadExcelRequest) GetUploadExcel() *UploadExl {
	if x != nil {
		return x.UploadExcel
	}
	return nil
}

type UploadExcelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg string `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *UploadExcelResponse) Reset() {
	*x = UploadExcelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jthealth_biz_device_v1_device_api_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadExcelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadExcelResponse) ProtoMessage() {}

func (x *UploadExcelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jthealth_biz_device_v1_device_api_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadExcelResponse.ProtoReflect.Descriptor instead.
func (*UploadExcelResponse) Descriptor() ([]byte, []int) {
	return file_jthealth_biz_device_v1_device_api_proto_rawDescGZIP(), []int{22}
}

func (x *UploadExcelResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type SetDistributorsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mac    string `protobuf:"bytes,1,opt,name=mac,proto3" json:"mac,omitempty"`
	Mobile string `protobuf:"bytes,2,opt,name=mobile,proto3" json:"mobile,omitempty"`
}

func (x *SetDistributorsReq) Reset() {
	*x = SetDistributorsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jthealth_biz_device_v1_device_api_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetDistributorsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDistributorsReq) ProtoMessage() {}

func (x *SetDistributorsReq) ProtoReflect() protoreflect.Message {
	mi := &file_jthealth_biz_device_v1_device_api_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDistributorsReq.ProtoReflect.Descriptor instead.
func (*SetDistributorsReq) Descriptor() ([]byte, []int) {
	return file_jthealth_biz_device_v1_device_api_proto_rawDescGZIP(), []int{23}
}

func (x *SetDistributorsReq) GetMac() string {
	if x != nil {
		return x.Mac
	}
	return ""
}

func (x *SetDistributorsReq) GetMobile() string {
	if x != nil {
		return x.Mobile
	}
	return ""
}

type SetDistributorsRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mess string `protobuf:"bytes,1,opt,name=mess,proto3" json:"mess,omitempty"`
}

func (x *SetDistributorsRsp) Reset() {
	*x = SetDistributorsRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jthealth_biz_device_v1_device_api_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetDistributorsRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDistributorsRsp) ProtoMessage() {}

func (x *SetDistributorsRsp) ProtoReflect() protoreflect.Message {
	mi := &file_jthealth_biz_device_v1_device_api_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDistributorsRsp.ProtoReflect.Descriptor instead.
func (*SetDistributorsRsp) Descriptor() ([]byte, []int) {
	return file_jthealth_biz_device_v1_device_api_proto_rawDescGZIP(), []int{24}
}

func (x *SetDistributorsRsp) GetMess() string {
	if x != nil {
		return x.Mess
	}
	return ""
}

// Pagination 分页.
type Pagination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 分页偏移量
	Offset int32 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	// 期望分页查询记录的数量
	Size int32 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *Pagination) Reset() {
	*x = Pagination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jthealth_biz_device_v1_device_api_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pagination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pagination) ProtoMessage() {}

func (x *Pagination) ProtoReflect() protoreflect.Message {
	mi := &file_jthealth_biz_device_v1_device_api_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pagination.ProtoReflect.Descriptor instead.
func (*Pagination) Descriptor() ([]byte, []int) {
	return file_jthealth_biz_device_v1_device_api_proto_rawDescGZIP(), []int{25}
}

func (x *Pagination) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *Pagination) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

// Device 设备信息.
type Device struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 设备ID
	DeviceId string `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	// 设备mac地址
	Mac string `protobuf:"bytes,2,opt,name=mac,proto3" json:"mac,omitempty"`
	// 设备sn号
	Sn string `protobuf:"bytes,3,opt,name=sn,proto3" json:"sn,omitempty"`
	// 设备型号
	Model string `protobuf:"bytes,4,opt,name=model,proto3" json:"model,omitempty"`
	// 设备类型
	DeviceUsage DeviceUsage `protobuf:"varint,5,opt,name=device_usage,json=deviceUsage,proto3,enum=jthealth.biz.device.v1.DeviceUsage" json:"device_usage,omitempty"`
	// 设备备注
	Remark string `protobuf:"bytes,6,opt,name=remark,proto3" json:"remark,omitempty"`
}

func (x *Device) Reset() {
	*x = Device{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jthealth_biz_device_v1_device_api_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Device) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Device) ProtoMessage() {}

func (x *Device) ProtoReflect() protoreflect.Message {
	mi := &file_jthealth_biz_device_v1_device_api_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Device.ProtoReflect.Descriptor instead.
func (*Device) Descriptor() ([]byte, []int) {
	return file_jthealth_biz_device_v1_device_api_proto_rawDescGZIP(), []int{26}
}

func (x *Device) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *Device) GetMac() string {
	if x != nil {
		return x.Mac
	}
	return ""
}

func (x *Device) GetSn() string {
	if x != nil {
		return x.Sn
	}
	return ""
}

func (x *Device) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *Device) GetDeviceUsage() DeviceUsage {
	if x != nil {
		return x.DeviceUsage
	}
	return DeviceUsage_DEVICE_USAGE_INVALID
}

func (x *Device) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

var File_jthealth_biz_device_v1_device_api_proto protoreflect.FileDescriptor

var file_jthealth_biz_device_v1_device_api_proto_rawDesc = []byte{
	0x0a, 0x27, 0x6a, 0x74, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2f, 0x62, 0x69, 0x7a, 0x2f, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x6a, 0x74, 0x68, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x57, 0x0a, 0x1a, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x73, 0x55, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d,
	0x61, 0x63, 0x12, 0x0e, 0x0a, 0x02, 0x73, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x73, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x6f, 0x0a, 0x1b, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x73, 0x55, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x75, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x55, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x63, 0x0a, 0x17,
	0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e,
	0x75, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x6d, 0x61, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x61,
	0x63, 0x22, 0xad, 0x01, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x43, 0x0a, 0x0d,
	0x74, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6a, 0x74, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x62,
	0x69, 0x7a, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x0c, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x22, 0x3c, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x69, 0x61, 0x6c,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x73, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x73, 0x6e, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x61, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x61, 0x63, 0x22,
	0x5e, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0c,
	0x74, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6a, 0x74, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x62, 0x69,
	0x7a, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x0b, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x22,
	0x37, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x22, 0x1b, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x38, 0x0a, 0x19, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x54, 0x72, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x22,
	0x1c, 0x0a, 0x1a, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x33, 0x0a,
	0x14, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x64, 0x22, 0x4f, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x42,
	0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x06, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6a, 0x74,
	0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x22, 0x3d, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x42, 0x79, 0x53, 0x6e, 0x4f, 0x72, 0x4d, 0x61, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d,
	0x61, 0x63, 0x12, 0x0e, 0x0a, 0x02, 0x73, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x73, 0x6e, 0x22, 0x54, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x42,
	0x79, 0x53, 0x6e, 0x4f, 0x72, 0x4d, 0x61, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x36, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x6a, 0x74, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x62, 0x69, 0x7a, 0x2e,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x22, 0xaa, 0x01, 0x0a, 0x10, 0x41, 0x64, 0x64,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x61, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x61, 0x63, 0x12,
	0x0e, 0x0a, 0x02, 0x73, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x73, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x46, 0x0a, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6a, 0x74,
	0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0x6b, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x22, 0x32, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x22, 0x6e, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x4d, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a,
	0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x6a, 0x74, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x22, 0x4e, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a,
	0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x6a, 0x74, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x22, 0x52, 0x0a, 0x09, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x45,
	0x78, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6d, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x78, 0x63, 0x65, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x65, 0x78, 0x63, 0x65, 0x6c, 0x12, 0x1b, 0x0a, 0x09,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x59, 0x0a, 0x12, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x43, 0x0a, 0x0b, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6a, 0x74, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e,
	0x62, 0x69, 0x7a, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x45, 0x78, 0x6c, 0x52, 0x0b, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x45,
	0x78, 0x63, 0x65, 0x6c, 0x22, 0x27, 0x0a, 0x13, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x45, 0x78,
	0x63, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x73, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x3e, 0x0a,
	0x12, 0x53, 0x65, 0x74, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x73,
	0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6d, 0x61, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x22, 0x28, 0x0a,
	0x12, 0x53, 0x65, 0x74, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x73,
	0x52, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6d, 0x65, 0x73, 0x73, 0x22, 0x38, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x22, 0xbd, 0x01, 0x0a, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x63,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x61, 0x63, 0x12, 0x0e, 0x0a, 0x02, 0x73,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x73, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x12, 0x46, 0x0a, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x75, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6a, 0x74, 0x68, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0b, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x2a, 0x8c, 0x01, 0x0a, 0x0b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x18, 0x0a, 0x14, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x55, 0x53, 0x41, 0x47,
	0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x44,
	0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x55, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45,
	0x54, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x55, 0x53,
	0x41, 0x47, 0x45, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x02, 0x12,
	0x16, 0x0a, 0x12, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x55, 0x53, 0x41, 0x47, 0x45, 0x5f,
	0x54, 0x52, 0x49, 0x41, 0x4c, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x44, 0x45, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x55, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x04,
	0x32, 0xe9, 0x0a, 0x0a, 0x09, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x50, 0x49, 0x12, 0x7e,
	0x0a, 0x13, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x73, 0x55,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x32, 0x2e, 0x6a, 0x74, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x73, 0x55, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x6a, 0x74, 0x68, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x73,
	0x55, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x75,
	0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x12, 0x2f, 0x2e, 0x6a, 0x74, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x62, 0x69,
	0x7a, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x54, 0x72, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x6a, 0x74, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x62,
	0x69, 0x7a, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x78, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x72, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x30, 0x2e, 0x6a, 0x74, 0x68,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6a,
	0x74, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x69, 0x61,
	0x6c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x78, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x30, 0x2e, 0x6a, 0x74, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e,
	0x62, 0x69, 0x7a, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6a, 0x74, 0x68, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7b, 0x0a, 0x12, 0x55, 0x70, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x31, 0x2e, 0x6a, 0x74, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x54, 0x72, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x32, 0x2e, 0x6a, 0x74, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x62, 0x69,
	0x7a, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6c, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x42, 0x79, 0x49, 0x44, 0x12, 0x2c, 0x2e, 0x6a, 0x74, 0x68, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6a, 0x74, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7b, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x42, 0x79, 0x53, 0x6e, 0x4f, 0x72, 0x4d, 0x61, 0x63, 0x12, 0x31, 0x2e, 0x6a, 0x74, 0x68,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x42, 0x79, 0x53,
	0x6e, 0x4f, 0x72, 0x4d, 0x61, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e,
	0x6a, 0x74, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x42, 0x79, 0x53, 0x6e, 0x4f, 0x72, 0x4d, 0x61, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x60, 0x0a, 0x09, 0x41, 0x64, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x28,
	0x2e, 0x6a, 0x74, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6a, 0x74, 0x68, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x64, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x69, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x2b, 0x2e, 0x6a, 0x74, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x62,
	0x69, 0x7a, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2c, 0x2e, 0x6a, 0x74, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x62, 0x69, 0x7a, 0x2e,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x69,
	0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2b,
	0x2e, 0x6a, 0x74, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6a, 0x74,
	0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x66, 0x0a, 0x0b, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x12, 0x2a, 0x2e, 0x6a, 0x74, 0x68, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x2e, 0x62, 0x69, 0x7a, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6a, 0x74, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e,
	0x62, 0x69, 0x7a, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x69, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x6f, 0x72, 0x73, 0x12, 0x2a, 0x2e, 0x6a, 0x74, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e,
	0x62, 0x69, 0x7a, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65,
	0x74, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71,
	0x1a, 0x2a, 0x2e, 0x6a, 0x74, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x62, 0x69, 0x7a, 0x2e,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x44, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x73, 0x70, 0x42, 0xac, 0x01, 0x0a,
	0x1a, 0x63, 0x6f, 0x6d, 0x2e, 0x6a, 0x74, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x62, 0x69,
	0x7a, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x42, 0x0e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x44, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6a, 0x69, 0x6e, 0x6d, 0x75, 0x6b,
	0x65, 0x6a, 0x69, 0x2f, 0x6a, 0x74, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x65, 0x6e,
	0x2f, 0x67, 0x6f, 0x2f, 0x6a, 0x74, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2f, 0x62, 0x69, 0x7a,
	0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x4a, 0x42, 0x44, 0xaa, 0x02, 0x16, 0x4a, 0x74, 0x68, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x2e, 0x42, 0x69, 0x7a, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x56, 0x31, 0xca, 0x02, 0x16, 0x4a, 0x74, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5c, 0x42, 0x69,
	0x7a, 0x5c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5c, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_jthealth_biz_device_v1_device_api_proto_rawDescOnce sync.Once
	file_jthealth_biz_device_v1_device_api_proto_rawDescData = file_jthealth_biz_device_v1_device_api_proto_rawDesc
)

func file_jthealth_biz_device_v1_device_api_proto_rawDescGZIP() []byte {
	file_jthealth_biz_device_v1_device_api_proto_rawDescOnce.Do(func() {
		file_jthealth_biz_device_v1_device_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_jthealth_biz_device_v1_device_api_proto_rawDescData)
	})
	return file_jthealth_biz_device_v1_device_api_proto_rawDescData
}

var file_jthealth_biz_device_v1_device_api_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_jthealth_biz_device_v1_device_api_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_jthealth_biz_device_v1_device_api_proto_goTypes = []interface{}{
	(DeviceUsage)(0),                    // 0: jthealth.biz.device.v1.DeviceUsage
	(*CheckDeviceIsUsableRequest)(nil),  // 1: jthealth.biz.device.v1.CheckDeviceIsUsableRequest
	(*CheckDeviceIsUsableResponse)(nil), // 2: jthealth.biz.device.v1.CheckDeviceIsUsableResponse
	(*ListTrialDevicesRequest)(nil),     // 3: jthealth.biz.device.v1.ListTrialDevicesRequest
	(*ListTrialDevicesResponse)(nil),    // 4: jthealth.biz.device.v1.ListTrialDevicesResponse
	(*CreateTrialDeviceRequest)(nil),    // 5: jthealth.biz.device.v1.CreateTrialDeviceRequest
	(*CreateTrialDeviceResponse)(nil),   // 6: jthealth.biz.device.v1.CreateTrialDeviceResponse
	(*DeleteTrialDeviceRequest)(nil),    // 7: jthealth.biz.device.v1.DeleteTrialDeviceRequest
	(*DeleteTrialDeviceResponse)(nil),   // 8: jthealth.biz.device.v1.DeleteTrialDeviceResponse
	(*UpgradeTrialDeviceRequest)(nil),   // 9: jthealth.biz.device.v1.UpgradeTrialDeviceRequest
	(*UpgradeTrialDeviceResponse)(nil),  // 10: jthealth.biz.device.v1.UpgradeTrialDeviceResponse
	(*GetDeviceByIDRequest)(nil),        // 11: jthealth.biz.device.v1.GetDeviceByIDRequest
	(*GetDeviceByIDResponse)(nil),       // 12: jthealth.biz.device.v1.GetDeviceByIDResponse
	(*GetDeviceBySnOrMacRequest)(nil),   // 13: jthealth.biz.device.v1.GetDeviceBySnOrMacRequest
	(*GetDeviceBySnOrMacResponse)(nil),  // 14: jthealth.biz.device.v1.GetDeviceBySnOrMacResponse
	(*AddDeviceRequest)(nil),            // 15: jthealth.biz.device.v1.AddDeviceRequest
	(*AddDeviceResponse)(nil),           // 16: jthealth.biz.device.v1.AddDeviceResponse
	(*DeleteDeviceRequest)(nil),         // 17: jthealth.biz.device.v1.DeleteDeviceRequest
	(*DeleteDeviceResponse)(nil),        // 18: jthealth.biz.device.v1.DeleteDeviceResponse
	(*UpdateDeviceRequest)(nil),         // 19: jthealth.biz.device.v1.UpdateDeviceRequest
	(*UpdateDeviceResponse)(nil),        // 20: jthealth.biz.device.v1.UpdateDeviceResponse
	(*UploadExl)(nil),                   // 21: jthealth.biz.device.v1.UploadExl
	(*UploadExcelRequest)(nil),          // 22: jthealth.biz.device.v1.UploadExcelRequest
	(*UploadExcelResponse)(nil),         // 23: jthealth.biz.device.v1.UploadExcelResponse
	(*SetDistributorsReq)(nil),          // 24: jthealth.biz.device.v1.SetDistributorsReq
	(*SetDistributorsRsp)(nil),          // 25: jthealth.biz.device.v1.SetDistributorsRsp
	(*Pagination)(nil),                  // 26: jthealth.biz.device.v1.Pagination
	(*Device)(nil),                      // 27: jthealth.biz.device.v1.Device
	(*timestamppb.Timestamp)(nil),       // 28: google.protobuf.Timestamp
}
var file_jthealth_biz_device_v1_device_api_proto_depIdxs = []int32{
	27, // 0: jthealth.biz.device.v1.ListTrialDevicesResponse.trial_devices:type_name -> jthealth.biz.device.v1.Device
	27, // 1: jthealth.biz.device.v1.CreateTrialDeviceResponse.trial_device:type_name -> jthealth.biz.device.v1.Device
	27, // 2: jthealth.biz.device.v1.GetDeviceByIDResponse.device:type_name -> jthealth.biz.device.v1.Device
	27, // 3: jthealth.biz.device.v1.GetDeviceBySnOrMacResponse.device:type_name -> jthealth.biz.device.v1.Device
	0,  // 4: jthealth.biz.device.v1.AddDeviceRequest.device_usage:type_name -> jthealth.biz.device.v1.DeviceUsage
	28, // 5: jthealth.biz.device.v1.AddDeviceResponse.created_at:type_name -> google.protobuf.Timestamp
	28, // 6: jthealth.biz.device.v1.DeleteDeviceResponse.deleted_at:type_name -> google.protobuf.Timestamp
	27, // 7: jthealth.biz.device.v1.UpdateDeviceRequest.device:type_name -> jthealth.biz.device.v1.Device
	27, // 8: jthealth.biz.device.v1.UpdateDeviceResponse.device:type_name -> jthealth.biz.device.v1.Device
	21, // 9: jthealth.biz.device.v1.UploadExcelRequest.uploadExcel:type_name -> jthealth.biz.device.v1.UploadExl
	0,  // 10: jthealth.biz.device.v1.Device.device_usage:type_name -> jthealth.biz.device.v1.DeviceUsage
	1,  // 11: jthealth.biz.device.v1.DeviceAPI.CheckDeviceIsUsable:input_type -> jthealth.biz.device.v1.CheckDeviceIsUsableRequest
	3,  // 12: jthealth.biz.device.v1.DeviceAPI.ListTrialDevices:input_type -> jthealth.biz.device.v1.ListTrialDevicesRequest
	5,  // 13: jthealth.biz.device.v1.DeviceAPI.CreateTrialDevice:input_type -> jthealth.biz.device.v1.CreateTrialDeviceRequest
	7,  // 14: jthealth.biz.device.v1.DeviceAPI.DeleteTrialDevice:input_type -> jthealth.biz.device.v1.DeleteTrialDeviceRequest
	9,  // 15: jthealth.biz.device.v1.DeviceAPI.UpgradeTrialDevice:input_type -> jthealth.biz.device.v1.UpgradeTrialDeviceRequest
	11, // 16: jthealth.biz.device.v1.DeviceAPI.GetDeviceByID:input_type -> jthealth.biz.device.v1.GetDeviceByIDRequest
	13, // 17: jthealth.biz.device.v1.DeviceAPI.GetDeviceBySnOrMac:input_type -> jthealth.biz.device.v1.GetDeviceBySnOrMacRequest
	15, // 18: jthealth.biz.device.v1.DeviceAPI.AddDevice:input_type -> jthealth.biz.device.v1.AddDeviceRequest
	17, // 19: jthealth.biz.device.v1.DeviceAPI.DeleteDevice:input_type -> jthealth.biz.device.v1.DeleteDeviceRequest
	19, // 20: jthealth.biz.device.v1.DeviceAPI.UpdateDevice:input_type -> jthealth.biz.device.v1.UpdateDeviceRequest
	22, // 21: jthealth.biz.device.v1.DeviceAPI.UploadExcel:input_type -> jthealth.biz.device.v1.UploadExcelRequest
	24, // 22: jthealth.biz.device.v1.DeviceAPI.SetDistributors:input_type -> jthealth.biz.device.v1.SetDistributorsReq
	2,  // 23: jthealth.biz.device.v1.DeviceAPI.CheckDeviceIsUsable:output_type -> jthealth.biz.device.v1.CheckDeviceIsUsableResponse
	4,  // 24: jthealth.biz.device.v1.DeviceAPI.ListTrialDevices:output_type -> jthealth.biz.device.v1.ListTrialDevicesResponse
	6,  // 25: jthealth.biz.device.v1.DeviceAPI.CreateTrialDevice:output_type -> jthealth.biz.device.v1.CreateTrialDeviceResponse
	8,  // 26: jthealth.biz.device.v1.DeviceAPI.DeleteTrialDevice:output_type -> jthealth.biz.device.v1.DeleteTrialDeviceResponse
	10, // 27: jthealth.biz.device.v1.DeviceAPI.UpgradeTrialDevice:output_type -> jthealth.biz.device.v1.UpgradeTrialDeviceResponse
	12, // 28: jthealth.biz.device.v1.DeviceAPI.GetDeviceByID:output_type -> jthealth.biz.device.v1.GetDeviceByIDResponse
	14, // 29: jthealth.biz.device.v1.DeviceAPI.GetDeviceBySnOrMac:output_type -> jthealth.biz.device.v1.GetDeviceBySnOrMacResponse
	16, // 30: jthealth.biz.device.v1.DeviceAPI.AddDevice:output_type -> jthealth.biz.device.v1.AddDeviceResponse
	18, // 31: jthealth.biz.device.v1.DeviceAPI.DeleteDevice:output_type -> jthealth.biz.device.v1.DeleteDeviceResponse
	20, // 32: jthealth.biz.device.v1.DeviceAPI.UpdateDevice:output_type -> jthealth.biz.device.v1.UpdateDeviceResponse
	23, // 33: jthealth.biz.device.v1.DeviceAPI.UploadExcel:output_type -> jthealth.biz.device.v1.UploadExcelResponse
	25, // 34: jthealth.biz.device.v1.DeviceAPI.SetDistributors:output_type -> jthealth.biz.device.v1.SetDistributorsRsp
	23, // [23:35] is the sub-list for method output_type
	11, // [11:23] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_jthealth_biz_device_v1_device_api_proto_init() }
func file_jthealth_biz_device_v1_device_api_proto_init() {
	if File_jthealth_biz_device_v1_device_api_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_jthealth_biz_device_v1_device_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckDeviceIsUsableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jthealth_biz_device_v1_device_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckDeviceIsUsableResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jthealth_biz_device_v1_device_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTrialDevicesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jthealth_biz_device_v1_device_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTrialDevicesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jthealth_biz_device_v1_device_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTrialDeviceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jthealth_biz_device_v1_device_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTrialDeviceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jthealth_biz_device_v1_device_api_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTrialDeviceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jthealth_biz_device_v1_device_api_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTrialDeviceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jthealth_biz_device_v1_device_api_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpgradeTrialDeviceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jthealth_biz_device_v1_device_api_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpgradeTrialDeviceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jthealth_biz_device_v1_device_api_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeviceByIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jthealth_biz_device_v1_device_api_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeviceByIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jthealth_biz_device_v1_device_api_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeviceBySnOrMacRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jthealth_biz_device_v1_device_api_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeviceBySnOrMacResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jthealth_biz_device_v1_device_api_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddDeviceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jthealth_biz_device_v1_device_api_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddDeviceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jthealth_biz_device_v1_device_api_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDeviceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jthealth_biz_device_v1_device_api_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDeviceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jthealth_biz_device_v1_device_api_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDeviceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jthealth_biz_device_v1_device_api_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDeviceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jthealth_biz_device_v1_device_api_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadExl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jthealth_biz_device_v1_device_api_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadExcelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jthealth_biz_device_v1_device_api_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadExcelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jthealth_biz_device_v1_device_api_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetDistributorsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jthealth_biz_device_v1_device_api_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetDistributorsRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jthealth_biz_device_v1_device_api_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pagination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jthealth_biz_device_v1_device_api_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_jthealth_biz_device_v1_device_api_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   27,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_jthealth_biz_device_v1_device_api_proto_goTypes,
		DependencyIndexes: file_jthealth_biz_device_v1_device_api_proto_depIdxs,
		EnumInfos:         file_jthealth_biz_device_v1_device_api_proto_enumTypes,
		MessageInfos:      file_jthealth_biz_device_v1_device_api_proto_msgTypes,
	}.Build()
	File_jthealth_biz_device_v1_device_api_proto = out.File
	file_jthealth_biz_device_v1_device_api_proto_rawDesc = nil
	file_jthealth_biz_device_v1_device_api_proto_goTypes = nil
	file_jthealth_biz_device_v1_device_api_proto_depIdxs = nil
}
