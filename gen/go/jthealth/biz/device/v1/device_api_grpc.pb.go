// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package devicev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DeviceAPIClient is the client API for DeviceAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeviceAPIClient interface {
	//创建设备组
	CreateDeviceGroup(ctx context.Context, in *CreateDeviceGroupRequest, opts ...grpc.CallOption) (*CreateDeviceGroupResponse, error)
	//获取设备组列表
	GetDeviceGroupList(ctx context.Context, in *GetDeviceGroupListRequest, opts ...grpc.CallOption) (*GetDeviceGroupListResponse, error)
	//导入设备列表
	ImportDeviceList(ctx context.Context, in *ImportDeviceListRequest, opts ...grpc.CallOption) (*ImportDeviceListResponse, error)
	//获取设备列表
	GetDeviceList(ctx context.Context, in *GetDeviceListRequest, opts ...grpc.CallOption) (*GetDeviceListResponse, error)
}

type deviceAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewDeviceAPIClient(cc grpc.ClientConnInterface) DeviceAPIClient {
	return &deviceAPIClient{cc}
}

func (c *deviceAPIClient) CreateDeviceGroup(ctx context.Context, in *CreateDeviceGroupRequest, opts ...grpc.CallOption) (*CreateDeviceGroupResponse, error) {
	out := new(CreateDeviceGroupResponse)
	err := c.cc.Invoke(ctx, "/jthealth.biz.device.v1.DeviceAPI/CreateDeviceGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceAPIClient) GetDeviceGroupList(ctx context.Context, in *GetDeviceGroupListRequest, opts ...grpc.CallOption) (*GetDeviceGroupListResponse, error) {
	out := new(GetDeviceGroupListResponse)
	err := c.cc.Invoke(ctx, "/jthealth.biz.device.v1.DeviceAPI/GetDeviceGroupList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceAPIClient) ImportDeviceList(ctx context.Context, in *ImportDeviceListRequest, opts ...grpc.CallOption) (*ImportDeviceListResponse, error) {
	out := new(ImportDeviceListResponse)
	err := c.cc.Invoke(ctx, "/jthealth.biz.device.v1.DeviceAPI/ImportDeviceList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceAPIClient) GetDeviceList(ctx context.Context, in *GetDeviceListRequest, opts ...grpc.CallOption) (*GetDeviceListResponse, error) {
	out := new(GetDeviceListResponse)
	err := c.cc.Invoke(ctx, "/jthealth.biz.device.v1.DeviceAPI/GetDeviceList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeviceAPIServer is the server API for DeviceAPI service.
// All implementations must embed UnimplementedDeviceAPIServer
// for forward compatibility
type DeviceAPIServer interface {
	//创建设备组
	CreateDeviceGroup(context.Context, *CreateDeviceGroupRequest) (*CreateDeviceGroupResponse, error)
	//获取设备组列表
	GetDeviceGroupList(context.Context, *GetDeviceGroupListRequest) (*GetDeviceGroupListResponse, error)
	//导入设备列表
	ImportDeviceList(context.Context, *ImportDeviceListRequest) (*ImportDeviceListResponse, error)
	//获取设备列表
	GetDeviceList(context.Context, *GetDeviceListRequest) (*GetDeviceListResponse, error)
	mustEmbedUnimplementedDeviceAPIServer()
}

// UnimplementedDeviceAPIServer must be embedded to have forward compatible implementations.
type UnimplementedDeviceAPIServer struct {
}

func (UnimplementedDeviceAPIServer) CreateDeviceGroup(context.Context, *CreateDeviceGroupRequest) (*CreateDeviceGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDeviceGroup not implemented")
}
func (UnimplementedDeviceAPIServer) GetDeviceGroupList(context.Context, *GetDeviceGroupListRequest) (*GetDeviceGroupListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceGroupList not implemented")
}
func (UnimplementedDeviceAPIServer) ImportDeviceList(context.Context, *ImportDeviceListRequest) (*ImportDeviceListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportDeviceList not implemented")
}
func (UnimplementedDeviceAPIServer) GetDeviceList(context.Context, *GetDeviceListRequest) (*GetDeviceListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceList not implemented")
}
func (UnimplementedDeviceAPIServer) mustEmbedUnimplementedDeviceAPIServer() {}

// UnsafeDeviceAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeviceAPIServer will
// result in compilation errors.
type UnsafeDeviceAPIServer interface {
	mustEmbedUnimplementedDeviceAPIServer()
}

func RegisterDeviceAPIServer(s *grpc.Server, srv DeviceAPIServer) {
	s.RegisterService(&_DeviceAPI_serviceDesc, srv)
}

func _DeviceAPI_CreateDeviceGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeviceGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceAPIServer).CreateDeviceGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jthealth.biz.device.v1.DeviceAPI/CreateDeviceGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceAPIServer).CreateDeviceGroup(ctx, req.(*CreateDeviceGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceAPI_GetDeviceGroupList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceGroupListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceAPIServer).GetDeviceGroupList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jthealth.biz.device.v1.DeviceAPI/GetDeviceGroupList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceAPIServer).GetDeviceGroupList(ctx, req.(*GetDeviceGroupListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceAPI_ImportDeviceList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportDeviceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceAPIServer).ImportDeviceList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jthealth.biz.device.v1.DeviceAPI/ImportDeviceList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceAPIServer).ImportDeviceList(ctx, req.(*ImportDeviceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceAPI_GetDeviceList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceAPIServer).GetDeviceList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jthealth.biz.device.v1.DeviceAPI/GetDeviceList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceAPIServer).GetDeviceList(ctx, req.(*GetDeviceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DeviceAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "jthealth.biz.device.v1.DeviceAPI",
	HandlerType: (*DeviceAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDeviceGroup",
			Handler:    _DeviceAPI_CreateDeviceGroup_Handler,
		},
		{
			MethodName: "GetDeviceGroupList",
			Handler:    _DeviceAPI_GetDeviceGroupList_Handler,
		},
		{
			MethodName: "ImportDeviceList",
			Handler:    _DeviceAPI_ImportDeviceList_Handler,
		},
		{
			MethodName: "GetDeviceList",
			Handler:    _DeviceAPI_GetDeviceList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "jthealth/biz/device/v1/device_api.proto",
}
