// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package subscriptionv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SubscriptionAPIClient is the client API for SubscriptionAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SubscriptionAPIClient interface {
	//创建体质卡组
	CreatePhysiqueCardGroup(ctx context.Context, in *CreatePhysiqueCardGroupRequest, opts ...grpc.CallOption) (*CreatePhysiqueCardGroupResponse, error)
	//获取体质卡组列表
	GetPhysiqueCardGroupList(ctx context.Context, in *GetPhysiqueCardGroupListRequest, opts ...grpc.CallOption) (*GetPhysiqueCardGroupListResponse, error)
	//获取体质卡列表
	GetPhysiqueCardList(ctx context.Context, in *GetPhysiqueCardListRequest, opts ...grpc.CallOption) (*GetPhysiqueCardListResponse, error)
	// 获取用户增值服务信息
	GetUserVasInfo(ctx context.Context, in *GetUserVasInfoRequest, opts ...grpc.CallOption) (*GetUserVasInfoResponse, error)
	// 兑换体质卡
	ExchangePhysiqueCard(ctx context.Context, in *ExchangePhysiqueCardRequest, opts ...grpc.CallOption) (*ExchangePhysiqueCardResponse, error)
}

type subscriptionAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewSubscriptionAPIClient(cc grpc.ClientConnInterface) SubscriptionAPIClient {
	return &subscriptionAPIClient{cc}
}

func (c *subscriptionAPIClient) CreatePhysiqueCardGroup(ctx context.Context, in *CreatePhysiqueCardGroupRequest, opts ...grpc.CallOption) (*CreatePhysiqueCardGroupResponse, error) {
	out := new(CreatePhysiqueCardGroupResponse)
	err := c.cc.Invoke(ctx, "/jthealth.biz.subscription.v1.SubscriptionAPI/CreatePhysiqueCardGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionAPIClient) GetPhysiqueCardGroupList(ctx context.Context, in *GetPhysiqueCardGroupListRequest, opts ...grpc.CallOption) (*GetPhysiqueCardGroupListResponse, error) {
	out := new(GetPhysiqueCardGroupListResponse)
	err := c.cc.Invoke(ctx, "/jthealth.biz.subscription.v1.SubscriptionAPI/GetPhysiqueCardGroupList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionAPIClient) GetPhysiqueCardList(ctx context.Context, in *GetPhysiqueCardListRequest, opts ...grpc.CallOption) (*GetPhysiqueCardListResponse, error) {
	out := new(GetPhysiqueCardListResponse)
	err := c.cc.Invoke(ctx, "/jthealth.biz.subscription.v1.SubscriptionAPI/GetPhysiqueCardList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionAPIClient) GetUserVasInfo(ctx context.Context, in *GetUserVasInfoRequest, opts ...grpc.CallOption) (*GetUserVasInfoResponse, error) {
	out := new(GetUserVasInfoResponse)
	err := c.cc.Invoke(ctx, "/jthealth.biz.subscription.v1.SubscriptionAPI/GetUserVasInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionAPIClient) ExchangePhysiqueCard(ctx context.Context, in *ExchangePhysiqueCardRequest, opts ...grpc.CallOption) (*ExchangePhysiqueCardResponse, error) {
	out := new(ExchangePhysiqueCardResponse)
	err := c.cc.Invoke(ctx, "/jthealth.biz.subscription.v1.SubscriptionAPI/ExchangePhysiqueCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SubscriptionAPIServer is the server API for SubscriptionAPI service.
// All implementations must embed UnimplementedSubscriptionAPIServer
// for forward compatibility
type SubscriptionAPIServer interface {
	//创建体质卡组
	CreatePhysiqueCardGroup(context.Context, *CreatePhysiqueCardGroupRequest) (*CreatePhysiqueCardGroupResponse, error)
	//获取体质卡组列表
	GetPhysiqueCardGroupList(context.Context, *GetPhysiqueCardGroupListRequest) (*GetPhysiqueCardGroupListResponse, error)
	//获取体质卡列表
	GetPhysiqueCardList(context.Context, *GetPhysiqueCardListRequest) (*GetPhysiqueCardListResponse, error)
	// 获取用户增值服务信息
	GetUserVasInfo(context.Context, *GetUserVasInfoRequest) (*GetUserVasInfoResponse, error)
	// 兑换体质卡
	ExchangePhysiqueCard(context.Context, *ExchangePhysiqueCardRequest) (*ExchangePhysiqueCardResponse, error)
	mustEmbedUnimplementedSubscriptionAPIServer()
}

// UnimplementedSubscriptionAPIServer must be embedded to have forward compatible implementations.
type UnimplementedSubscriptionAPIServer struct {
}

func (UnimplementedSubscriptionAPIServer) CreatePhysiqueCardGroup(context.Context, *CreatePhysiqueCardGroupRequest) (*CreatePhysiqueCardGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePhysiqueCardGroup not implemented")
}
func (UnimplementedSubscriptionAPIServer) GetPhysiqueCardGroupList(context.Context, *GetPhysiqueCardGroupListRequest) (*GetPhysiqueCardGroupListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPhysiqueCardGroupList not implemented")
}
func (UnimplementedSubscriptionAPIServer) GetPhysiqueCardList(context.Context, *GetPhysiqueCardListRequest) (*GetPhysiqueCardListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPhysiqueCardList not implemented")
}
func (UnimplementedSubscriptionAPIServer) GetUserVasInfo(context.Context, *GetUserVasInfoRequest) (*GetUserVasInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserVasInfo not implemented")
}
func (UnimplementedSubscriptionAPIServer) ExchangePhysiqueCard(context.Context, *ExchangePhysiqueCardRequest) (*ExchangePhysiqueCardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExchangePhysiqueCard not implemented")
}
func (UnimplementedSubscriptionAPIServer) mustEmbedUnimplementedSubscriptionAPIServer() {}

// UnsafeSubscriptionAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SubscriptionAPIServer will
// result in compilation errors.
type UnsafeSubscriptionAPIServer interface {
	mustEmbedUnimplementedSubscriptionAPIServer()
}

func RegisterSubscriptionAPIServer(s *grpc.Server, srv SubscriptionAPIServer) {
	s.RegisterService(&_SubscriptionAPI_serviceDesc, srv)
}

func _SubscriptionAPI_CreatePhysiqueCardGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePhysiqueCardGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionAPIServer).CreatePhysiqueCardGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jthealth.biz.subscription.v1.SubscriptionAPI/CreatePhysiqueCardGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionAPIServer).CreatePhysiqueCardGroup(ctx, req.(*CreatePhysiqueCardGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionAPI_GetPhysiqueCardGroupList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPhysiqueCardGroupListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionAPIServer).GetPhysiqueCardGroupList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jthealth.biz.subscription.v1.SubscriptionAPI/GetPhysiqueCardGroupList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionAPIServer).GetPhysiqueCardGroupList(ctx, req.(*GetPhysiqueCardGroupListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionAPI_GetPhysiqueCardList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPhysiqueCardListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionAPIServer).GetPhysiqueCardList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jthealth.biz.subscription.v1.SubscriptionAPI/GetPhysiqueCardList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionAPIServer).GetPhysiqueCardList(ctx, req.(*GetPhysiqueCardListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionAPI_GetUserVasInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserVasInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionAPIServer).GetUserVasInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jthealth.biz.subscription.v1.SubscriptionAPI/GetUserVasInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionAPIServer).GetUserVasInfo(ctx, req.(*GetUserVasInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionAPI_ExchangePhysiqueCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExchangePhysiqueCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionAPIServer).ExchangePhysiqueCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jthealth.biz.subscription.v1.SubscriptionAPI/ExchangePhysiqueCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionAPIServer).ExchangePhysiqueCard(ctx, req.(*ExchangePhysiqueCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SubscriptionAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "jthealth.biz.subscription.v1.SubscriptionAPI",
	HandlerType: (*SubscriptionAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePhysiqueCardGroup",
			Handler:    _SubscriptionAPI_CreatePhysiqueCardGroup_Handler,
		},
		{
			MethodName: "GetPhysiqueCardGroupList",
			Handler:    _SubscriptionAPI_GetPhysiqueCardGroupList_Handler,
		},
		{
			MethodName: "GetPhysiqueCardList",
			Handler:    _SubscriptionAPI_GetPhysiqueCardList_Handler,
		},
		{
			MethodName: "GetUserVasInfo",
			Handler:    _SubscriptionAPI_GetUserVasInfo_Handler,
		},
		{
			MethodName: "ExchangePhysiqueCard",
			Handler:    _SubscriptionAPI_ExchangePhysiqueCard_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "jthealth/biz/subscription/v1/subscription_api.proto",
}
