// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: jthealth/biz/sms/v1/sms_api.proto

package smsv1

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for SmsAPI service

func NewSmsAPIEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for SmsAPI service

type SmsAPIService interface {
	// JingTongSendVerificationCode 发送手机验证码.
	JingTongSendVerificationCode(ctx context.Context, in *SendVerificationCodeRequest, opts ...client.CallOption) (*SendVerificationCodeResponse, error)
	// JingTongSendGetLastestVerificationCode 获取最新的短信.
	JingTongSendGetLastestVerificationCode(ctx context.Context, in *GetLastestVerificationCodeRequest, opts ...client.CallOption) (*GetLastestVerificationCodeResponse, error)
}

type smsAPIService struct {
	c    client.Client
	name string
}

func NewSmsAPIService(name string, c client.Client) SmsAPIService {
	return &smsAPIService{
		c:    c,
		name: name,
	}
}

func (c *smsAPIService) JingTongSendVerificationCode(ctx context.Context, in *SendVerificationCodeRequest, opts ...client.CallOption) (*SendVerificationCodeResponse, error) {
	req := c.c.NewRequest(c.name, "SmsAPI.JingTongSendVerificationCode", in)
	out := new(SendVerificationCodeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smsAPIService) JingTongSendGetLastestVerificationCode(ctx context.Context, in *GetLastestVerificationCodeRequest, opts ...client.CallOption) (*GetLastestVerificationCodeResponse, error) {
	req := c.c.NewRequest(c.name, "SmsAPI.JingTongSendGetLastestVerificationCode", in)
	out := new(GetLastestVerificationCodeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SmsAPI service

type SmsAPIHandler interface {
	// JingTongSendVerificationCode 发送手机验证码.
	JingTongSendVerificationCode(context.Context, *SendVerificationCodeRequest, *SendVerificationCodeResponse) error
	// JingTongSendGetLastestVerificationCode 获取最新的短信.
	JingTongSendGetLastestVerificationCode(context.Context, *GetLastestVerificationCodeRequest, *GetLastestVerificationCodeResponse) error
}

func RegisterSmsAPIHandler(s server.Server, hdlr SmsAPIHandler, opts ...server.HandlerOption) error {
	type smsAPI interface {
		JingTongSendVerificationCode(ctx context.Context, in *SendVerificationCodeRequest, out *SendVerificationCodeResponse) error
		JingTongSendGetLastestVerificationCode(ctx context.Context, in *GetLastestVerificationCodeRequest, out *GetLastestVerificationCodeResponse) error
	}
	type SmsAPI struct {
		smsAPI
	}
	h := &smsAPIHandler{hdlr}
	return s.Handle(s.NewHandler(&SmsAPI{h}, opts...))
}

type smsAPIHandler struct {
	SmsAPIHandler
}

func (h *smsAPIHandler) JingTongSendVerificationCode(ctx context.Context, in *SendVerificationCodeRequest, out *SendVerificationCodeResponse) error {
	return h.SmsAPIHandler.JingTongSendVerificationCode(ctx, in, out)
}

func (h *smsAPIHandler) JingTongSendGetLastestVerificationCode(ctx context.Context, in *GetLastestVerificationCodeRequest, out *GetLastestVerificationCodeResponse) error {
	return h.SmsAPIHandler.JingTongSendGetLastestVerificationCode(ctx, in, out)
}
